use crate::expr_arena_ast::{Arena, Node, Op};
use crate::util::tok::Tok;

grammar<'ast, 'input>(arena: &'ast Arena<'ast>);

extern {
    type Location = usize;

    enum Tok<'input> {
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "-" => Tok::Minus,
        "+" => Tok::Plus,
        "*" => Tok::Times,
        "/" => Tok::Div,
        "," => Tok::Comma,
        Num => Tok::Num(<i32>)
    }
}

pub Expr: &'ast Node<'ast> = {
    <l:Expr> <op:OpExpr> <r:Factor> => arena.alloc(Node::Binary { <> }),
    Factor,
};

OpExpr: Op = {
    "-" => Op::Sub,
    "+" => Op::Add,
};

Comma<T>: Vec<T> = {
    <h:(<T> ",")*> <t:T?> =>
        h.into_iter().chain(t).collect()
};

Factor = {
    <l:Factor> <op:OpFactor> <r:Term> => arena.alloc(Node::Binary { <> }),
    "*" "(" <Comma<Expr>> ")" => arena.alloc(Node::Reduce(Op::Mul, <>)),
    Term,
};

OpFactor: Op = {
    "*" => Op::Mul,
    "/" => Op::Div,
};

Term: &'ast Node<'ast> = {
    <n:Num> => arena.alloc(Node::Value(n)),
    "(" <Expr> ")" => arena.alloc(Node::Paren(<>)),
};
