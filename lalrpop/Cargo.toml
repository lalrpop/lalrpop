[package]
name = "lalrpop"
description = "convenient LR(1) parser generator"
readme = "../README.md"
keywords = ["parser", "generator", "LR", "yacc", "grammar"]
categories = ["parsing"]
workspace = ".."

repository.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
version.workspace = true
rust-version.workspace = true

exclude = ["build.rs"]

[lib]
doctest = false

[dependencies]
ascii-canvas = { version = "3.0", default_features = false }
bit-set = { version = "0.5.2", default_features = false }
diff = { workspace = true }
ena = { version = "0.14", default_features = false }
is-terminal = "0.4.2"
itertools = { version = "0.10", default_features = false, features = ["use_std"] }
petgraph = { version = "0.6", default_features = false }
regex = { workspace = true }
regex-syntax = { workspace = true }
string_cache = { version = "0.8", default_features = false }
term = { version = "0.7", default_features = false }
tiny-keccak = { version = "2.0.2", features = ["sha3"] }
unicode-xid = { version = "0.2", default_features = false }

# This dependency is only needed for binary builds, if you use LALRPOP as
# library, disable it in your project by setting default_features = false.
pico-args = { version = "0.5", default_features = false, optional = true }


[dev-dependencies]
rand = "0.8"

[dependencies.lalrpop-util]
path = "../lalrpop-util"
version = "0.19.10" # LALRPOP

[features]
default=["lexer", "unicode", "pico-args"]

lexer = ["lalrpop-util/lexer"]
unicode = ["regex?/unicode", "regex-syntax?/unicode"]

# Feature used when developing LALRPOP. Tells the build script to use an existing lalrpop binary to
# generate LALRPOPs own parser instead of using the saved parser.
test = []

[package.metadata.docs.rs]
features = ["lexer"]
