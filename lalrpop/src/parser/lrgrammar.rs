// auto-generated: "lalrpop 0.19.8"
// sha3: 41f98a6a8c1305d7ef67ac81e1eb4a8b9450d8a01a72a06b1fc8bb7900055a0b
use string_cache::DefaultAtom as Atom;
use crate::grammar::parse_tree::*;
use crate::grammar::pattern::*;
use std::iter::once;
use crate::tok::{self, Tok};
use crate::util::strip;
use lalrpop_util::ParseError;
use super::Top;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as ___lalrpop_util;
#[allow(unused_imports)]
use self::___lalrpop_util::state_machine as ___state_machine;
extern crate core;
extern crate alloc;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod ___parse___Top {
#![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

use string_cache::DefaultAtom as Atom;
use crate::grammar::parse_tree::*;
use crate::grammar::pattern::*;
use std::iter::once;
use crate::tok::{self, Tok};
use crate::util::strip;
use lalrpop_util::ParseError;
use super::super::Top;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as ___lalrpop_util;
#[allow(unused_imports)]
use self::___lalrpop_util::state_machine as ___state_machine;
extern crate core;
extern crate alloc;
use super::___ToTriple;
#[allow(dead_code)]
pub(crate) enum ___Symbol<'input>
 {
Variant0(Tok<'input>),
Variant1(&'input str),
Variant2(core::option::Option<Tok<'input>>),
Variant3(TypeRef),
Variant4(core::option::Option<TypeRef>),
Variant5(Vec<TypeBoundParameter<TypeRef>>),
Variant6(core::option::Option<Vec<TypeBoundParameter<TypeRef>>>),
Variant7(Condition),
Variant8(core::option::Option<Condition>),
Variant9(()),
Variant10(Alternative),
Variant11(alloc::vec::Vec<Alternative>),
Variant12(Conversion),
Variant13(alloc::vec::Vec<Conversion>),
Variant14(FieldPattern<TypeRef>),
Variant15(alloc::vec::Vec<FieldPattern<TypeRef>>),
Variant16(Parameter),
Variant17(alloc::vec::Vec<Parameter>),
Variant18(WhereClause<TypeRef>),
Variant19(alloc::vec::Vec<WhereClause<TypeRef>>),
Variant20(Atom),
Variant21(alloc::vec::Vec<Atom>),
Variant22(Lifetime),
Variant23(alloc::vec::Vec<Lifetime>),
Variant24(MatchItem),
Variant25(alloc::vec::Vec<MatchItem>),
Variant26(NonterminalString),
Variant27(alloc::vec::Vec<NonterminalString>),
Variant28(Pattern<TypeRef>),
Variant29(alloc::vec::Vec<Pattern<TypeRef>>),
Variant30(Symbol),
Variant31(alloc::vec::Vec<Symbol>),
Variant32(TypeBound<TypeRef>),
Variant33(alloc::vec::Vec<TypeBound<TypeRef>>),
Variant34(TypeBoundParameter<TypeRef>),
Variant35(alloc::vec::Vec<TypeBoundParameter<TypeRef>>),
Variant36(TypeParameter),
Variant37(alloc::vec::Vec<TypeParameter>),
Variant38(alloc::vec::Vec<TypeRef>),
Variant39(usize),
Variant40(ActionKind),
Variant41(core::option::Option<ActionKind>),
Variant42(core::option::Option<Alternative>),
Variant43(Vec<Alternative>),
Variant44(Annotation),
Variant45(alloc::vec::Vec<Annotation>),
Variant46((Atom, String)),
Variant47(core::option::Option<(Atom, String)>),
Variant48(AssociatedType),
Variant49(alloc::vec::Vec<AssociatedType>),
Variant50(Vec<Conversion>),
Variant51(Vec<Parameter>),
Variant52(Vec<WhereClause<TypeRef>>),
Variant53(Vec<MatchItem>),
Variant54(Vec<NonterminalString>),
Variant55(Vec<Pattern<TypeRef>>),
Variant56(Vec<Symbol>),
Variant57(Vec<TypeParameter>),
Variant58(Vec<TypeRef>),
Variant59(ConditionOp),
Variant60(core::option::Option<Conversion>),
Variant61(EnumToken),
Variant62(ExprSymbol),
Variant63(GrammarItem),
Variant64(core::option::Option<FieldPattern<TypeRef>>),
Variant65(Grammar),
Variant66(alloc::vec::Vec<GrammarItem>),
Variant67(core::option::Option<Parameter>),
Variant68(core::option::Option<Vec<Parameter>>),
Variant69(core::option::Option<Vec<TypeParameter>>),
Variant70(core::option::Option<WhereClause<TypeRef>>),
Variant71(core::option::Option<Vec<WhereClause<TypeRef>>>),
Variant72(core::option::Option<Lifetime>),
Variant73(MatchContents),
Variant74(core::option::Option<MatchItem>),
Variant75(MatchMapping),
Variant76(TerminalLiteral),
Variant77(MatchToken),
Variant78((NonterminalString, Vec<NonterminalString>)),
Variant79(core::option::Option<NonterminalString>),
Variant80(Path),
Variant81(core::option::Option<Pattern<TypeRef>>),
Variant82(PatternKind<TypeRef>),
Variant83(Vec<Lifetime>),
Variant84(Vec<TypeBound<TypeRef>>),
Variant85(TerminalString),
Variant86(RepeatOp),
Variant87(String),
Variant88(alloc::vec::Vec<String>),
Variant89(core::option::Option<Symbol>),
Variant90(SymbolKind),
Variant91(Top),
Variant92(core::option::Option<TypeBound<TypeRef>>),
Variant93(core::option::Option<TypeBoundParameter<TypeRef>>),
Variant94(core::option::Option<TypeParameter>),
Variant95(Visibility),
}
const ___ACTION: &[i16] = &[
// State 0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 1
0,0,0,286,287,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,288,0,0,0,0,
// State 2
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 3
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,296,0,0,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,299,0,0,
// State 4
0,0,0,0,0,0,13,0,0,0,0,0,305,0,14,0,15,0,0,0,0,0,0,0,0,0,0,306,0,307,0,308,0,0,0,0,0,0,309,0,0,310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 5
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 6
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,
// State 7
0,0,0,286,287,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,288,0,0,0,0,
// State 8
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,288,0,0,0,0,
// State 9
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,31,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 10
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,-150,0,0,0,0,0,0,0,0,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,323,0,0,0,0,0,0,0,0,0,0,0,0,
// State 11
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 12
0,0,0,0,0,0,13,-162,0,0,0,0,305,0,14,0,15,0,0,0,0,0,0,0,0,0,0,306,0,307,0,308,0,0,0,0,0,0,309,0,0,310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 13
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 14
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 15
337,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 16
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,
// State 17
0,0,0,16,0,17,18,-178,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 18
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 19
0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,348,0,0,0,0,0,0,0,0,0,0,0,0,
// State 20
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,47,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 21
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,
// State 22
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,288,0,0,0,0,
// State 23
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,53,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 24
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,
// State 25
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,57,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 26
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 27
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 28
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 29
0,0,0,0,0,0,0,-146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 30
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 31
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-174,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 32
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,-152,0,0,0,0,0,0,0,0,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,323,0,0,0,0,0,0,0,0,0,0,0,0,
// State 33
0,0,0,0,0,0,13,-162,0,0,0,0,305,0,14,0,15,0,0,0,0,0,0,0,0,0,0,306,0,307,0,308,0,0,0,0,0,0,309,0,0,310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 34
0,0,0,0,0,0,0,0,0,0,0,0,376,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,377,0,
// State 35
0,0,0,0,0,0,13,-164,0,0,0,0,305,0,14,0,15,0,0,0,0,0,0,0,0,0,0,306,0,307,0,308,0,0,0,0,0,0,309,0,0,310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 36
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 37
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,-182,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 38
-435,0,0,-435,0,0,-435,-435,389,390,-435,0,0,0,0,-435,-435,0,0,-435,-435,-435,-435,-435,391,-435,-435,0,-435,-435,0,-435,-435,0,0,0,0,0,-435,0,0,0,0,0,0,0,0,0,-435,0,0,0,0,0,0,0,0,-435,0,
// State 39
337,0,0,0,0,0,40,-195,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 40
337,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,338,339,0,340,395,0,396,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,
// State 41
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,
// State 42
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 43
0,0,0,16,0,17,18,-180,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 44
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 45
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 46
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 47
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,88,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 48
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,
// State 49
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,92,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 50
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 51
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 52
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 53
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,100,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 54
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 55
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 56
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 57
0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,413,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 58
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 59
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 60
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 61
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 62
0,0,0,0,0,0,0,-148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 63
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,365,0,0,0,0,0,0,
// State 64
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 65
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,423,424,0,342,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 66
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-176,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 67
0,0,0,0,0,0,0,0,0,0,-411,0,0,0,0,-411,0,0,0,0,0,0,0,0,0,0,0,0,0,0,322,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 68
0,0,0,0,0,0,0,0,0,0,-415,0,0,0,14,-415,0,0,0,0,0,0,0,0,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,436,0,0,0,0,0,0,0,0,0,0,0,0,
// State 69
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-174,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 70
0,0,0,0,0,0,0,0,0,0,0,0,440,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,441,0,
// State 71
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,-184,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 72
337,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,-166,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 73
337,0,0,0,0,0,40,-196,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 74
0,0,0,0,0,0,0,0,389,390,0,0,0,0,0,0,0,0,0,0,0,0,0,453,391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 75
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 76
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 77
0,0,0,16,0,17,18,-178,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 78
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,-182,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 79
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-174,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 80
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 81
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 82
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 83
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 84
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 85
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 86
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 87
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 88
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,136,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 89
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 90
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 91
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 92
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 93
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 94
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 95
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 96
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 97
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 98
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 99
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 100
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 101
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 102
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 103
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 104
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 105
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 106
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 107
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 108
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 109
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 110
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 111
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 112
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 113
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,423,424,0,342,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 114
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,0,0,0,0,0,0,0,0,170,0,0,0,476,0,
// State 115
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,297,0,0,0,0,0,298,0,0,482,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-154,0,
// State 116
0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,0,0,0,0,0,0,0,0,
// State 117
0,0,0,0,0,0,0,0,0,0,-413,0,0,0,0,-413,0,0,0,0,0,0,0,0,0,0,0,0,0,0,322,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 118
0,0,0,0,0,0,0,0,0,0,-417,0,0,0,14,-417,0,0,0,0,0,0,0,0,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,436,0,0,0,0,0,0,0,0,0,0,0,0,
// State 119
0,0,0,0,0,0,13,0,0,0,0,0,305,0,14,0,15,0,0,0,0,0,0,0,0,0,0,306,0,307,0,308,0,0,0,0,0,0,309,0,0,310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 120
337,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,-168,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 121
337,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 122
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 123
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 124
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 125
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 126
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 127
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 128
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 129
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 130
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 131
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 132
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 133
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 134
0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 135
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 136
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 137
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 138
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 139
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 140
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 141
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 142
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 143
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 144
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 145
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 146
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 147
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 148
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 149
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 150
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 151
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 152
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 153
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 154
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 155
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 156
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 157
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 158
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 159
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 160
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 161
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 162
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,297,0,0,0,0,0,298,0,0,482,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-154,0,
// State 163
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-158,0,0,0,0,0,424,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 164
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 165
337,0,0,286,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,512,513,514,515,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,222,0,0,
// State 166
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,0,0,0,0,0,0,0,0,170,0,0,0,517,0,
// State 167
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,0,0,0,518,0,
// State 168
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 169
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 170
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,297,0,0,0,0,0,298,0,0,482,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-156,0,
// State 171
0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 172
0,0,0,16,0,17,18,-178,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 173
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,-170,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 174
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-174,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 175
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 176
0,0,0,0,0,0,0,0,389,390,0,0,0,0,0,0,0,0,0,0,0,0,0,538,391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 177
337,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 178
0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 179
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 180
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 181
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 182
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 183
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 184
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 185
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 186
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 187
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 188
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 189
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 190
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,
// State 191
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 192
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 193
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 194
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 195
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 196
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 197
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 198
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 199
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 200
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 201
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 202
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 203
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 204
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 205
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 206
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 207
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 208
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 209
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 210
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 211
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 212
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 213
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 214
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 215
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 216
337,0,0,286,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,512,513,514,515,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,222,0,0,
// State 217
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-160,0,0,0,0,0,424,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 218
337,0,0,286,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 219
337,0,0,0,0,0,40,0,0,0,-114,0,0,0,0,-114,41,0,0,512,513,514,515,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,251,0,0,0,0,0,0,0,0,-114,0,
// State 220
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,424,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 221
337,0,0,286,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,512,513,514,515,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,0,-138,0,
// State 222
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,0,0,0,552,0,
// State 223
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,0,0,0,553,0,
// State 224
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,-172,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 225
0,0,0,0,0,0,0,0,389,390,0,0,0,0,0,0,0,0,0,0,0,0,0,560,391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 226
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 227
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 228
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 229
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 230
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 231
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 232
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 233
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 234
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 235
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 236
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 237
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 238
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 239
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 240
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 241
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 242
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 243
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 244
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 245
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 246
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 247
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 248
337,0,0,286,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,512,513,514,515,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,222,0,0,
// State 249
337,0,0,0,0,0,40,0,0,0,-115,0,0,0,0,-115,41,0,0,512,513,514,515,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,270,0,0,0,0,0,0,0,0,-115,0,
// State 250
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,424,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 251
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,513,514,515,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 252
0,567,568,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,569,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,570,
// State 253
337,0,0,286,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,512,513,514,515,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,0,-140,0,
// State 254
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,0,0,0,574,0,
// State 255
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,296,0,0,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-142,0,
// State 256
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 257
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 258
0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 259
0,0,0,0,0,0,0,0,0,0,-415,0,0,0,14,-415,0,0,0,0,0,0,0,0,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,436,0,0,0,0,0,0,0,0,0,0,0,0,
// State 260
0,0,0,16,0,17,18,-178,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 261
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 262
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 263
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 264
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 265
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 266
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 267
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 268
337,0,0,286,0,0,40,0,0,0,0,0,0,0,0,0,41,0,0,512,513,514,515,0,0,338,339,0,340,341,0,342,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,222,0,0,
// State 269
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,424,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 270
0,0,0,0,0,0,0,0,0,0,-110,0,0,0,0,-110,0,0,0,512,513,514,515,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-110,0,
// State 271
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 272
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,296,0,0,297,0,0,0,0,0,298,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-144,0,
// State 273
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 274
0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,-510,0,-510,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,364,0,365,0,288,0,0,0,0,
// State 275
0,0,0,0,0,0,0,0,0,0,-111,0,0,0,0,-111,0,0,0,512,513,514,515,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-111,0,
// State 276
0,0,0,16,0,17,18,-178,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 277
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,-170,0,0,0,0,0,307,322,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 278
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 279
0,0,0,16,0,17,18,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,308,0,0,0,0,0,0,0,19,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 280
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 281
-127,0,0,-127,0,0,-127,0,0,0,0,0,0,0,0,0,-127,0,0,0,0,0,0,0,0,-127,-127,0,-127,-127,0,-127,-127,0,0,0,0,0,-127,0,0,0,0,0,0,0,0,-127,0,0,0,0,-127,0,0,0,0,0,0,
// State 282
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 283
0,0,0,-428,-428,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-428,0,0,0,0,0,0,-428,0,0,0,0,
// State 284
0,0,0,-505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-505,0,0,0,0,0,0,-505,0,0,0,0,
// State 285
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 286
0,0,0,-425,-425,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-425,0,0,0,0,0,0,-425,0,0,0,0,
// State 287
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 288
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 289
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 290
-420,0,0,-420,0,0,-420,-420,-420,-420,-420,0,0,0,0,-420,-420,0,0,-420,-420,-420,-420,-420,-420,-420,-420,0,-420,-420,0,-420,-420,0,0,0,0,0,-420,0,0,0,0,0,0,0,0,0,-420,0,0,0,0,0,0,0,0,-420,0,
// State 291
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 292
-419,0,0,-419,0,0,-419,-419,-419,-419,-419,0,0,0,0,-419,-419,0,0,-419,-419,-419,-419,-419,-419,-419,-419,0,-419,-419,0,-419,-419,0,0,0,0,0,-419,0,0,0,0,0,0,0,0,0,-419,0,0,0,0,0,0,0,0,-419,0,
// State 293
-418,0,0,-418,0,0,-418,-418,-418,-418,-418,0,0,0,0,-418,-418,0,0,-418,-418,-418,-418,-418,-418,-418,-418,0,-418,-418,0,-418,-418,0,0,0,0,0,-418,0,0,0,0,0,0,0,0,0,-418,0,0,0,0,0,0,0,0,-418,0,
// State 294
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 295
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-454,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 296
-421,0,0,-421,0,0,-421,-421,-421,-421,-421,0,0,0,0,-421,-421,0,0,-421,-421,-421,-421,-421,-421,-421,-421,0,-421,-421,0,-421,-421,0,0,0,0,0,-421,0,0,0,0,0,0,0,0,0,-421,0,0,0,0,0,0,0,0,-421,0,
// State 297
-431,0,0,-431,0,0,-431,-431,-431,-431,-431,0,0,0,0,-431,-431,0,0,-431,-431,-431,-431,-431,-431,-431,-431,0,-431,-431,0,-431,-431,0,0,0,0,0,-431,0,0,0,0,0,0,0,0,0,-431,0,0,0,0,0,0,0,0,-431,0,
// State 298
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,324,0,
// State 299
0,0,0,0,0,0,-391,-391,0,-391,-391,0,0,-391,326,-391,-391,-391,0,0,0,0,0,-391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-391,-391,0,
// State 300
0,0,0,0,0,0,34,-408,0,0,-408,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,-408,0,
// State 301
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 302
0,0,0,0,0,0,0,-393,0,0,-393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-393,0,
// State 303
0,0,0,0,0,0,0,-409,0,0,-409,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-409,0,
// State 304
0,0,0,0,0,0,0,-404,0,0,-404,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-404,0,
// State 305
0,0,0,0,0,0,0,-407,0,0,-407,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-407,0,
// State 306
0,0,0,0,0,0,-361,-361,0,-361,-361,0,0,-361,-361,-361,-361,-361,0,0,0,0,0,-361,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-361,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-361,-361,0,
// State 307
0,0,0,0,0,0,-362,-362,0,-362,-362,0,0,-362,-362,-362,-362,-362,0,0,0,0,0,-362,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-362,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-362,-362,0,
// State 308
0,0,0,0,0,0,0,-430,0,0,-430,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-430,0,
// State 309
0,0,0,0,0,0,0,-403,0,0,-403,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-403,0,
// State 310
0,0,0,0,0,0,0,-489,0,-489,-489,0,0,-489,0,-489,38,-489,0,0,0,0,0,-489,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-489,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-489,0,0,
// State 311
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 312
-128,0,0,-128,0,0,-128,0,0,0,0,0,0,0,0,0,-128,0,0,0,0,0,0,0,0,-128,-128,0,-128,-128,0,-128,-128,0,0,0,0,0,-128,0,0,0,0,0,0,0,0,-128,0,0,0,0,-128,0,0,0,0,0,0,
// State 313
0,0,0,-429,-429,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-429,0,0,0,0,0,0,-429,0,0,0,0,
// State 314
0,0,0,-506,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-506,0,0,0,0,0,0,-506,0,0,0,0,
// State 315
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 316
0,0,0,-502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-502,-502,0,-502,0,0,0,0,0,0,0,0,0,0,0,0,0,-502,0,-502,0,0,-502,0,-502,0,-502,0,0,0,0,
// State 317
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-358,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 318
0,0,0,0,0,0,0,0,0,0,371,0,0,0,0,-149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 319
0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 320
0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 321
0,0,0,-363,0,-363,-363,0,0,-363,-363,0,0,-363,-363,-363,0,0,0,0,0,0,0,-363,0,0,0,0,0,-363,0,-363,0,0,0,0,0,0,0,-363,0,0,-363,0,0,0,0,0,0,0,0,-363,0,0,0,0,0,0,0,
// State 322
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 323
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 324
0,0,0,0,0,0,-392,-392,0,-392,-392,0,0,-392,372,-392,-392,-392,0,0,0,0,0,-392,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-392,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-392,-392,0,
// State 325
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-48,0,-48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 326
0,0,0,0,0,0,0,379,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 327
0,0,0,0,0,0,0,-161,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 328
0,0,0,0,0,0,-389,-389,0,-389,-389,0,0,-389,326,-389,-389,-389,0,0,0,0,0,-389,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-389,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-389,-389,0,
// State 329
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 330
-448,0,0,-448,0,0,-448,-448,-448,-448,-448,0,0,0,0,-448,-448,0,0,-448,-448,-448,-448,-448,-448,-448,-448,0,-448,-448,0,-448,-448,0,0,0,0,0,-448,0,0,0,0,0,0,0,0,0,-448,0,0,0,0,0,0,0,0,-448,0,
// State 331
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 332
-446,0,0,-446,0,0,-446,-446,-446,-446,-446,0,0,0,0,-446,-446,0,0,-446,-446,-446,-446,-446,-446,-446,-446,0,-446,-446,0,-446,-446,0,0,0,0,0,-446,0,0,0,0,0,0,0,0,0,-446,0,0,0,0,0,0,0,0,-446,0,
// State 333
0,0,0,387,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 334
-440,0,0,-440,0,0,-440,-440,-440,-440,-440,0,0,0,0,-440,-440,0,0,-440,-440,-440,-440,-440,-440,-440,-440,0,-440,-440,0,-440,-440,0,0,0,0,0,-440,0,0,0,0,0,0,0,0,0,-440,0,0,0,0,0,0,0,0,-440,0,
// State 335
-442,0,0,-442,0,0,-442,-442,-442,-442,-442,0,0,0,0,-442,-442,0,0,-442,-442,-442,-442,-442,-442,-442,-442,0,-442,-442,0,-442,-442,0,0,0,0,0,-442,0,0,0,0,0,0,0,0,0,-442,0,0,0,0,0,0,0,0,-442,0,
// State 336
-452,0,0,-452,0,0,-452,-452,-452,-452,-452,0,0,0,0,-452,-452,0,0,-452,-452,-452,-452,-452,-452,-452,-452,0,-452,-452,0,-452,-452,0,0,0,0,0,-452,0,0,0,0,0,0,0,0,0,-452,0,0,0,0,0,0,0,0,-452,0,
// State 337
-450,0,0,-450,0,0,-450,-450,-450,-450,-450,0,0,0,0,-450,-450,0,0,-450,-450,-450,-450,-450,-450,-450,-450,0,-450,-450,0,-450,-450,0,0,0,0,0,-450,0,0,0,0,0,0,0,0,0,-450,0,0,0,0,0,0,0,0,-450,0,
// State 338
-451,0,0,-451,0,0,-451,-451,-451,-451,-451,0,0,0,0,-451,-451,0,0,-451,-451,-451,-451,-451,-451,-451,-451,0,-451,-451,0,-451,-451,0,0,0,0,0,-451,0,0,0,0,0,0,0,0,0,-451,0,0,0,0,0,0,0,0,-451,0,
// State 339
-194,0,0,-194,0,0,-194,-194,-194,-194,-194,0,0,0,0,-194,-194,0,0,-194,-194,-194,-194,-194,-194,-194,-194,0,-194,-194,0,-194,-194,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,-194,0,
// State 340
-447,0,0,-447,0,0,-447,-447,-447,-447,-447,0,0,0,0,-447,-447,0,0,-447,-447,-447,-447,-447,-447,-447,-447,0,-447,-447,0,-447,-447,0,0,0,0,0,-447,0,0,0,0,0,0,0,0,0,-447,0,0,0,0,0,0,0,0,-447,0,
// State 341
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-366,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 342
0,0,0,0,0,0,0,-487,0,-487,-487,0,0,-487,0,-487,0,-487,0,0,0,0,0,-487,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-487,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-487,0,0,
// State 343
0,0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 344
0,0,0,0,0,0,0,-177,0,0,401,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 345
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,402,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 346
0,0,0,0,0,0,78,-491,0,-491,-491,0,0,-491,0,-491,79,-491,0,0,0,0,0,-491,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-491,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-491,0,0,
// State 347
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 348
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 349
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 350
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 351
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 352
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 353
0,0,0,0,0,0,0,416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 354
0,0,0,0,0,0,0,-145,0,0,417,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 355
0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 356
0,0,0,-338,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-338,-338,0,-338,0,0,0,0,0,0,0,0,0,0,0,0,0,-338,0,0,0,0,-338,0,-338,0,-338,0,0,0,0,
// State 357
0,0,0,-342,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-342,-342,0,-342,0,0,0,0,0,0,0,0,0,0,0,0,0,-342,0,0,0,0,-342,0,-342,0,-342,0,0,0,0,
// State 358
0,0,0,-337,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-337,-337,0,-337,0,0,0,0,0,0,0,0,0,0,0,0,0,-337,0,0,0,0,-337,0,-337,0,-337,0,0,0,0,
// State 359
0,0,0,-376,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-376,-376,0,-376,0,0,0,0,0,0,0,0,0,0,0,419,0,-376,0,0,0,0,-376,0,-376,0,-376,0,0,0,0,
// State 360
0,0,0,-339,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-339,-339,0,-339,0,0,0,0,0,0,0,0,0,0,0,0,0,-339,0,0,0,0,-339,0,-339,0,-339,0,0,0,0,
// State 361
0,0,0,-336,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-336,-336,0,-336,0,0,0,0,0,0,0,0,0,0,0,0,0,-336,0,0,0,0,-336,0,-336,0,-336,0,0,0,0,
// State 362
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,
// State 363
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,
// State 364
0,0,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-509,-509,0,-509,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 365
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,426,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 366
0,0,0,0,0,0,0,0,0,0,-478,0,0,0,0,0,0,0,0,0,0,0,0,-478,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 367
0,0,0,0,0,0,0,0,0,0,-477,0,0,0,0,0,0,0,0,0,0,0,0,-477,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 368
0,0,0,0,0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0,-173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 369
0,0,0,0,0,0,0,0,0,0,428,0,0,0,0,-151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 370
0,0,0,-43,0,-43,-43,0,0,0,0,0,0,0,-43,-43,0,0,0,0,0,0,0,0,0,0,0,0,0,-43,-43,-43,0,0,0,0,0,0,0,-43,0,0,-43,0,0,0,-43,0,0,0,0,0,0,0,0,0,0,0,0,
// State 371
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-49,0,-49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 372
0,0,0,0,0,0,0,438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 373
0,0,0,0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,
// State 374
0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 375
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,444,0,
// State 376
0,0,0,0,0,0,0,-398,0,0,-398,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-398,0,
// State 377
0,0,0,0,0,0,0,-163,0,0,445,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 378
0,0,0,0,0,0,0,-406,0,0,-406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-406,0,
// State 379
0,0,0,0,0,0,-68,-68,0,0,0,0,-68,0,-68,0,-68,0,0,0,0,0,0,0,0,0,0,-68,0,-68,0,-68,0,0,0,0,0,0,-68,0,0,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 380
0,0,0,0,0,0,-390,-390,0,-390,-390,0,0,-390,372,-390,-390,-390,0,0,0,0,0,-390,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-390,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-390,-390,0,
// State 381
0,0,0,0,0,0,0,-405,0,0,-405,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-405,0,
// State 382
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,447,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 383
0,0,0,0,0,0,0,0,0,0,-499,0,0,0,0,0,0,0,0,0,0,0,0,-499,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 384
0,0,0,0,0,0,0,0,0,0,-498,0,0,0,0,0,0,0,0,0,0,0,0,-498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 385
0,0,0,0,0,0,0,0,0,0,448,0,0,0,0,0,0,0,0,0,0,0,0,-181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 386
0,0,0,0,0,0,0,-483,0,-483,-483,0,0,-483,0,-483,0,-483,0,0,0,0,0,-483,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-483,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-483,0,0,
// State 387
-441,0,0,-441,0,0,-441,-441,-441,-441,-441,0,0,0,0,-441,-441,0,0,-441,-441,-441,-441,-441,-441,-441,-441,0,-441,-441,0,-441,-441,0,0,0,0,0,-441,0,0,0,0,0,0,0,0,0,-441,0,0,0,0,0,0,0,0,-441,0,
// State 388
-423,0,0,-423,0,0,-423,-423,-423,-423,-423,0,0,0,0,-423,-423,0,0,-423,-423,-423,-423,-423,-423,-423,-423,0,-423,-423,0,-423,-423,0,0,0,0,0,-423,0,0,0,0,0,0,0,0,0,-423,0,0,0,0,0,0,0,0,-423,0,
// State 389
-422,0,0,-422,0,0,-422,-422,-422,-422,-422,0,0,0,0,-422,-422,0,0,-422,-422,-422,-422,-422,-422,-422,-422,0,-422,-422,0,-422,-422,0,0,0,0,0,-422,0,0,0,0,0,0,0,0,0,-422,0,0,0,0,0,0,0,0,-422,0,
// State 390
-424,0,0,-424,0,0,-424,-424,-424,-424,-424,0,0,0,0,-424,-424,0,0,-424,-424,-424,-424,-424,-424,-424,-424,0,-424,-424,0,-424,-424,0,0,0,0,0,-424,0,0,0,0,0,0,0,0,0,-424,0,0,0,0,0,0,0,0,-424,0,
// State 391
0,0,0,0,0,0,0,451,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 392
-438,0,0,0,0,0,-438,-438,0,0,-438,0,0,0,0,-438,-438,0,0,-438,-438,-438,-438,0,0,-438,-438,0,-438,-438,0,-438,-438,0,0,0,0,0,-438,0,0,0,0,0,0,0,0,0,-438,0,0,0,0,0,0,0,0,-438,0,
// State 393
0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 394
0,0,0,0,0,0,0,0,-447,-447,0,0,0,-361,0,0,0,0,0,0,0,0,0,-447,-447,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 395
0,0,0,0,0,0,0,0,0,0,0,0,0,-362,0,0,-366,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 396
0,0,0,0,0,0,0,-486,0,-486,-486,0,0,-486,0,-486,0,-486,0,0,0,0,0,-486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-486,0,0,
// State 397
0,0,0,0,0,0,0,-485,0,-485,-485,0,0,-485,0,-485,0,-485,0,0,0,0,0,-485,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-485,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-485,0,0,
// State 398
0,0,0,0,0,0,0,-179,0,0,456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 399
0,0,0,0,0,0,0,-481,0,-481,-481,0,0,-481,0,-481,0,-481,0,0,0,0,0,-481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-481,0,0,
// State 400
0,0,0,-93,0,-93,-93,-93,0,0,0,0,0,0,-93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-93,0,-93,0,0,0,0,0,0,0,-93,0,0,-93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 401
0,0,0,0,0,0,0,-482,0,-482,-482,0,0,-482,0,-482,0,-482,0,0,0,0,0,-482,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-482,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-482,0,0,
// State 402
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 403
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 404
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 405
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 406
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 407
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 408
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 409
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 410
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 411
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,470,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 412
-124,0,0,-124,0,0,-124,0,0,0,0,0,0,0,0,0,-124,0,0,0,0,0,0,0,0,-124,-124,0,-124,-124,0,-124,-124,0,0,0,0,0,-124,0,0,0,0,0,0,0,0,-124,0,0,0,0,-124,0,0,0,0,0,0,
// State 413
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 414
0,0,0,0,0,0,0,-147,0,0,472,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 415
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-347,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-347,0,0,0,
// State 416
0,0,0,0,0,0,0,-38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-38,0,-38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 417
0,0,0,-343,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-343,-343,0,-343,0,0,0,0,0,0,0,0,0,0,0,0,0,-343,0,0,0,0,-343,0,-343,0,-343,0,0,0,0,
// State 418
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,0,0,
// State 419
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 420
0,0,0,0,0,0,0,0,0,0,0,0,0,165,0,0,0,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 421
0,0,0,0,0,0,0,0,0,0,0,0,0,-384,0,0,0,-384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 422
0,0,0,0,0,0,0,0,0,0,0,0,0,-385,0,0,0,-385,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 423
0,-386,-386,0,0,0,0,0,0,0,-386,0,0,-386,0,0,0,-386,-386,0,0,0,0,-386,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-386,
// State 424
0,0,0,0,0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0,-175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 425
0,0,0,0,0,0,-350,0,0,0,0,0,0,0,0,-350,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-350,0,0,0,
// State 426
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 427
0,0,0,-44,0,-44,-44,0,0,0,0,0,0,0,-44,-44,0,0,0,0,0,0,0,0,0,0,0,0,0,-44,-44,-44,0,0,0,0,0,0,0,-44,0,0,-44,0,0,0,-44,0,0,0,0,0,0,0,0,0,0,0,0,
// State 428
0,0,0,0,0,0,0,0,0,486,-410,0,0,0,0,-410,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 429
0,0,0,0,0,0,0,0,0,0,-353,0,0,0,0,-353,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 430
0,0,0,0,0,0,0,0,0,-460,-460,0,0,0,0,-460,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 431
0,0,0,0,0,0,173,0,0,-468,-468,0,0,0,0,-468,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 432
0,0,0,0,0,0,0,0,0,0,-476,0,0,0,0,-476,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 433
0,0,0,0,0,0,0,0,0,488,-414,0,0,0,0,-414,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 434
0,0,0,0,0,0,0,0,0,0,-355,0,0,0,0,-355,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 435
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 436
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 437
0,0,0,0,0,0,0,-396,0,0,-396,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-396,0,
// State 438
0,0,0,0,0,0,0,0,0,0,489,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,490,0,
// State 439
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,
// State 440
0,0,0,0,0,0,0,-400,0,0,-400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-400,0,
// State 441
0,0,0,0,0,0,0,0,0,0,0,0,-33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-33,0,-33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-33,0,
// State 442
0,0,0,0,0,0,0,-397,0,0,-397,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-397,0,
// State 443
0,0,0,0,0,0,0,-401,0,0,-401,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-401,0,
// State 444
0,0,0,0,0,0,-69,-69,0,0,0,0,-69,0,-69,0,-69,0,0,0,0,0,0,0,0,0,0,-69,0,-69,0,-69,0,0,0,0,0,0,-69,0,0,-69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 445
0,0,0,0,0,0,0,0,0,0,493,0,0,0,0,0,0,0,0,0,0,0,0,-183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 446
0,0,0,0,0,0,0,-488,0,-488,-488,0,0,-488,0,-488,0,-488,0,0,0,0,0,-488,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-488,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-488,0,0,
// State 447
0,0,0,-98,0,-98,-98,0,0,0,0,0,0,0,-98,0,0,0,0,0,0,0,0,-98,0,0,0,0,0,-98,-98,-98,0,0,0,0,0,0,0,-98,0,0,-98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 448
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 449
0,0,0,0,0,0,0,0,0,0,496,0,0,0,0,0,0,0,0,0,0,0,0,-165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 450
-449,0,0,-449,0,0,-449,-449,-449,-449,-449,0,0,0,0,-449,-449,0,0,-449,-449,-449,-449,-449,-449,-449,-449,0,-449,-449,0,-449,-449,0,0,0,0,0,-449,0,0,0,0,0,0,0,0,0,-449,0,0,0,0,0,0,0,0,-449,0,
// State 451
-439,0,0,0,0,0,-439,-439,0,0,-439,0,0,0,0,-439,-439,0,0,-439,-439,-439,-439,0,0,-439,-439,0,-439,-439,0,-439,-439,0,0,0,0,0,-439,0,0,0,0,0,0,0,0,0,-439,0,0,0,0,0,0,0,0,-439,0,
// State 452
-434,0,0,-434,0,0,-434,-434,0,0,-434,0,0,0,0,-434,-434,0,0,-434,-434,-434,-434,-434,0,-434,-434,0,-434,-434,0,-434,-434,0,0,0,0,0,-434,0,0,0,0,0,0,0,0,0,-434,0,0,0,0,0,0,0,0,-434,0,
// State 453
0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 454
0,0,0,0,0,0,0,-484,0,-484,-484,0,0,-484,0,-484,0,-484,0,0,0,0,0,-484,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-484,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-484,0,0,
// State 455
0,0,0,-94,0,-94,-94,-94,0,0,0,0,0,0,-94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-94,0,-94,0,0,0,0,0,0,0,-94,0,0,-94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 456
0,0,0,0,0,0,0,497,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 457
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 458
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 459
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 460
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 461
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 462
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 463
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 464
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 465
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 466
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 467
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 468
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 469
-123,0,0,-123,0,0,-123,0,0,0,0,0,0,0,0,0,-123,0,0,0,0,0,0,0,0,-123,-123,0,-123,-123,0,-123,-123,0,0,0,0,0,-123,0,0,0,0,0,0,0,0,-123,0,0,0,0,-123,0,0,0,0,0,0,
// State 470
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,504,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 471
0,0,0,0,0,0,0,-39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-39,0,-39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 472
0,0,0,0,0,0,0,-344,0,0,-344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 473
0,0,0,0,0,0,0,0,0,0,0,0,0,216,0,0,0,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 474
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-135,0,0,0,0,0,0,0,0,-135,0,0,0,-135,0,
// State 475
0,0,0,-201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-201,-201,0,-201,0,0,0,0,0,0,0,0,0,0,0,0,0,-201,0,0,0,0,-201,0,-201,0,-201,0,0,0,0,
// State 476
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-367,0,
// State 477
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,522,0,
// State 478
0,0,0,0,0,0,0,0,0,0,523,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-153,0,
// State 479
0,0,0,0,0,0,0,0,0,0,-369,0,0,0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-369,0,
// State 480
0,0,0,0,0,0,0,0,0,0,-375,0,0,0,0,0,0,0,0,-375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-375,0,
// State 481
0,0,0,0,0,0,0,0,0,0,-368,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-368,0,
// State 482
0,0,0,0,0,0,0,525,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 483
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-89,0,0,0,0,0,-89,-89,-89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 484
0,0,0,0,0,0,0,0,0,527,-412,0,0,0,0,-412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 485
0,0,0,0,0,0,0,0,0,0,-53,0,0,0,0,-53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 486
0,0,0,0,0,0,0,0,0,528,-416,0,0,0,0,-416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 487
0,0,0,0,0,0,0,0,0,0,-78,0,0,0,-78,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,-78,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,0,0,0,0,0,0,0,0,0,0,0,0,
// State 488
0,0,0,0,0,0,0,0,0,0,0,0,-34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-34,0,-34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-34,0,
// State 489
0,0,0,0,0,0,0,-399,0,0,-399,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-399,0,
// State 490
0,0,0,0,0,0,0,-402,0,0,-402,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-402,0,
// State 491
0,0,0,0,0,0,0,0,0,0,-203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-203,0,
// State 492
0,0,0,-99,0,-99,-99,0,0,0,0,0,0,0,-99,0,0,0,0,0,0,0,0,-99,0,0,0,0,0,-99,-99,-99,0,0,0,0,0,0,0,-99,0,0,-99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 493
0,0,0,0,0,0,0,0,0,0,537,0,0,0,0,0,0,0,0,0,0,0,0,-167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 494
-445,0,0,-445,0,0,-445,-445,-445,-445,-445,0,0,0,0,-445,-445,0,0,-445,-445,-445,-445,-445,-445,-445,-445,0,-445,-445,0,-445,-445,0,0,0,0,0,-445,0,0,0,0,0,0,0,0,0,-445,0,0,0,0,0,0,0,0,-445,0,
// State 495
-73,0,0,0,0,0,-73,0,0,0,0,0,0,0,0,0,-73,0,0,0,0,0,0,-73,0,-73,-73,0,-73,-73,0,-73,-73,0,0,0,0,0,-73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 496
0,0,0,0,0,0,0,-495,0,-495,-495,227,0,-495,0,-495,0,-495,0,0,0,0,0,-495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-495,0,0,
// State 497
0,0,0,0,0,0,0,-490,0,-490,-490,0,0,-490,0,-490,0,-490,0,0,0,0,0,-490,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-490,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-490,0,0,
// State 498
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 499
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 500
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 501
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 502
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 503
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 504
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,544,0,
// State 505
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 506
0,0,0,0,0,0,0,0,0,0,547,0,0,0,0,0,0,0,0,0,0,0,0,-157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 507
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 508
0,0,0,0,0,0,0,0,0,0,-117,0,0,0,0,-117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-117,0,
// State 509
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 510
0,0,0,-381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-381,-381,0,-381,0,0,0,0,0,0,0,0,0,0,0,0,0,-381,0,0,0,0,-381,0,-381,0,-381,0,0,0,0,
// State 511
0,0,0,0,0,0,0,0,0,0,-104,0,0,0,0,-104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-104,0,
// State 512
0,0,0,0,0,0,0,0,0,0,-105,0,0,0,0,-105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-105,0,
// State 513
0,0,0,0,0,0,0,0,0,0,-102,0,0,0,0,-102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-102,0,
// State 514
0,0,0,0,0,0,0,0,0,0,-103,0,0,0,0,-103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-103,0,
// State 515
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-136,0,0,0,0,0,0,0,0,-136,0,0,0,-136,0,
// State 516
0,0,0,-202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-202,-202,0,-202,0,0,0,0,0,0,0,0,0,0,0,0,0,-202,0,0,0,0,-202,0,-202,0,-202,0,0,0,0,
// State 517
0,0,0,-197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-197,-197,0,-197,0,0,0,0,0,0,0,0,0,0,0,0,0,-197,0,0,0,0,-197,0,-197,0,-197,0,0,0,0,
// State 518
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,
// State 519
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,257,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 520
0,0,0,0,0,0,0,0,0,0,554,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-155,0,
// State 521
0,0,0,-378,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-378,-378,0,-378,0,0,0,0,0,0,0,0,0,0,0,-378,0,-378,0,0,0,0,-378,0,-378,0,-378,0,0,0,0,
// State 522
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-58,0,0,0,0,0,-58,0,0,-58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-58,0,
// State 523
0,0,0,0,0,0,0,0,0,0,-370,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-370,0,
// State 524
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-507,-507,0,-507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 525
0,0,0,0,0,0,0,555,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 526
0,0,0,0,0,0,0,0,0,0,-54,0,0,0,0,-54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 527
0,0,0,0,0,0,0,0,0,0,-79,0,0,0,-79,-79,0,0,0,0,0,0,0,0,0,0,0,0,0,-79,-79,-79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-79,0,0,0,0,0,0,0,0,0,0,0,0,
// State 528
0,0,0,0,0,0,0,556,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 529
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,558,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 530
0,0,0,0,0,0,0,0,0,0,-391,0,0,0,326,0,-391,258,0,0,0,0,0,-391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 531
0,0,0,0,0,0,0,0,0,0,-471,0,0,0,0,0,0,0,0,0,0,0,0,-471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 532
0,0,0,0,0,0,0,0,0,0,559,0,0,0,0,0,0,0,0,0,0,0,0,-169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 533
0,0,0,0,0,0,0,0,0,0,-472,0,0,0,0,0,0,0,0,0,0,0,0,-472,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 534
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 535
0,0,0,0,0,0,0,0,0,0,0,0,0,260,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 536
-74,0,0,0,0,0,-74,0,0,0,0,0,0,0,0,0,-74,0,0,0,0,0,0,-74,0,-74,-74,0,-74,-74,0,-74,-74,0,0,0,0,0,-74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 537
-433,0,0,-433,0,0,-433,-433,0,0,-433,0,0,0,0,-433,-433,0,0,-433,-433,-433,-433,-433,0,-433,-433,0,-433,-433,0,-433,-433,0,0,0,0,0,-433,0,0,0,0,0,0,0,0,0,-433,0,0,0,0,0,0,0,0,-433,0,
// State 538
0,0,0,0,0,0,261,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 539
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,264,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 540
0,0,0,0,0,0,0,562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 541
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,269,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 542
0,0,0,-382,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-382,-382,0,-382,0,0,0,0,0,0,0,0,0,0,0,0,0,-382,0,0,0,0,-382,0,-382,0,-382,0,0,0,0,
// State 543
0,0,0,-377,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-377,-377,0,-377,0,0,0,0,0,0,0,0,0,0,0,-377,0,-377,0,0,0,0,-377,0,-377,0,-377,0,0,0,0,
// State 544
0,0,0,0,0,0,0,0,0,0,563,0,0,0,0,0,0,0,0,0,0,0,0,-159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 545
0,0,0,0,0,0,0,0,0,0,0,0,0,-383,0,0,0,-383,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 546
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-63,0,0,0,0,0,-63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 547
0,0,0,-120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-120,-120,0,-120,0,0,0,0,0,0,0,0,0,0,0,0,0,-120,0,0,0,0,-120,0,-120,0,-120,0,0,0,0,
// State 548
0,0,0,0,0,0,0,0,0,0,-112,0,0,0,0,-112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-112,0,
// State 549
0,0,0,0,0,0,0,0,0,0,572,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-137,0,
// State 550
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,573,0,
// State 551
0,0,0,-199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-199,-199,0,-199,0,0,0,0,0,0,0,0,0,0,0,0,0,-199,0,0,0,0,-199,0,-199,0,-199,0,0,0,0,
// State 552
0,0,0,-198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-198,-198,0,-198,0,0,0,0,0,0,0,0,0,0,0,0,0,-198,0,0,0,0,-198,0,-198,0,-198,0,0,0,0,
// State 553
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-59,0,0,0,0,0,-59,0,0,-59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-59,0,
// State 554
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-508,-508,0,-508,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 555
0,0,0,0,0,0,0,0,0,-464,-464,274,0,0,0,-464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 556
0,0,0,0,0,0,0,0,0,0,579,0,0,0,0,0,0,0,0,0,0,0,0,-171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 557
0,0,0,0,0,0,0,0,0,-466,-466,0,0,0,0,-466,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 558
0,0,0,-83,0,-83,-83,0,0,0,0,0,0,0,-83,0,0,0,0,0,0,0,0,-83,0,0,0,0,0,-83,-83,-83,0,0,0,0,0,0,0,-83,0,0,-83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 559
-432,0,0,-432,0,0,-432,-432,0,0,-432,0,0,0,0,-432,-432,0,0,-432,-432,-432,-432,-432,0,-432,-432,0,-432,-432,0,-432,-432,0,0,0,0,0,-432,0,0,0,0,0,0,0,0,0,-432,0,0,0,0,0,0,0,0,-432,0,
// State 560
0,0,0,0,0,0,0,-493,0,-493,-493,0,0,-493,0,-493,0,-493,0,0,0,0,0,-493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-493,0,0,
// State 561
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 562
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-64,0,0,0,0,0,-64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 563
0,0,0,-379,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-379,-379,0,-379,0,0,0,0,0,0,0,0,0,0,0,0,0,-379,0,0,0,0,-379,0,-379,0,-379,0,0,0,0,
// State 564
0,0,0,0,0,0,0,0,0,0,-113,0,0,0,0,-113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-113,0,
// State 565
0,0,0,0,0,0,0,0,0,0,-116,0,0,0,0,-116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-116,0,
// State 566
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 567
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 568
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 569
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 570
0,0,0,0,0,0,0,0,0,0,587,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-139,0,
// State 571
-23,0,0,-23,0,0,-23,0,0,0,0,0,0,0,0,0,-23,0,0,-23,-23,-23,-23,0,0,-23,-23,0,-23,-23,0,-23,-23,0,0,0,0,0,-23,0,0,0,0,0,0,0,0,0,-23,0,0,0,0,0,0,0,0,-23,0,
// State 572
0,0,0,-122,0,0,0,0,0,0,0,0,0,0,0,588,0,0,0,0,0,0,0,0,0,0,0,0,-122,-122,0,-122,0,0,0,0,0,0,0,0,0,0,0,0,0,-122,0,0,0,0,-122,0,-122,0,-122,0,0,0,0,
// State 573
0,0,0,-200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-200,-200,0,-200,0,0,0,0,0,0,0,0,0,0,0,0,0,-200,0,0,0,0,-200,0,-200,0,-200,0,0,0,0,
// State 574
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,590,0,
// State 575
0,0,0,0,0,0,0,0,0,0,591,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-141,0,
// State 576
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,592,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 577
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,593,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 578
0,0,0,-84,0,-84,-84,0,0,0,0,0,0,0,-84,0,0,0,0,0,0,0,0,-84,0,0,0,0,0,-84,-84,-84,0,0,0,0,0,0,0,-84,0,0,-84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 579
0,0,0,0,0,0,0,0,0,0,-473,0,0,0,0,0,0,0,0,0,0,0,0,-473,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 580
0,0,0,0,0,0,277,0,0,-467,-467,0,0,0,0,-467,278,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 581
0,0,0,0,0,0,0,0,0,0,-354,0,0,0,0,-354,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 582
0,0,0,0,0,0,0,595,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 583
0,0,0,-380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-380,-380,0,-380,0,0,0,0,0,0,0,0,0,0,0,0,0,-380,0,0,0,0,-380,0,-380,0,-380,0,0,0,0,
// State 584
0,0,0,0,0,0,0,0,0,0,-108,0,0,0,0,-108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-108,0,
// State 585
0,0,0,0,0,0,0,0,0,0,-185,0,0,0,0,-185,0,0,0,-185,-185,-185,-185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-185,0,
// State 586
-24,0,0,-24,0,0,-24,0,0,0,0,0,0,0,0,0,-24,0,0,-24,-24,-24,-24,0,0,-24,-24,0,-24,-24,0,-24,-24,0,0,0,0,0,-24,0,0,0,0,0,0,0,0,0,-24,0,0,0,0,0,0,0,0,-24,0,
// State 587
0,0,0,-121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-121,-121,0,-121,0,0,0,0,0,0,0,0,0,0,0,0,0,-121,0,0,0,0,-121,0,-121,0,-121,0,0,0,0,
// State 588
0,0,0,0,0,0,0,0,0,0,597,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-143,0,
// State 589
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-193,0,0,0,-193,0,
// State 590
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-28,0,0,-28,0,0,0,0,0,-28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-28,0,
// State 591
0,0,0,0,0,0,0,0,0,0,-190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-190,0,
// State 592
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-132,0,0,0,0,0,0,0,0,-132,0,0,0,-132,0,
// State 593
0,0,0,0,0,0,0,0,0,-462,-462,0,0,0,0,-462,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 594
0,0,0,0,0,0,0,-494,0,-494,-494,279,0,-494,0,-494,0,-494,0,0,0,0,0,-494,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-494,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-494,0,0,
// State 595
0,0,0,0,0,0,0,0,0,0,-109,0,0,0,0,-109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-109,0,
// State 596
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,-29,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,
// State 597
0,0,0,0,0,0,0,600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 598
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,601,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 599
0,0,0,0,0,0,0,0,0,-463,-463,280,0,0,0,-463,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 600
0,0,0,0,0,0,0,0,0,-465,-465,0,0,0,0,-465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 601
0,0,0,0,0,0,0,-492,0,-492,-492,0,0,-492,0,-492,0,-492,0,0,0,0,0,-492,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-492,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-492,0,0,
// State 602
0,0,0,0,0,0,0,0,0,-461,-461,0,0,0,0,-461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
];
fn ___action(state: i16, integer: usize) -> i16 {
___ACTION[(state as usize) * 59 + integer]
}
const ___EOF_ACTION: &[i16] = &[
// State 0
0,
// State 1
0,
// State 2
0,
// State 3
0,
// State 4
0,
// State 5
0,
// State 6
0,
// State 7
0,
// State 8
0,
// State 9
0,
// State 10
-150,
// State 11
0,
// State 12
0,
// State 13
0,
// State 14
0,
// State 15
0,
// State 16
0,
// State 17
0,
// State 18
0,
// State 19
0,
// State 20
0,
// State 21
0,
// State 22
0,
// State 23
0,
// State 24
0,
// State 25
0,
// State 26
0,
// State 27
0,
// State 28
0,
// State 29
0,
// State 30
-236,
// State 31
0,
// State 32
-152,
// State 33
0,
// State 34
0,
// State 35
0,
// State 36
0,
// State 37
0,
// State 38
0,
// State 39
0,
// State 40
0,
// State 41
0,
// State 42
0,
// State 43
0,
// State 44
0,
// State 45
0,
// State 46
-300,
// State 47
0,
// State 48
0,
// State 49
0,
// State 50
0,
// State 51
0,
// State 52
-238,
// State 53
0,
// State 54
0,
// State 55
0,
// State 56
-237,
// State 57
0,
// State 58
-220,
// State 59
0,
// State 60
-228,
// State 61
-232,
// State 62
0,
// State 63
0,
// State 64
-268,
// State 65
0,
// State 66
0,
// State 67
-411,
// State 68
-415,
// State 69
0,
// State 70
0,
// State 71
0,
// State 72
0,
// State 73
0,
// State 74
0,
// State 75
0,
// State 76
0,
// State 77
0,
// State 78
0,
// State 79
0,
// State 80
-284,
// State 81
0,
// State 82
-292,
// State 83
-296,
// State 84
-332,
// State 85
0,
// State 86
0,
// State 87
-302,
// State 88
0,
// State 89
0,
// State 90
0,
// State 91
-239,
// State 92
-222,
// State 93
0,
// State 94
-230,
// State 95
-234,
// State 96
-270,
// State 97
0,
// State 98
0,
// State 99
-301,
// State 100
-221,
// State 101
0,
// State 102
-229,
// State 103
-233,
// State 104
-269,
// State 105
0,
// State 106
-216,
// State 107
-252,
// State 108
-212,
// State 109
-224,
// State 110
-260,
// State 111
-264,
// State 112
0,
// State 113
0,
// State 114
0,
// State 115
0,
// State 116
0,
// State 117
-413,
// State 118
-417,
// State 119
0,
// State 120
0,
// State 121
0,
// State 122
-280,
// State 123
-316,
// State 124
-276,
// State 125
-288,
// State 126
-324,
// State 127
-328,
// State 128
-286,
// State 129
0,
// State 130
-294,
// State 131
-298,
// State 132
-334,
// State 133
0,
// State 134
0,
// State 135
-303,
// State 136
-223,
// State 137
0,
// State 138
-231,
// State 139
-235,
// State 140
-271,
// State 141
-218,
// State 142
-254,
// State 143
-214,
// State 144
-226,
// State 145
-262,
// State 146
-266,
// State 147
-285,
// State 148
0,
// State 149
-293,
// State 150
-297,
// State 151
-333,
// State 152
-217,
// State 153
-253,
// State 154
-213,
// State 155
-225,
// State 156
-261,
// State 157
-265,
// State 158
-248,
// State 159
-208,
// State 160
-244,
// State 161
-256,
// State 162
0,
// State 163
0,
// State 164
0,
// State 165
0,
// State 166
0,
// State 167
0,
// State 168
0,
// State 169
0,
// State 170
0,
// State 171
0,
// State 172
0,
// State 173
0,
// State 174
0,
// State 175
0,
// State 176
0,
// State 177
0,
// State 178
0,
// State 179
-312,
// State 180
-272,
// State 181
-308,
// State 182
-320,
// State 183
-282,
// State 184
-318,
// State 185
-278,
// State 186
-290,
// State 187
-326,
// State 188
-330,
// State 189
-287,
// State 190
0,
// State 191
-295,
// State 192
-299,
// State 193
-335,
// State 194
-219,
// State 195
-255,
// State 196
-215,
// State 197
-227,
// State 198
-263,
// State 199
-267,
// State 200
-250,
// State 201
-210,
// State 202
-246,
// State 203
-258,
// State 204
-281,
// State 205
-317,
// State 206
-277,
// State 207
-289,
// State 208
-325,
// State 209
-329,
// State 210
-249,
// State 211
-209,
// State 212
-245,
// State 213
-257,
// State 214
-240,
// State 215
0,
// State 216
0,
// State 217
0,
// State 218
0,
// State 219
0,
// State 220
0,
// State 221
0,
// State 222
0,
// State 223
0,
// State 224
0,
// State 225
0,
// State 226
0,
// State 227
-304,
// State 228
-314,
// State 229
-274,
// State 230
-310,
// State 231
-322,
// State 232
-283,
// State 233
-319,
// State 234
-279,
// State 235
-291,
// State 236
-327,
// State 237
-331,
// State 238
-251,
// State 239
-211,
// State 240
-247,
// State 241
-259,
// State 242
-242,
// State 243
-313,
// State 244
-273,
// State 245
-309,
// State 246
-321,
// State 247
-241,
// State 248
0,
// State 249
0,
// State 250
0,
// State 251
0,
// State 252
0,
// State 253
0,
// State 254
0,
// State 255
0,
// State 256
0,
// State 257
0,
// State 258
0,
// State 259
-415,
// State 260
0,
// State 261
-306,
// State 262
-315,
// State 263
-275,
// State 264
-311,
// State 265
-323,
// State 266
-243,
// State 267
-305,
// State 268
0,
// State 269
0,
// State 270
0,
// State 271
0,
// State 272
0,
// State 273
0,
// State 274
-307,
// State 275
0,
// State 276
0,
// State 277
0,
// State 278
0,
// State 279
0,
// State 280
-511,
// State 281
0,
// State 282
-455,
// State 283
0,
// State 284
0,
// State 285
0,
// State 286
0,
// State 287
0,
// State 288
-459,
// State 289
-457,
// State 290
-420,
// State 291
-453,
// State 292
-419,
// State 293
-418,
// State 294
-373,
// State 295
-454,
// State 296
-421,
// State 297
-431,
// State 298
0,
// State 299
-391,
// State 300
-408,
// State 301
-456,
// State 302
-393,
// State 303
-409,
// State 304
-404,
// State 305
-407,
// State 306
-361,
// State 307
-362,
// State 308
-430,
// State 309
-403,
// State 310
-489,
// State 311
-458,
// State 312
0,
// State 313
0,
// State 314
0,
// State 315
0,
// State 316
-502,
// State 317
-358,
// State 318
-149,
// State 319
0,
// State 320
0,
// State 321
-363,
// State 322
0,
// State 323
-374,
// State 324
-392,
// State 325
0,
// State 326
0,
// State 327
0,
// State 328
-389,
// State 329
0,
// State 330
0,
// State 331
0,
// State 332
0,
// State 333
0,
// State 334
0,
// State 335
0,
// State 336
0,
// State 337
0,
// State 338
0,
// State 339
0,
// State 340
0,
// State 341
0,
// State 342
-487,
// State 343
0,
// State 344
0,
// State 345
0,
// State 346
-491,
// State 347
0,
// State 348
0,
// State 349
0,
// State 350
0,
// State 351
0,
// State 352
0,
// State 353
0,
// State 354
0,
// State 355
0,
// State 356
-338,
// State 357
-342,
// State 358
-337,
// State 359
-376,
// State 360
-339,
// State 361
-336,
// State 362
0,
// State 363
0,
// State 364
0,
// State 365
0,
// State 366
0,
// State 367
0,
// State 368
0,
// State 369
-151,
// State 370
-43,
// State 371
0,
// State 372
0,
// State 373
0,
// State 374
0,
// State 375
0,
// State 376
-398,
// State 377
0,
// State 378
-406,
// State 379
0,
// State 380
-390,
// State 381
-405,
// State 382
0,
// State 383
0,
// State 384
0,
// State 385
0,
// State 386
-483,
// State 387
0,
// State 388
0,
// State 389
0,
// State 390
0,
// State 391
0,
// State 392
0,
// State 393
0,
// State 394
0,
// State 395
0,
// State 396
-486,
// State 397
-485,
// State 398
0,
// State 399
-481,
// State 400
0,
// State 401
-482,
// State 402
0,
// State 403
0,
// State 404
0,
// State 405
0,
// State 406
0,
// State 407
0,
// State 408
0,
// State 409
0,
// State 410
0,
// State 411
0,
// State 412
0,
// State 413
0,
// State 414
0,
// State 415
0,
// State 416
0,
// State 417
-343,
// State 418
0,
// State 419
0,
// State 420
0,
// State 421
0,
// State 422
0,
// State 423
0,
// State 424
0,
// State 425
0,
// State 426
0,
// State 427
-44,
// State 428
-410,
// State 429
-353,
// State 430
-460,
// State 431
-468,
// State 432
-476,
// State 433
-414,
// State 434
-355,
// State 435
0,
// State 436
0,
// State 437
-396,
// State 438
0,
// State 439
0,
// State 440
-400,
// State 441
0,
// State 442
-397,
// State 443
-401,
// State 444
0,
// State 445
0,
// State 446
-488,
// State 447
0,
// State 448
0,
// State 449
0,
// State 450
0,
// State 451
0,
// State 452
0,
// State 453
0,
// State 454
-484,
// State 455
0,
// State 456
0,
// State 457
0,
// State 458
0,
// State 459
0,
// State 460
0,
// State 461
0,
// State 462
0,
// State 463
0,
// State 464
0,
// State 465
0,
// State 466
0,
// State 467
0,
// State 468
0,
// State 469
0,
// State 470
0,
// State 471
0,
// State 472
0,
// State 473
0,
// State 474
0,
// State 475
-201,
// State 476
0,
// State 477
0,
// State 478
0,
// State 479
0,
// State 480
0,
// State 481
0,
// State 482
0,
// State 483
0,
// State 484
-412,
// State 485
-53,
// State 486
-416,
// State 487
-78,
// State 488
0,
// State 489
-399,
// State 490
-402,
// State 491
0,
// State 492
0,
// State 493
0,
// State 494
0,
// State 495
0,
// State 496
-495,
// State 497
-490,
// State 498
0,
// State 499
0,
// State 500
0,
// State 501
0,
// State 502
0,
// State 503
0,
// State 504
0,
// State 505
0,
// State 506
0,
// State 507
0,
// State 508
0,
// State 509
0,
// State 510
-381,
// State 511
0,
// State 512
0,
// State 513
0,
// State 514
0,
// State 515
0,
// State 516
-202,
// State 517
-197,
// State 518
0,
// State 519
0,
// State 520
0,
// State 521
-378,
// State 522
0,
// State 523
0,
// State 524
0,
// State 525
0,
// State 526
-54,
// State 527
-79,
// State 528
0,
// State 529
0,
// State 530
0,
// State 531
0,
// State 532
0,
// State 533
0,
// State 534
0,
// State 535
0,
// State 536
0,
// State 537
0,
// State 538
0,
// State 539
0,
// State 540
0,
// State 541
0,
// State 542
-382,
// State 543
-377,
// State 544
0,
// State 545
0,
// State 546
0,
// State 547
-120,
// State 548
0,
// State 549
0,
// State 550
0,
// State 551
-199,
// State 552
-198,
// State 553
0,
// State 554
0,
// State 555
-464,
// State 556
0,
// State 557
-466,
// State 558
0,
// State 559
0,
// State 560
-493,
// State 561
0,
// State 562
0,
// State 563
-379,
// State 564
0,
// State 565
0,
// State 566
0,
// State 567
0,
// State 568
0,
// State 569
0,
// State 570
0,
// State 571
0,
// State 572
-122,
// State 573
-200,
// State 574
0,
// State 575
0,
// State 576
0,
// State 577
0,
// State 578
0,
// State 579
0,
// State 580
-467,
// State 581
-354,
// State 582
0,
// State 583
-380,
// State 584
0,
// State 585
0,
// State 586
0,
// State 587
-121,
// State 588
0,
// State 589
0,
// State 590
0,
// State 591
0,
// State 592
0,
// State 593
-462,
// State 594
-494,
// State 595
0,
// State 596
0,
// State 597
0,
// State 598
0,
// State 599
-463,
// State 600
-465,
// State 601
-492,
// State 602
-461,
];
fn ___goto(state: i16, nt: usize) -> i16 {
match nt {
14 => 253,
17 => 272,
20 => 70,
23 => 62,
26 => 32,
29 => match state {
13 => 36,
_ => 11,
},
32 => 117,
35 => 170,
38 => 217,
41 => 35,
44 => 120,
47 => 118,
50 => 224,
53 => 66,
56 => 43,
59 => 71,
62 => match state {
219 => 548,
249 => 564,
251 => 565,
270 => 584,
275 => 595,
_ => 508,
},
64 => match state {
221 => 549,
253 => 570,
_ => 509,
},
66 => match state {
216 => 542,
248 => 563,
268 => 583,
_ => 510,
},
67 => match state {
6 | 21 | 24 | 48 | 63 | 218 => 312,
_ => 281,
},
69 => match state {
1 => 6,
7 => 21,
8 => 24,
22 => 48,
165 | 216 | 221 | 248 | 253 | 268 => 218,
_ => 63,
},
70 => 411,
72 => match state {
166 | 223 | 254 => 515,
_ => 474,
},
74 => match state {
167 => 223,
222 => 254,
_ => 166,
},
75 => 550,
76 => 574,
77 => 353,
78 => 317,
79 => 476,
80 => 505,
81 => match state {
33 => 372,
_ => 326,
},
82 => 448,
83 => match state {
277 => 598,
_ => 529,
},
84 => match state {
69 => 436,
79 => 458,
174 => 534,
_ => 365,
},
85 => match state {
77 => 456,
172 => 528,
260 => 582,
276 => 597,
_ => 343,
},
86 => match state {
78 => 457,
_ => 382,
},
87 => match state {
250 => 270,
269 => 275,
_ => 251,
},
88 => 271,
89 => match state {
272 => 588,
_ => 575,
},
91 => match state {
166 => 222,
_ => 167,
},
92 => 330,
93 => 391,
94 => 356,
95 => match state {
70 => 438,
_ => 373,
},
98 => 282,
99 => match state {
64 | 84 | 96 | 104 | 107 | 110..=111 | 123 | 126..=127 | 132 | 140 | 142 | 145..=146 | 151 | 153 | 156..=158 | 160..=161 | 179 | 181..=182 | 184 | 187..=188 | 193 | 195 | 198..=200 | 202..=203 | 205 | 208..=210 | 212..=214 | 227..=228 | 230..=231 | 233 | 236..=238 | 240..=243 | 245..=247 | 261..=262 | 264..=267 | 274 => 417,
_ => 357,
},
101 => match state {
46 => 84,
52 => 96,
56 => 104,
58 => 107,
60 => 110,
61 => 111,
80 => 123,
82 => 126,
83 => 127,
87 => 132,
91 => 140,
92 => 142,
94 => 145,
95 => 146,
99 => 151,
100 => 153,
102 => 156,
103 => 157,
106 => 158,
108 => 160,
109 => 161,
122 => 179,
124 => 181,
125 => 182,
128 => 184,
130 => 187,
131 => 188,
135 => 193,
136 => 195,
138 => 198,
139 => 199,
141 => 200,
143 => 202,
144 => 203,
147 => 205,
149 => 208,
150 => 209,
152 => 210,
154 => 212,
155 => 213,
159 => 214,
180 => 227,
183 => 228,
185 => 230,
186 => 231,
189 => 233,
191 => 236,
192 => 237,
194 => 238,
196 => 240,
197 => 241,
201 => 242,
204 => 243,
206 => 245,
207 => 246,
211 => 247,
229 => 261,
232 => 262,
234 => 264,
235 => 265,
239 => 266,
244 => 267,
263 => 274,
_ => 64,
},
102 => match state {
62 => 414,
_ => 354,
},
104 => match state {
20 => 44,
23 => 50,
25 => 54,
28 => 59,
45 => 81,
47 => 85,
49 => 89,
51 => 93,
53 => 97,
55 => 101,
86 => 129,
88 => 133,
90 => 137,
98 => 148,
134 => 190,
_ => 27,
},
106 => match state {
20 => 45,
23 => 51,
25 => 55,
47 => 86,
49 => 90,
53 => 98,
88 => 134,
_ => 28,
},
108 => match state {
32 => 369,
_ => 318,
},
110 => match state {
9 => 315,
20 => 348,
23 => 349,
25 => 350,
27 => 351,
28 => 352,
44 => 402,
45 => 403,
47 => 404,
49 => 405,
50 => 406,
51 => 407,
53 => 408,
54 => 409,
55 => 410,
59 => 413,
81 => 459,
85 => 460,
86 => 461,
88 => 462,
89 => 463,
90 => 464,
93 => 465,
97 => 466,
98 => 467,
101 => 468,
129 => 498,
133 => 499,
134 => 500,
137 => 501,
148 => 502,
190 => 539,
_ => 288,
},
112 => match state {
26 => 57,
11 => 324,
13 => 328,
29 | 62 => 355,
31 | 66 | 69 | 79 | 174 => 366,
34 | 70 => 374,
36 => 380,
40 => 393,
75 => 453,
105 => 470,
169 => 519,
173 | 224 | 277 => 530,
_ => 299,
},
113 => match state {
16 => 41,
10 | 32 => 319,
37 | 71 | 78 => 383,
67 => 428,
68 | 118 | 259 => 430,
117 => 484,
173 | 224 | 277 => 531,
_ => 367,
},
115 => match state {
65 | 113 => 419,
_ => 331,
},
116 => match state {
162 => 504,
_ => 477,
},
117 => match state {
170 => 520,
_ => 478,
},
119 => 289,
120 => 479,
121 => 358,
122 => 359,
123 => 360,
124 => match state {
113 => 473,
_ => 420,
},
125 => match state {
65 | 113 => 421,
163 => 506,
217 => 544,
_ => 252,
},
127 => match state {
4 | 12 | 33 | 35 | 119 => 300,
19 => 346,
68 | 118 | 259 => 431,
116 => 482,
171 => 525,
178 => 538,
258 => 580,
_ => 310,
},
128 => match state {
4 => 301,
35 => 377,
119 => 491,
_ => 327,
},
130 => 302,
131 => 429,
132 => 432,
133 => match state {
115 | 162 | 170 => 480,
_ => 290,
},
134 => match state {
3 | 255 | 272 => 291,
_ => 332,
},
135 => 292,
136 => 387,
137 => match state {
7 => 313,
_ => 283,
},
139 => 7,
140 => 303,
141 => match state {
271 => 585,
_ => 293,
},
142 => match state {
15 => 333,
72 => 449,
73 | 219 | 249 => 451,
120 => 493,
_ => 392,
},
144 => match state {
39 => 73,
218 => 249,
_ => 219,
},
145 => match state {
40 => 74,
121 => 176,
177 => 225,
_ => 38,
},
146 => 334,
148 => 335,
149 => match state {
3 => 294,
_ => 576,
},
150 => 280,
151 => match state {
118 => 486,
_ => 433,
},
153 => match state {
224 => 556,
_ => 532,
},
155 => match state {
259 => 581,
_ => 434,
},
156 => match state {
66 => 424,
_ => 368,
},
158 => match state {
5 => 311,
10 | 32 => 320,
14 => 329,
16 => 342,
18 => 345,
37 | 71 | 78 => 384,
41 => 396,
42 => 397,
43 => 398,
76 => 454,
112 => 472,
164 => 507,
168 => 518,
173 | 224 | 277 => 533,
175 => 535,
215 => 541,
226 => 560,
256 => 577,
257 => 579,
273 => 593,
278 => 601,
279 => 602,
_ => 344,
},
160 => match state {
71 => 445,
_ => 385,
},
162 => match state {
1 | 7 => 284,
8 | 22 => 314,
_ => 361,
},
164 => match state {
7 => 22,
_ => 8,
},
165 => match state {
63 => 113,
_ => 65,
},
_ => 0,
}
}
fn ___expected_tokens(___state: i16) -> alloc::vec::Vec<alloc::string::String> {
const ___TERMINAL: &[&str] = &[
r###""!""###,
r###""!=""###,
r###""!~""###,
r###""#""###,
r###""#![...]""###,
r###""&""###,
r###""(""###,
r###"")""###,
r###""*""###,
r###""+""###,
r###"",""###,
r###""->""###,
r###""..""###,
r###"":""###,
r###""::""###,
r###"";""###,
r###""<""###,
r###""=""###,
r###""==""###,
r###""=>""###,
r###""=>?""###,
r###""=>@L""###,
r###""=>@R""###,
r###"">""###,
r###""?""###,
r###""@L""###,
r###""@R""###,
r###""CharLiteral""###,
r###""Escape""###,
r###""Id""###,
r###""Lifetime""###,
r###""MacroId""###,
r###""RegexLiteral""###,
r###""StartGrammar""###,
r###""StartGrammarWhereClauses""###,
r###""StartMatchMapping""###,
r###""StartPattern""###,
r###""StartTypeRef""###,
r###""StringLiteral""###,
r###""[""###,
r###""]""###,
r###""_""###,
r###""dyn""###,
r###""else""###,
r###""enum""###,
r###""extern""###,
r###""for""###,
r###""grammar""###,
r###""if""###,
r###""in""###,
r###""match""###,
r###""mut""###,
r###""pub""###,
r###""type""###,
r###""use""###,
r###""where""###,
r###""{""###,
r###""}""###,
r###""~~""###,
];
___TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
let next_state = ___action(___state, index);
if next_state == 0 {
None
} else {
Some(alloc::string::ToString::to_string(terminal))
}
}).collect()
}
pub(crate) struct ___StateMachine<'input>
where 
{
text: &'input str,
___phantom: core::marker::PhantomData<(&'input ())>,
}
impl<'input> ___state_machine::ParserDefinition for ___StateMachine<'input>
where 
{
type Location = usize;
type Error = tok::Error;
type Token = Tok<'input>;
type TokenIndex = usize;
type Symbol = ___Symbol<'input>;
type Success = Top;
type StateIndex = i16;
type Action = i16;
type ReduceIndex = i16;
type NonterminalIndex = usize;

#[inline]
fn start_location(&self) -> Self::Location {
  Default::default()
}

#[inline]
fn start_state(&self) -> Self::StateIndex {
  0
}

#[inline]
fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
___token_to_integer(token, core::marker::PhantomData::<(&())>)
}

#[inline]
fn action(&self, state: i16, integer: usize) -> i16 {
___action(state, integer)
}

#[inline]
fn error_action(&self, state: i16) -> i16 {
___action(state, 59 - 1)
}

#[inline]
fn eof_action(&self, state: i16) -> i16 {
___EOF_ACTION[state as usize]
}

#[inline]
fn goto(&self, state: i16, nt: usize) -> i16 {
___goto(state, nt)
}

fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
___token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
}

fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
___expected_tokens(state)
}

#[inline]
fn uses_error_recovery(&self) -> bool {
false
}

#[inline]
fn error_recovery_symbol(
&self,
recovery: ___state_machine::ErrorRecovery<Self>,
) -> Self::Symbol {
panic!("error recovery not enabled for this grammar")
}

fn reduce(
&mut self,
action: i16,
start_location: Option<&Self::Location>,
states: &mut alloc::vec::Vec<i16>,
symbols: &mut alloc::vec::Vec<___state_machine::SymbolTriple<Self>>,
) -> Option<___state_machine::ParseResult<Self>> {
___reduce(
self.text,
action,
start_location,
states,
symbols,
core::marker::PhantomData::<(&())>,
)
}

fn simulate_reduce(&self, action: i16) -> ___state_machine::SimulatedReduce<Self> {
panic!("error recovery not enabled for this grammar")
}
}
fn ___token_to_integer<
    'input,
>(
___token: &Tok<'input>,
_: core::marker::PhantomData<(&'input ())>,
) -> Option<usize>
{
match *___token {
Tok::Bang if true => Some(0),
Tok::BangEquals if true => Some(1),
Tok::BangTilde if true => Some(2),
Tok::Hash if true => Some(3),
Tok::ShebangAttribute(_) if true => Some(4),
Tok::Ampersand if true => Some(5),
Tok::LeftParen if true => Some(6),
Tok::RightParen if true => Some(7),
Tok::Star if true => Some(8),
Tok::Plus if true => Some(9),
Tok::Comma if true => Some(10),
Tok::MinusGreaterThan if true => Some(11),
Tok::DotDot if true => Some(12),
Tok::Colon if true => Some(13),
Tok::ColonColon if true => Some(14),
Tok::Semi if true => Some(15),
Tok::LessThan if true => Some(16),
Tok::Equals if true => Some(17),
Tok::EqualsEquals if true => Some(18),
Tok::EqualsGreaterThanCode(_) if true => Some(19),
Tok::EqualsGreaterThanQuestionCode(_) if true => Some(20),
Tok::EqualsGreaterThanLookahead if true => Some(21),
Tok::EqualsGreaterThanLookbehind if true => Some(22),
Tok::GreaterThan if true => Some(23),
Tok::Question if true => Some(24),
Tok::Lookahead if true => Some(25),
Tok::Lookbehind if true => Some(26),
Tok::CharLiteral(_) if true => Some(27),
Tok::Escape(_) if true => Some(28),
Tok::Id(_) if true => Some(29),
Tok::Lifetime(_) if true => Some(30),
Tok::MacroId(_) if true => Some(31),
Tok::RegexLiteral(_) if true => Some(32),
Tok::StartGrammar if true => Some(33),
Tok::StartGrammarWhereClauses if true => Some(34),
Tok::StartMatchMapping if true => Some(35),
Tok::StartPattern if true => Some(36),
Tok::StartTypeRef if true => Some(37),
Tok::StringLiteral(_) if true => Some(38),
Tok::LeftBracket if true => Some(39),
Tok::RightBracket if true => Some(40),
Tok::Underscore if true => Some(41),
Tok::Dyn if true => Some(42),
Tok::Else if true => Some(43),
Tok::Enum if true => Some(44),
Tok::Extern if true => Some(45),
Tok::For if true => Some(46),
Tok::Grammar if true => Some(47),
Tok::If if true => Some(48),
Tok::In if true => Some(49),
Tok::Match if true => Some(50),
Tok::Mut if true => Some(51),
Tok::Pub if true => Some(52),
Tok::Type if true => Some(53),
Tok::Use(_) if true => Some(54),
Tok::Where if true => Some(55),
Tok::LeftBrace if true => Some(56),
Tok::RightBrace if true => Some(57),
Tok::TildeTilde if true => Some(58),
_ => None,
}
}
fn ___token_to_symbol<
    'input,
>(
___token_index: usize,
___token: Tok<'input>,
_: core::marker::PhantomData<(&'input ())>,
) -> ___Symbol<'input>
{
match ___token_index {
0 | 1 | 2 | 3 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 21 | 22 | 23 | 24 | 25 | 26 | 33 | 34 | 35 | 36 | 37 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 55 | 56 | 57 | 58 => ___Symbol::Variant0(___token),
4 | 19 | 20 | 27 | 28 | 29 | 30 | 31 | 32 | 38 | 54 => match ___token {
Tok::ShebangAttribute(___tok0) | Tok::EqualsGreaterThanCode(___tok0) | Tok::EqualsGreaterThanQuestionCode(___tok0) | Tok::CharLiteral(___tok0) | Tok::Escape(___tok0) | Tok::Id(___tok0) | Tok::Lifetime(___tok0) | Tok::MacroId(___tok0) | Tok::RegexLiteral(___tok0) | Tok::StringLiteral(___tok0) | Tok::Use(___tok0) if true => ___Symbol::Variant1(___tok0),
_ => unreachable!(),
},
_ => unreachable!(),
}
}
pub struct TopParser {
_priv: (),
}

impl TopParser {
pub fn new() -> TopParser {
TopParser {
_priv: (),
}
}

#[allow(dead_code)]
pub fn parse<
    'input,
    ___TOKEN: ___ToTriple<'input, >,
    ___TOKENS: IntoIterator<Item=___TOKEN>,
>(
&self,
text: &'input str,
___tokens0: ___TOKENS,
) -> Result<Top, ___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>>
{
let ___tokens = ___tokens0.into_iter();
let mut ___tokens = ___tokens.map(|t| ___ToTriple::to_triple(t));
___state_machine::Parser::drive(
___StateMachine {
text,
___phantom: core::marker::PhantomData::<(&())>,
},
___tokens,
)
}
}
pub(crate) fn ___reduce<
    'input,
>(
text: &'input str,
___action: i16,
___lookahead_start: Option<&usize>,
___states: &mut alloc::vec::Vec<i16>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> Option<Result<Top,___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>>>
{
let (___pop_states, ___nonterminal) = match ___action {
0 => {
___reduce0(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
1 => {
___reduce1(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
2 => {
___reduce2(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
3 => {
___reduce3(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
4 => {
___reduce4(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
5 => {
___reduce5(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
6 => {
___reduce6(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
7 => {
___reduce7(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
8 => {
___reduce8(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
9 => {
___reduce9(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
10 => {
___reduce10(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
11 => {
___reduce11(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
12 => {
___reduce12(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
13 => {
___reduce13(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
14 => {
___reduce14(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
15 => {
___reduce15(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
16 => {
___reduce16(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
17 => {
___reduce17(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
18 => {
___reduce18(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
19 => {
___reduce19(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
20 => {
___reduce20(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
21 => {
___reduce21(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
22 => {
___reduce22(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
23 => {
___reduce23(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
24 => {
___reduce24(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
25 => {
___reduce25(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
26 => {
___reduce26(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
27 => {
___reduce27(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
28 => {
___reduce28(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
29 => {
___reduce29(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
30 => {
___reduce30(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
31 => {
___reduce31(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
32 => {
___reduce32(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
33 => {
___reduce33(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
34 => {
___reduce34(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
35 => {
___reduce35(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
36 => {
___reduce36(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
37 => {
___reduce37(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
38 => {
___reduce38(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
39 => {
___reduce39(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
40 => {
___reduce40(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
41 => {
___reduce41(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
42 => {
___reduce42(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
43 => {
___reduce43(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
44 => {
___reduce44(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
45 => {
___reduce45(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
46 => {
___reduce46(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
47 => {
___reduce47(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
48 => {
___reduce48(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
49 => {
___reduce49(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
50 => {
___reduce50(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
51 => {
___reduce51(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
52 => {
___reduce52(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
53 => {
___reduce53(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
54 => {
___reduce54(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
55 => {
___reduce55(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
56 => {
___reduce56(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
57 => {
___reduce57(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
58 => {
___reduce58(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
59 => {
___reduce59(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
60 => {
___reduce60(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
61 => {
___reduce61(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
62 => {
___reduce62(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
63 => {
___reduce63(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
64 => {
___reduce64(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
65 => {
___reduce65(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
66 => {
___reduce66(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
67 => {
___reduce67(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
68 => {
___reduce68(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
69 => {
___reduce69(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
70 => {
___reduce70(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
71 => {
___reduce71(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
72 => {
___reduce72(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
73 => {
___reduce73(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
74 => {
___reduce74(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
75 => {
___reduce75(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
76 => {
___reduce76(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
77 => {
___reduce77(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
78 => {
___reduce78(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
79 => {
___reduce79(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
80 => {
___reduce80(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
81 => {
___reduce81(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
82 => {
___reduce82(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
83 => {
___reduce83(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
84 => {
___reduce84(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
85 => {
___reduce85(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
86 => {
___reduce86(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
87 => {
___reduce87(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
88 => {
___reduce88(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
89 => {
___reduce89(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
90 => {
___reduce90(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
91 => {
___reduce91(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
92 => {
___reduce92(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
93 => {
___reduce93(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
94 => {
___reduce94(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
95 => {
___reduce95(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
96 => {
___reduce96(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
97 => {
___reduce97(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
98 => {
___reduce98(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
99 => {
___reduce99(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
100 => {
___reduce100(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
101 => {
___reduce101(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
102 => {
___reduce102(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
103 => {
___reduce103(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
104 => {
___reduce104(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
105 => {
___reduce105(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
106 => {
___reduce106(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
107 => {
___reduce107(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
108 => {
___reduce108(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
109 => {
___reduce109(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
110 => {
___reduce110(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
111 => {
___reduce111(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
112 => {
___reduce112(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
113 => {
___reduce113(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
114 => {
___reduce114(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
115 => {
___reduce115(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
116 => {
___reduce116(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
117 => {
___reduce117(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
118 => {
___reduce118(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
119 => {
___reduce119(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
120 => {
___reduce120(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
121 => {
___reduce121(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
122 => {
___reduce122(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
123 => {
___reduce123(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
124 => {
___reduce124(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
125 => {
___reduce125(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
126 => {
___reduce126(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
127 => {
___reduce127(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
128 => {
___reduce128(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
129 => {
___reduce129(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
130 => {
___reduce130(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
131 => {
___reduce131(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
132 => {
___reduce132(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
133 => {
___reduce133(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
134 => {
___reduce134(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
135 => {
___reduce135(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
136 => {
___reduce136(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
137 => {
___reduce137(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
138 => {
___reduce138(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
139 => {
___reduce139(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
140 => {
___reduce140(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
141 => {
___reduce141(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
142 => {
___reduce142(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
143 => {
___reduce143(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
144 => {
___reduce144(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
145 => {
___reduce145(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
146 => {
___reduce146(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
147 => {
___reduce147(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
148 => {
___reduce148(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
149 => {
___reduce149(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
150 => {
___reduce150(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
151 => {
___reduce151(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
152 => {
___reduce152(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
153 => {
___reduce153(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
154 => {
___reduce154(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
155 => {
___reduce155(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
156 => {
___reduce156(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
157 => {
___reduce157(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
158 => {
___reduce158(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
159 => {
___reduce159(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
160 => {
___reduce160(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
161 => {
___reduce161(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
162 => {
___reduce162(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
163 => {
___reduce163(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
164 => {
___reduce164(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
165 => {
___reduce165(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
166 => {
___reduce166(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
167 => {
___reduce167(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
168 => {
___reduce168(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
169 => {
___reduce169(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
170 => {
___reduce170(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
171 => {
___reduce171(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
172 => {
___reduce172(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
173 => {
___reduce173(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
174 => {
___reduce174(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
175 => {
___reduce175(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
176 => {
___reduce176(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
177 => {
___reduce177(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
178 => {
___reduce178(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
179 => {
___reduce179(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
180 => {
___reduce180(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
181 => {
___reduce181(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
182 => {
___reduce182(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
183 => {
___reduce183(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
184 => {
___reduce184(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
185 => {
___reduce185(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
186 => {
___reduce186(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
187 => {
___reduce187(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
188 => {
___reduce188(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
189 => {
// Conversion = Terminal, "=>" => ActionFn(430);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant1(___symbols);
let ___sym0 = ___pop_Variant85(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = match super::___action430::<>(text, ___sym0, ___sym1) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant12(___nt), ___end));
(2, 89)
}
190 => {
___reduce190(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
191 => {
___reduce191(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
192 => {
___reduce192(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
193 => {
___reduce193(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
194 => {
___reduce194(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
195 => {
___reduce195(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
196 => {
___reduce196(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
197 => {
___reduce197(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
198 => {
___reduce198(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
199 => {
___reduce199(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
200 => {
___reduce200(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
201 => {
___reduce201(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
202 => {
___reduce202(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
203 => {
___reduce203(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
204 => {
___reduce204(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
205 => {
___reduce205(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
206 => {
___reduce206(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
207 => {
___reduce207(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
208 => {
___reduce208(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
209 => {
___reduce209(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
210 => {
___reduce210(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
211 => {
___reduce211(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
212 => {
___reduce212(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
213 => {
___reduce213(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
214 => {
___reduce214(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
215 => {
___reduce215(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
216 => {
___reduce216(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
217 => {
___reduce217(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
218 => {
___reduce218(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
219 => {
___reduce219(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
220 => {
___reduce220(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
221 => {
___reduce221(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
222 => {
___reduce222(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
223 => {
___reduce223(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
224 => {
___reduce224(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
225 => {
___reduce225(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
226 => {
___reduce226(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
227 => {
___reduce227(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
228 => {
___reduce228(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
229 => {
___reduce229(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
230 => {
___reduce230(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
231 => {
___reduce231(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
232 => {
___reduce232(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
233 => {
___reduce233(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
234 => {
___reduce234(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
235 => {
___reduce235(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
236 => {
___reduce236(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
237 => {
___reduce237(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
238 => {
___reduce238(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
239 => {
___reduce239(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
240 => {
___reduce240(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
241 => {
___reduce241(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
242 => {
___reduce242(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
243 => {
___reduce243(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
244 => {
___reduce244(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
245 => {
___reduce245(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
246 => {
___reduce246(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
247 => {
___reduce247(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
248 => {
___reduce248(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
249 => {
___reduce249(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
250 => {
___reduce250(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
251 => {
___reduce251(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
252 => {
___reduce252(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
253 => {
___reduce253(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
254 => {
___reduce254(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
255 => {
___reduce255(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
256 => {
___reduce256(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
257 => {
___reduce257(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
258 => {
___reduce258(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
259 => {
___reduce259(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
260 => {
___reduce260(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
261 => {
___reduce261(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
262 => {
___reduce262(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
263 => {
___reduce263(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
264 => {
___reduce264(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
265 => {
___reduce265(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
266 => {
___reduce266(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
267 => {
___reduce267(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
268 => {
___reduce268(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
269 => {
___reduce269(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
270 => {
___reduce270(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
271 => {
___reduce271(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
272 => {
___reduce272(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
273 => {
___reduce273(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
274 => {
___reduce274(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
275 => {
___reduce275(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
276 => {
___reduce276(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
277 => {
___reduce277(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
278 => {
___reduce278(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
279 => {
___reduce279(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
280 => {
___reduce280(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
281 => {
___reduce281(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
282 => {
___reduce282(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
283 => {
___reduce283(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
284 => {
___reduce284(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
285 => {
___reduce285(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
286 => {
___reduce286(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
287 => {
___reduce287(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
288 => {
___reduce288(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
289 => {
___reduce289(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
290 => {
___reduce290(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
291 => {
___reduce291(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
292 => {
___reduce292(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
293 => {
___reduce293(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
294 => {
___reduce294(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
295 => {
___reduce295(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
296 => {
___reduce296(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
297 => {
___reduce297(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
298 => {
___reduce298(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
299 => {
___reduce299(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
300 => {
___reduce300(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
301 => {
___reduce301(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
302 => {
___reduce302(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
303 => {
___reduce303(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
304 => {
___reduce304(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
305 => {
___reduce305(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
306 => {
___reduce306(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
307 => {
___reduce307(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
308 => {
___reduce308(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
309 => {
___reduce309(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
310 => {
___reduce310(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
311 => {
___reduce311(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
312 => {
___reduce312(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
313 => {
___reduce313(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
314 => {
___reduce314(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
315 => {
___reduce315(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
316 => {
___reduce316(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
317 => {
___reduce317(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
318 => {
___reduce318(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
319 => {
___reduce319(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
320 => {
___reduce320(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
321 => {
___reduce321(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
322 => {
___reduce322(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
323 => {
___reduce323(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
324 => {
___reduce324(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
325 => {
___reduce325(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
326 => {
___reduce326(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
327 => {
___reduce327(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
328 => {
___reduce328(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
329 => {
___reduce329(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
330 => {
___reduce330(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
331 => {
___reduce331(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
332 => {
___reduce332(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
333 => {
___reduce333(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
334 => {
___reduce334(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
335 => {
___reduce335(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
336 => {
___reduce336(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
337 => {
___reduce337(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
338 => {
___reduce338(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
339 => {
___reduce339(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
340 => {
___reduce340(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
341 => {
___reduce341(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
342 => {
___reduce342(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
343 => {
___reduce343(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
344 => {
___reduce344(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
345 => {
___reduce345(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
346 => {
___reduce346(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
347 => {
___reduce347(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
348 => {
___reduce348(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
349 => {
___reduce349(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
350 => {
___reduce350(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
351 => {
___reduce351(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
352 => {
___reduce352(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
353 => {
___reduce353(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
354 => {
___reduce354(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
355 => {
___reduce355(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
356 => {
___reduce356(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
357 => {
___reduce357(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
358 => {
___reduce358(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
359 => {
___reduce359(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
360 => {
___reduce360(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
361 => {
___reduce361(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
362 => {
___reduce362(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
363 => {
___reduce363(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
364 => {
___reduce364(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
365 => {
___reduce365(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
366 => {
___reduce366(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
367 => {
___reduce367(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
368 => {
___reduce368(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
369 => {
// MatchItem = MatchSymbol, "=>" => ActionFn(438);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant1(___symbols);
let ___sym0 = ___pop_Variant76(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = match super::___action438::<>(text, ___sym0, ___sym1) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant24(___nt), ___end));
(2, 117)
}
370 => {
___reduce370(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
371 => {
___reduce371(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
372 => {
___reduce372(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
373 => {
___reduce373(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
374 => {
___reduce374(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
375 => {
___reduce375(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
376 => {
___reduce376(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
377 => {
___reduce377(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
378 => {
___reduce378(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
379 => {
___reduce379(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
380 => {
___reduce380(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
381 => {
___reduce381(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
382 => {
___reduce382(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
383 => {
___reduce383(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
384 => {
___reduce384(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
385 => {
___reduce385(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
386 => {
___reduce386(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
387 => {
___reduce387(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
388 => {
___reduce388(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
389 => {
___reduce389(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
390 => {
___reduce390(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
391 => {
___reduce391(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
392 => {
___reduce392(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
393 => {
___reduce393(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
394 => {
___reduce394(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
395 => {
___reduce395(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
396 => {
___reduce396(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
397 => {
___reduce397(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
398 => {
___reduce398(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
399 => {
___reduce399(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
400 => {
___reduce400(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
401 => {
___reduce401(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
402 => {
___reduce402(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
403 => {
___reduce403(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
404 => {
___reduce404(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
405 => {
___reduce405(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
406 => {
___reduce406(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
407 => {
___reduce407(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
408 => {
___reduce408(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
409 => {
___reduce409(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
410 => {
___reduce410(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
411 => {
___reduce411(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
412 => {
___reduce412(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
413 => {
___reduce413(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
414 => {
___reduce414(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
415 => {
___reduce415(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
416 => {
___reduce416(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
417 => {
___reduce417(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
418 => {
___reduce418(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
419 => {
___reduce419(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
420 => {
___reduce420(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
421 => {
___reduce421(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
422 => {
___reduce422(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
423 => {
___reduce423(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
424 => {
___reduce424(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
425 => {
___reduce425(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
426 => {
___reduce426(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
427 => {
___reduce427(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
428 => {
___reduce428(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
429 => {
// StringConstant = "StringLiteral" => ActionFn(417);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = match super::___action417::<>(text, ___sym0) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant87(___nt), ___end));
(1, 140)
}
430 => {
// StringLiteral = "StringLiteral" => ActionFn(418);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = match super::___action418::<>(text, ___sym0) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(1, 141)
}
431 => {
___reduce431(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
432 => {
___reduce432(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
433 => {
___reduce433(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
434 => {
___reduce434(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
435 => {
___reduce435(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
436 => {
___reduce436(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
437 => {
___reduce437(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
438 => {
___reduce438(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
439 => {
___reduce439(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
440 => {
___reduce440(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
441 => {
___reduce441(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
442 => {
___reduce442(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
443 => {
___reduce443(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
444 => {
___reduce444(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
445 => {
___reduce445(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
446 => {
___reduce446(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
447 => {
___reduce447(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
448 => {
___reduce448(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
449 => {
___reduce449(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
450 => {
___reduce450(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
451 => {
___reduce451(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
452 => {
___reduce452(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
453 => {
___reduce453(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
454 => {
___reduce454(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
455 => {
___reduce455(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
456 => {
___reduce456(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
457 => {
___reduce457(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
458 => {
___reduce458(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
459 => {
___reduce459(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
460 => {
___reduce460(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
461 => {
___reduce461(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
462 => {
___reduce462(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
463 => {
___reduce463(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
464 => {
___reduce464(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
465 => {
___reduce465(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
466 => {
___reduce466(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
467 => {
___reduce467(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
468 => {
___reduce468(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
469 => {
___reduce469(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
470 => {
___reduce470(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
471 => {
___reduce471(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
472 => {
___reduce472(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
473 => {
___reduce473(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
474 => {
___reduce474(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
475 => {
___reduce475(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
476 => {
___reduce476(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
477 => {
___reduce477(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
478 => {
___reduce478(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
479 => {
___reduce479(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
480 => {
___reduce480(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
481 => {
___reduce481(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
482 => {
___reduce482(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
483 => {
___reduce483(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
484 => {
___reduce484(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
485 => {
___reduce485(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
486 => {
___reduce486(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
487 => {
___reduce487(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
488 => {
___reduce488(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
489 => {
___reduce489(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
490 => {
___reduce490(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
491 => {
___reduce491(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
492 => {
___reduce492(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
493 => {
___reduce493(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
494 => {
___reduce494(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
495 => {
___reduce495(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
496 => {
___reduce496(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
497 => {
___reduce497(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
498 => {
___reduce498(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
499 => {
___reduce499(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
500 => {
___reduce500(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
501 => {
___reduce501(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
502 => {
___reduce502(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
503 => {
___reduce503(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
504 => {
___reduce504(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
505 => {
___reduce505(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
506 => {
___reduce506(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
507 => {
___reduce507(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
508 => {
___reduce508(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
509 => {
___reduce509(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
510 => {
// ___Top = Top => ActionFn(0);
let ___sym0 = ___pop_Variant91(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action0::<>(text, ___sym0);
return Some(Ok(___nt));
}
_ => panic!("invalid action code {}", ___action)
};
let ___states_len = ___states.len();
___states.truncate(___states_len - ___pop_states);
let ___state = *___states.last().unwrap();
let ___next_state = ___goto(___state, ___nonterminal);
___states.push(___next_state);
None
}
#[inline(never)]
fn ___symbol_type_mismatch() -> ! {
panic!("symbol type mismatch")
}
fn ___pop_Variant9<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (), usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant9(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant46<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (Atom, String), usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant46(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant78<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (NonterminalString, Vec<NonterminalString>), usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant78(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant40<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ActionKind, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant40(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant10<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Alternative, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant10(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant44<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Annotation, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant44(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant48<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, AssociatedType, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant48(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant20<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Atom, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant20(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant7<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Condition, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant7(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant59<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ConditionOp, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant59(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant12<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Conversion, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant12(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant61<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, EnumToken, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant61(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant62<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ExprSymbol, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant62(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant14<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, FieldPattern<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant14(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant65<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Grammar, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant65(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant63<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, GrammarItem, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant63(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant22<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Lifetime, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant22(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant73<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MatchContents, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant73(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant24<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MatchItem, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant24(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant75<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MatchMapping, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant75(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant77<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MatchToken, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant77(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant26<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, NonterminalString, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant26(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant16<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Parameter, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant16(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant80<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Path, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant80(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant28<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Pattern<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant28(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant82<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, PatternKind<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant82(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant86<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, RepeatOp, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant86(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant87<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, String, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant87(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant30<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Symbol, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant30(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant90<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, SymbolKind, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant90(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant76<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TerminalLiteral, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant76(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant85<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TerminalString, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant85(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant0<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Tok<'input>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant0(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant91<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Top, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant91(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant32<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeBound<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant32(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant34<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeBoundParameter<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant34(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant36<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeParameter, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant36(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant3<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeRef, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant3(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant43<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Alternative>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant43(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant50<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Conversion>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant50(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant83<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Lifetime>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant83(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant53<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<MatchItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant53(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant54<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<NonterminalString>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant54(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant51<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Parameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant51(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant55<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Pattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant55(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant56<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Symbol>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant56(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant84<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<TypeBound<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant84(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant5<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<TypeBoundParameter<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant5(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant57<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<TypeParameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant57(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant58<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant58(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant52<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<WhereClause<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant52(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant95<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Visibility, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant95(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant18<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, WhereClause<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant18(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant11<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Alternative>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant11(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant45<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Annotation>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant45(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant49<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<AssociatedType>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant49(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant21<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Atom>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant21(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant13<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Conversion>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant13(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant15<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant15(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant66<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<GrammarItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant66(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant23<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Lifetime>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant23(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant25<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<MatchItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant25(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant27<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<NonterminalString>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant27(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant17<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Parameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant17(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant29<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant29(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant88<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<String>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant88(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant31<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Symbol>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant31(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant33<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant33(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant35<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant35(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant37<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TypeParameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant37(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant38<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant38(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant19<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant19(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant47<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<(Atom, String)>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant47(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant41<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<ActionKind>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant41(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant42<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Alternative>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant42(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant8<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Condition>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant8(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant60<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Conversion>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant60(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant64<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<FieldPattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant64(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant72<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Lifetime>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant72(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant74<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<MatchItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant74(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant79<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<NonterminalString>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant79(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant67<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Parameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant67(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant81<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Pattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant81(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant89<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Symbol>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant89(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant2<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Tok<'input>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant2(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant92<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<TypeBound<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant92(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant93<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<TypeBoundParameter<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant93(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant94<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<TypeParameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant94(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant4<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant4(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant68<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Vec<Parameter>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant68(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant6<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Vec<TypeBoundParameter<TypeRef>>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant6(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant69<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Vec<TypeParameter>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant69(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant71<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant71(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant70<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, core::option::Option<WhereClause<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant70(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant39<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, usize, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant39(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant1<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant1(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
pub(crate) fn ___reduce0<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// "::"? = "::" => ActionFn(137);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action137::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(1, 0)
}
pub(crate) fn ___reduce1<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// "::"? =  => ActionFn(138);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action138::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(0, 0)
}
pub(crate) fn ___reduce2<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ";"? = ";" => ActionFn(154);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action154::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(1, 1)
}
pub(crate) fn ___reduce3<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ";"? =  => ActionFn(155);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action155::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(0, 1)
}
pub(crate) fn ___reduce4<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// "mut"? = "mut" => ActionFn(143);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action143::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(1, 2)
}
pub(crate) fn ___reduce5<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// "mut"? =  => ActionFn(144);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action144::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(0, 2)
}
pub(crate) fn ___reduce6<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("->" <TypeRef>) = "->", TypeRef => ActionFn(170);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action170::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 3)
}
pub(crate) fn ___reduce7<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("->" <TypeRef>)? = "->", TypeRef => ActionFn(311);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action311::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(2, 4)
}
pub(crate) fn ___reduce8<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("->" <TypeRef>)? =  => ActionFn(169);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action169::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(0, 4)
}
pub(crate) fn ___reduce9<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <TypeRef>) = ":", TypeRef => ActionFn(162);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action162::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 5)
}
pub(crate) fn ___reduce10<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <TypeRef>)? = ":", TypeRef => ActionFn(316);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action316::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(2, 6)
}
pub(crate) fn ___reduce11<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <TypeRef>)? =  => ActionFn(161);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action161::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(0, 6)
}
pub(crate) fn ___reduce12<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("<" <Comma<TypeBoundParameter>> ">") = "<", Comma<TypeBoundParameter>, ">" => ActionFn(166);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant5(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action166::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(3, 7)
}
pub(crate) fn ___reduce13<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("<" <Comma<TypeBoundParameter>> ">")? = "<", Comma<TypeBoundParameter>, ">" => ActionFn(319);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant5(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action319::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant6(___nt), ___end));
(3, 8)
}
pub(crate) fn ___reduce14<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("<" <Comma<TypeBoundParameter>> ">")? =  => ActionFn(165);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action165::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant6(___nt), ___end));
(0, 8)
}
pub(crate) fn ___reduce15<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("if" <Cond>) = "if", Cond => ActionFn(151);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant7(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action151::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant7(___nt), ___end));
(2, 9)
}
pub(crate) fn ___reduce16<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("if" <Cond>)? = "if", Cond => ActionFn(322);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant7(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action322::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant8(___nt), ___end));
(2, 10)
}
pub(crate) fn ___reduce17<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("if" <Cond>)? =  => ActionFn(150);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action150::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant8(___nt), ___end));
(0, 10)
}
pub(crate) fn ___reduce18<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// () =  => ActionFn(173);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action173::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant9(___nt), ___end));
(0, 11)
}
pub(crate) fn ___reduce19<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",") = Alternative, "," => ActionFn(243);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action243::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(2, 12)
}
pub(crate) fn ___reduce20<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",")* =  => ActionFn(241);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action241::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant11(___nt), ___end));
(0, 13)
}
pub(crate) fn ___reduce21<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",")* = (<Alternative> ",")+ => ActionFn(242);
let ___sym0 = ___pop_Variant11(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action242::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant11(___nt), ___end));
(1, 13)
}
pub(crate) fn ___reduce22<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",")+ = Alternative, "," => ActionFn(329);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action329::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant11(___nt), ___end));
(2, 14)
}
pub(crate) fn ___reduce23<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",")+ = (<Alternative> ",")+, Alternative, "," => ActionFn(330);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant10(___symbols);
let ___sym0 = ___pop_Variant11(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action330::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant11(___nt), ___end));
(3, 14)
}
pub(crate) fn ___reduce24<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",") = Conversion, "," => ActionFn(267);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action267::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant12(___nt), ___end));
(2, 15)
}
pub(crate) fn ___reduce25<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",")* =  => ActionFn(265);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action265::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(0, 16)
}
pub(crate) fn ___reduce26<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",")* = (<Conversion> ",")+ => ActionFn(266);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action266::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(1, 16)
}
pub(crate) fn ___reduce27<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",")+ = Conversion, "," => ActionFn(333);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action333::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(2, 17)
}
pub(crate) fn ___reduce28<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",")+ = (<Conversion> ",")+, Conversion, "," => ActionFn(334);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant12(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action334::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(3, 17)
}
pub(crate) fn ___reduce29<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",") = FieldPattern, "," => ActionFn(128);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant14(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action128::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant14(___nt), ___end));
(2, 18)
}
pub(crate) fn ___reduce30<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",")* =  => ActionFn(126);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action126::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant15(___nt), ___end));
(0, 19)
}
pub(crate) fn ___reduce31<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",")* = (<FieldPattern> ",")+ => ActionFn(127);
let ___sym0 = ___pop_Variant15(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action127::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant15(___nt), ___end));
(1, 19)
}
pub(crate) fn ___reduce32<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",")+ = FieldPattern, "," => ActionFn(337);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant14(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action337::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant15(___nt), ___end));
(2, 20)
}
pub(crate) fn ___reduce33<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",")+ = (<FieldPattern> ",")+, FieldPattern, "," => ActionFn(338);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant14(___symbols);
let ___sym0 = ___pop_Variant15(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action338::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant15(___nt), ___end));
(3, 20)
}
pub(crate) fn ___reduce34<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",") = GrammarParameter, "," => ActionFn(233);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant16(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action233::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant16(___nt), ___end));
(2, 21)
}
pub(crate) fn ___reduce35<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",")* =  => ActionFn(231);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action231::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant17(___nt), ___end));
(0, 22)
}
pub(crate) fn ___reduce36<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",")* = (<GrammarParameter> ",")+ => ActionFn(232);
let ___sym0 = ___pop_Variant17(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action232::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant17(___nt), ___end));
(1, 22)
}
pub(crate) fn ___reduce37<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",")+ = GrammarParameter, "," => ActionFn(343);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant16(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action343::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant17(___nt), ___end));
(2, 23)
}
pub(crate) fn ___reduce38<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",")+ = (<GrammarParameter> ",")+, GrammarParameter, "," => ActionFn(344);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant16(___symbols);
let ___sym0 = ___pop_Variant17(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action344::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant17(___nt), ___end));
(3, 23)
}
pub(crate) fn ___reduce39<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",") = GrammarWhereClause, "," => ActionFn(210);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant18(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action210::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant18(___nt), ___end));
(2, 24)
}
pub(crate) fn ___reduce40<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",")* =  => ActionFn(208);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action208::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant19(___nt), ___end));
(0, 25)
}
pub(crate) fn ___reduce41<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",")* = (<GrammarWhereClause> ",")+ => ActionFn(209);
let ___sym0 = ___pop_Variant19(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action209::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant19(___nt), ___end));
(1, 25)
}
pub(crate) fn ___reduce42<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",")+ = GrammarWhereClause, "," => ActionFn(347);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant18(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action347::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant19(___nt), ___end));
(2, 26)
}
pub(crate) fn ___reduce43<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",")+ = (<GrammarWhereClause> ",")+, GrammarWhereClause, "," => ActionFn(348);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant18(___symbols);
let ___sym0 = ___pop_Variant19(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action348::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant19(___nt), ___end));
(3, 26)
}
pub(crate) fn ___reduce44<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::") = Id, "::" => ActionFn(136);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action136::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(2, 27)
}
pub(crate) fn ___reduce45<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::")* =  => ActionFn(134);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action134::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant21(___nt), ___end));
(0, 28)
}
pub(crate) fn ___reduce46<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::")* = (<Id> "::")+ => ActionFn(135);
let ___sym0 = ___pop_Variant21(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action135::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant21(___nt), ___end));
(1, 28)
}
pub(crate) fn ___reduce47<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::")+ = Id, "::" => ActionFn(351);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action351::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant21(___nt), ___end));
(2, 29)
}
pub(crate) fn ___reduce48<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::")+ = (<Id> "::")+, Id, "::" => ActionFn(352);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant20(___symbols);
let ___sym0 = ___pop_Variant21(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action352::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant21(___nt), ___end));
(3, 29)
}
pub(crate) fn ___reduce49<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+") = Lifetime, "+" => ActionFn(213);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action213::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant22(___nt), ___end));
(2, 30)
}
pub(crate) fn ___reduce50<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+")* =  => ActionFn(211);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action211::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant23(___nt), ___end));
(0, 31)
}
pub(crate) fn ___reduce51<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+")* = (<Lifetime> "+")+ => ActionFn(212);
let ___sym0 = ___pop_Variant23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action212::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant23(___nt), ___end));
(1, 31)
}
pub(crate) fn ___reduce52<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+")+ = Lifetime, "+" => ActionFn(357);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action357::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant23(___nt), ___end));
(2, 32)
}
pub(crate) fn ___reduce53<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+")+ = (<Lifetime> "+")+, Lifetime, "+" => ActionFn(358);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action358::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant23(___nt), ___end));
(3, 32)
}
pub(crate) fn ___reduce54<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",") = MatchItem, "," => ActionFn(262);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action262::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant24(___nt), ___end));
(2, 33)
}
pub(crate) fn ___reduce55<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",")* =  => ActionFn(260);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action260::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant25(___nt), ___end));
(0, 34)
}
pub(crate) fn ___reduce56<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",")* = (<MatchItem> ",")+ => ActionFn(261);
let ___sym0 = ___pop_Variant25(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action261::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant25(___nt), ___end));
(1, 34)
}
pub(crate) fn ___reduce57<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",")+ = MatchItem, "," => ActionFn(361);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action361::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant25(___nt), ___end));
(2, 35)
}
pub(crate) fn ___reduce58<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",")+ = (<MatchItem> ",")+, MatchItem, "," => ActionFn(362);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant24(___symbols);
let ___sym0 = ___pop_Variant25(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action362::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant25(___nt), ___end));
(3, 35)
}
pub(crate) fn ___reduce59<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",") = NotMacroId, "," => ActionFn(238);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action238::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant26(___nt), ___end));
(2, 36)
}
pub(crate) fn ___reduce60<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",")* =  => ActionFn(236);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action236::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant27(___nt), ___end));
(0, 37)
}
pub(crate) fn ___reduce61<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",")* = (<NotMacroId> ",")+ => ActionFn(237);
let ___sym0 = ___pop_Variant27(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action237::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant27(___nt), ___end));
(1, 37)
}
pub(crate) fn ___reduce62<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",")+ = NotMacroId, "," => ActionFn(365);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action365::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant27(___nt), ___end));
(2, 38)
}
pub(crate) fn ___reduce63<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",")+ = (<NotMacroId> ",")+, NotMacroId, "," => ActionFn(366);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant26(___symbols);
let ___sym0 = ___pop_Variant27(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action366::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant27(___nt), ___end));
(3, 38)
}
pub(crate) fn ___reduce64<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",") = Pattern, "," => ActionFn(272);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action272::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant28(___nt), ___end));
(2, 39)
}
pub(crate) fn ___reduce65<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",")* =  => ActionFn(270);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action270::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant29(___nt), ___end));
(0, 40)
}
pub(crate) fn ___reduce66<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",")* = (<Pattern> ",")+ => ActionFn(271);
let ___sym0 = ___pop_Variant29(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action271::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant29(___nt), ___end));
(1, 40)
}
pub(crate) fn ___reduce67<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",")+ = Pattern, "," => ActionFn(369);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action369::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant29(___nt), ___end));
(2, 41)
}
pub(crate) fn ___reduce68<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",")+ = (<Pattern> ",")+, Pattern, "," => ActionFn(370);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant28(___symbols);
let ___sym0 = ___pop_Variant29(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action370::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant29(___nt), ___end));
(3, 41)
}
pub(crate) fn ___reduce69<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",") = Symbol, "," => ActionFn(248);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action248::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(2, 42)
}
pub(crate) fn ___reduce70<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",")* =  => ActionFn(246);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action246::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(0, 43)
}
pub(crate) fn ___reduce71<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",")* = (<Symbol> ",")+ => ActionFn(247);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action247::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(1, 43)
}
pub(crate) fn ___reduce72<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",")+ = Symbol, "," => ActionFn(373);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action373::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(2, 44)
}
pub(crate) fn ___reduce73<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",")+ = (<Symbol> ",")+, Symbol, "," => ActionFn(374);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant30(___symbols);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action374::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(3, 44)
}
pub(crate) fn ___reduce74<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+") = TypeBound, "+" => ActionFn(218);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action218::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(2, 45)
}
pub(crate) fn ___reduce75<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+")* =  => ActionFn(216);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action216::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(0, 46)
}
pub(crate) fn ___reduce76<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+")* = (<TypeBound> "+")+ => ActionFn(217);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action217::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(1, 46)
}
pub(crate) fn ___reduce77<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+")+ = TypeBound, "+" => ActionFn(377);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action377::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(2, 47)
}
pub(crate) fn ___reduce78<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+")+ = (<TypeBound> "+")+, TypeBound, "+" => ActionFn(378);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant32(___symbols);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action378::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(3, 47)
}
pub(crate) fn ___reduce79<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",") = TypeBoundParameter, "," => ActionFn(228);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant34(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action228::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant34(___nt), ___end));
(2, 48)
}
pub(crate) fn ___reduce80<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",")* =  => ActionFn(226);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action226::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant35(___nt), ___end));
(0, 49)
}
pub(crate) fn ___reduce81<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",")* = (<TypeBoundParameter> ",")+ => ActionFn(227);
let ___sym0 = ___pop_Variant35(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action227::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant35(___nt), ___end));
(1, 49)
}
pub(crate) fn ___reduce82<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",")+ = TypeBoundParameter, "," => ActionFn(381);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant34(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action381::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant35(___nt), ___end));
(2, 50)
}
pub(crate) fn ___reduce83<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",")+ = (<TypeBoundParameter> ",")+, TypeBoundParameter, "," => ActionFn(382);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant34(___symbols);
let ___sym0 = ___pop_Variant35(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action382::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant35(___nt), ___end));
(3, 50)
}
pub(crate) fn ___reduce84<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",") = TypeParameter, "," => ActionFn(205);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant36(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action205::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(2, 51)
}
pub(crate) fn ___reduce85<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",")* =  => ActionFn(203);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action203::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant37(___nt), ___end));
(0, 52)
}
pub(crate) fn ___reduce86<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",")* = (<TypeParameter> ",")+ => ActionFn(204);
let ___sym0 = ___pop_Variant37(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action204::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant37(___nt), ___end));
(1, 52)
}
pub(crate) fn ___reduce87<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",")+ = TypeParameter, "," => ActionFn(385);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant36(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action385::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant37(___nt), ___end));
(2, 53)
}
pub(crate) fn ___reduce88<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",")+ = (<TypeParameter> ",")+, TypeParameter, "," => ActionFn(386);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant36(___symbols);
let ___sym0 = ___pop_Variant37(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action386::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant37(___nt), ___end));
(3, 53)
}
pub(crate) fn ___reduce89<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",") = TypeRef, "," => ActionFn(223);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action223::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 54)
}
pub(crate) fn ___reduce90<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",")* =  => ActionFn(221);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action221::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(0, 55)
}
pub(crate) fn ___reduce91<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",")* = (<TypeRef> ",")+ => ActionFn(222);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action222::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(1, 55)
}
pub(crate) fn ___reduce92<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",")+ = TypeRef, "," => ActionFn(389);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action389::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(2, 56)
}
pub(crate) fn ___reduce93<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",")+ = (<TypeRef> ",")+, TypeRef, "," => ActionFn(390);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action390::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(3, 56)
}
pub(crate) fn ___reduce94<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",") = TypeRefOrLifetime, "," => ActionFn(253);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action253::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 57)
}
pub(crate) fn ___reduce95<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",")* =  => ActionFn(251);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action251::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(0, 58)
}
pub(crate) fn ___reduce96<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",")* = (<TypeRefOrLifetime> ",")+ => ActionFn(252);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action252::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(1, 58)
}
pub(crate) fn ___reduce97<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",")+ = TypeRefOrLifetime, "," => ActionFn(393);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action393::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(2, 59)
}
pub(crate) fn ___reduce98<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",")+ = (<TypeRefOrLifetime> ",")+, TypeRefOrLifetime, "," => ActionFn(394);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action394::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(3, 59)
}
pub(crate) fn ___reduce99<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// @L =  => ActionFn(186);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action186::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant39(___nt), ___end));
(0, 60)
}
pub(crate) fn ___reduce100<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// @R =  => ActionFn(185);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action185::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant39(___nt), ___end));
(0, 61)
}
pub(crate) fn ___reduce101<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action = "=>@L" => ActionFn(43);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action43::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant40(___nt), ___end));
(1, 62)
}
pub(crate) fn ___reduce102<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action = "=>@R" => ActionFn(44);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action44::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant40(___nt), ___end));
(1, 62)
}
pub(crate) fn ___reduce103<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action = "=>" => ActionFn(45);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action45::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant40(___nt), ___end));
(1, 62)
}
pub(crate) fn ___reduce104<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action = "=>?" => ActionFn(46);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action46::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant40(___nt), ___end));
(1, 62)
}
pub(crate) fn ___reduce105<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action? = Action => ActionFn(147);
let ___sym0 = ___pop_Variant40(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action147::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant41(___nt), ___end));
(1, 63)
}
pub(crate) fn ___reduce106<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action? =  => ActionFn(148);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action148::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant41(___nt), ___end));
(0, 63)
}
pub(crate) fn ___reduce107<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Symbol+, "if", Cond, Action => ActionFn(456);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant40(___symbols);
let ___sym2 = ___pop_Variant7(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action456::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(4, 64)
}
pub(crate) fn ___reduce108<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Annotation+, Symbol+, "if", Cond, Action => ActionFn(457);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant40(___symbols);
let ___sym3 = ___pop_Variant7(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant31(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action457::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(5, 64)
}
pub(crate) fn ___reduce109<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Symbol+, "if", Cond => ActionFn(458);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant7(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action458::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(3, 64)
}
pub(crate) fn ___reduce110<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Annotation+, Symbol+, "if", Cond => ActionFn(459);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant7(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant31(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action459::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(4, 64)
}
pub(crate) fn ___reduce111<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Symbol+, Action => ActionFn(460);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant40(___symbols);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action460::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(2, 64)
}
pub(crate) fn ___reduce112<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Annotation+, Symbol+, Action => ActionFn(461);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant40(___symbols);
let ___sym1 = ___pop_Variant31(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action461::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(3, 64)
}
pub(crate) fn ___reduce113<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Symbol+ => ActionFn(462);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action462::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(1, 64)
}
pub(crate) fn ___reduce114<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Annotation+, Symbol+ => ActionFn(463);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant31(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action463::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(2, 64)
}
pub(crate) fn ___reduce115<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = "if", Cond, Action => ActionFn(425);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant40(___symbols);
let ___sym1 = ___pop_Variant7(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action425::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(3, 64)
}
pub(crate) fn ___reduce116<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Action => ActionFn(426);
let ___sym0 = ___pop_Variant40(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action426::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(1, 64)
}
pub(crate) fn ___reduce117<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative? = Alternative => ActionFn(239);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action239::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(1, 65)
}
pub(crate) fn ___reduce118<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative? =  => ActionFn(240);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action240::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(0, 65)
}
pub(crate) fn ___reduce119<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternatives = Alternative, ";" => ActionFn(39);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action39::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(2, 66)
}
pub(crate) fn ___reduce120<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternatives = "{", Comma<Alternative>, "}", ";" => ActionFn(305);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant43(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action305::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(4, 66)
}
pub(crate) fn ___reduce121<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternatives = "{", Comma<Alternative>, "}" => ActionFn(306);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant43(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action306::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(3, 66)
}
pub(crate) fn ___reduce122<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Annotation = "#", "[", Id, AnnotationArg, "]" => ActionFn(470);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant46(___symbols);
let ___sym2 = ___pop_Variant20(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action470::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant44(___nt), ___end));
(5, 67)
}
pub(crate) fn ___reduce123<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Annotation = "#", "[", Id, "]" => ActionFn(471);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant20(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action471::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant44(___nt), ___end));
(4, 67)
}
pub(crate) fn ___reduce124<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Annotation* =  => ActionFn(187);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action187::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant45(___nt), ___end));
(0, 68)
}
pub(crate) fn ___reduce125<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Annotation* = Annotation+ => ActionFn(188);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action188::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant45(___nt), ___end));
(1, 68)
}
pub(crate) fn ___reduce126<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Annotation+ = Annotation => ActionFn(197);
let ___sym0 = ___pop_Variant44(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action197::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant45(___nt), ___end));
(1, 69)
}
pub(crate) fn ___reduce127<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Annotation+ = Annotation+, Annotation => ActionFn(198);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant44(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action198::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant45(___nt), ___end));
(2, 69)
}
pub(crate) fn ___reduce128<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AnnotationArg = "(", Id, "=", "StringLiteral", ")" => ActionFn(34);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant1(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant20(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action34::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant46(___nt), ___end));
(5, 70)
}
pub(crate) fn ___reduce129<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AnnotationArg? = AnnotationArg => ActionFn(158);
let ___sym0 = ___pop_Variant46(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action158::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(1, 71)
}
pub(crate) fn ___reduce130<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AnnotationArg? =  => ActionFn(159);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action159::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(0, 71)
}
pub(crate) fn ___reduce131<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType = "type", Id, "=", TypeRef, ";" => ActionFn(428);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant3(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant20(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action428::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant48(___nt), ___end));
(5, 72)
}
pub(crate) fn ___reduce132<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType* =  => ActionFn(132);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action132::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant49(___nt), ___end));
(0, 73)
}
pub(crate) fn ___reduce133<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType* = AssociatedType+ => ActionFn(133);
let ___sym0 = ___pop_Variant49(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action133::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant49(___nt), ___end));
(1, 73)
}
pub(crate) fn ___reduce134<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType+ = AssociatedType => ActionFn(256);
let ___sym0 = ___pop_Variant48(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action256::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant49(___nt), ___end));
(1, 74)
}
pub(crate) fn ___reduce135<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType+ = AssociatedType+, AssociatedType => ActionFn(257);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant48(___symbols);
let ___sym0 = ___pop_Variant49(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action257::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant49(___nt), ___end));
(2, 74)
}
pub(crate) fn ___reduce136<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Alternative> = Alternative => ActionFn(452);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action452::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(1, 75)
}
pub(crate) fn ___reduce137<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Alternative> =  => ActionFn(453);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action453::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(0, 75)
}
pub(crate) fn ___reduce138<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Alternative> = (<Alternative> ",")+, Alternative => ActionFn(454);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant10(___symbols);
let ___sym0 = ___pop_Variant11(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action454::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(2, 75)
}
pub(crate) fn ___reduce139<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Alternative> = (<Alternative> ",")+ => ActionFn(455);
let ___sym0 = ___pop_Variant11(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action455::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(1, 75)
}
pub(crate) fn ___reduce140<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Conversion> = Conversion => ActionFn(478);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action478::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant50(___nt), ___end));
(1, 76)
}
pub(crate) fn ___reduce141<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Conversion> =  => ActionFn(479);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action479::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant50(___nt), ___end));
(0, 76)
}
pub(crate) fn ___reduce142<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Conversion> = (<Conversion> ",")+, Conversion => ActionFn(480);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant12(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action480::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant50(___nt), ___end));
(2, 76)
}
pub(crate) fn ___reduce143<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Conversion> = (<Conversion> ",")+ => ActionFn(481);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action481::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant50(___nt), ___end));
(1, 76)
}
pub(crate) fn ___reduce144<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarParameter> = GrammarParameter => ActionFn(504);
let ___sym0 = ___pop_Variant16(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action504::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant51(___nt), ___end));
(1, 77)
}
pub(crate) fn ___reduce145<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarParameter> =  => ActionFn(505);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action505::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant51(___nt), ___end));
(0, 77)
}
pub(crate) fn ___reduce146<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarParameter> = (<GrammarParameter> ",")+, GrammarParameter => ActionFn(506);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant16(___symbols);
let ___sym0 = ___pop_Variant17(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action506::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant51(___nt), ___end));
(2, 77)
}
pub(crate) fn ___reduce147<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarParameter> = (<GrammarParameter> ",")+ => ActionFn(507);
let ___sym0 = ___pop_Variant17(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action507::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant51(___nt), ___end));
(1, 77)
}
pub(crate) fn ___reduce148<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarWhereClause> = GrammarWhereClause => ActionFn(532);
let ___sym0 = ___pop_Variant18(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action532::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant52(___nt), ___end));
(1, 78)
}
pub(crate) fn ___reduce149<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarWhereClause> =  => ActionFn(533);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action533::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant52(___nt), ___end));
(0, 78)
}
pub(crate) fn ___reduce150<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarWhereClause> = (<GrammarWhereClause> ",")+, GrammarWhereClause => ActionFn(534);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant18(___symbols);
let ___sym0 = ___pop_Variant19(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action534::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant52(___nt), ___end));
(2, 78)
}
pub(crate) fn ___reduce151<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarWhereClause> = (<GrammarWhereClause> ",")+ => ActionFn(535);
let ___sym0 = ___pop_Variant19(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action535::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant52(___nt), ___end));
(1, 78)
}
pub(crate) fn ___reduce152<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<MatchItem> = MatchItem => ActionFn(576);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action576::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant53(___nt), ___end));
(1, 79)
}
pub(crate) fn ___reduce153<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<MatchItem> =  => ActionFn(577);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action577::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant53(___nt), ___end));
(0, 79)
}
pub(crate) fn ___reduce154<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<MatchItem> = (<MatchItem> ",")+, MatchItem => ActionFn(578);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant24(___symbols);
let ___sym0 = ___pop_Variant25(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action578::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant53(___nt), ___end));
(2, 79)
}
pub(crate) fn ___reduce155<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<MatchItem> = (<MatchItem> ",")+ => ActionFn(579);
let ___sym0 = ___pop_Variant25(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action579::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant53(___nt), ___end));
(1, 79)
}
pub(crate) fn ___reduce156<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<NotMacroId> = NotMacroId => ActionFn(580);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action580::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant54(___nt), ___end));
(1, 80)
}
pub(crate) fn ___reduce157<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<NotMacroId> =  => ActionFn(581);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action581::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant54(___nt), ___end));
(0, 80)
}
pub(crate) fn ___reduce158<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<NotMacroId> = (<NotMacroId> ",")+, NotMacroId => ActionFn(582);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant26(___symbols);
let ___sym0 = ___pop_Variant27(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action582::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant54(___nt), ___end));
(2, 80)
}
pub(crate) fn ___reduce159<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<NotMacroId> = (<NotMacroId> ",")+ => ActionFn(583);
let ___sym0 = ___pop_Variant27(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action583::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant54(___nt), ___end));
(1, 80)
}
pub(crate) fn ___reduce160<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Pattern> = Pattern => ActionFn(584);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action584::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(1, 81)
}
pub(crate) fn ___reduce161<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Pattern> =  => ActionFn(585);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action585::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(0, 81)
}
pub(crate) fn ___reduce162<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Pattern> = (<Pattern> ",")+, Pattern => ActionFn(586);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant28(___symbols);
let ___sym0 = ___pop_Variant29(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action586::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(2, 81)
}
pub(crate) fn ___reduce163<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Pattern> = (<Pattern> ",")+ => ActionFn(587);
let ___sym0 = ___pop_Variant29(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action587::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(1, 81)
}
pub(crate) fn ___reduce164<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Symbol> = Symbol => ActionFn(654);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action654::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(1, 82)
}
pub(crate) fn ___reduce165<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Symbol> =  => ActionFn(655);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action655::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(0, 82)
}
pub(crate) fn ___reduce166<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Symbol> = (<Symbol> ",")+, Symbol => ActionFn(656);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant30(___symbols);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action656::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(2, 82)
}
pub(crate) fn ___reduce167<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Symbol> = (<Symbol> ",")+ => ActionFn(657);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action657::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(1, 82)
}
pub(crate) fn ___reduce168<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeBoundParameter> = TypeBoundParameter => ActionFn(662);
let ___sym0 = ___pop_Variant34(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action662::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(1, 83)
}
pub(crate) fn ___reduce169<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeBoundParameter> =  => ActionFn(663);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action663::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(0, 83)
}
pub(crate) fn ___reduce170<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeBoundParameter> = (<TypeBoundParameter> ",")+, TypeBoundParameter => ActionFn(664);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant34(___symbols);
let ___sym0 = ___pop_Variant35(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action664::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(2, 83)
}
pub(crate) fn ___reduce171<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeBoundParameter> = (<TypeBoundParameter> ",")+ => ActionFn(665);
let ___sym0 = ___pop_Variant35(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action665::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(1, 83)
}
pub(crate) fn ___reduce172<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeParameter> = TypeParameter => ActionFn(666);
let ___sym0 = ___pop_Variant36(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action666::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(1, 84)
}
pub(crate) fn ___reduce173<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeParameter> =  => ActionFn(667);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action667::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(0, 84)
}
pub(crate) fn ___reduce174<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeParameter> = (<TypeParameter> ",")+, TypeParameter => ActionFn(668);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant36(___symbols);
let ___sym0 = ___pop_Variant37(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action668::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(2, 84)
}
pub(crate) fn ___reduce175<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeParameter> = (<TypeParameter> ",")+ => ActionFn(669);
let ___sym0 = ___pop_Variant37(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action669::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(1, 84)
}
pub(crate) fn ___reduce176<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRef> = TypeRef => ActionFn(670);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action670::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(1, 85)
}
pub(crate) fn ___reduce177<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRef> =  => ActionFn(671);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action671::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(0, 85)
}
pub(crate) fn ___reduce178<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRef> = (<TypeRef> ",")+, TypeRef => ActionFn(672);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action672::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(2, 85)
}
pub(crate) fn ___reduce179<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRef> = (<TypeRef> ",")+ => ActionFn(673);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action673::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(1, 85)
}
pub(crate) fn ___reduce180<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRefOrLifetime> = TypeRefOrLifetime => ActionFn(674);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action674::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(1, 86)
}
pub(crate) fn ___reduce181<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRefOrLifetime> =  => ActionFn(675);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action675::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(0, 86)
}
pub(crate) fn ___reduce182<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRefOrLifetime> = (<TypeRefOrLifetime> ",")+, TypeRefOrLifetime => ActionFn(676);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action676::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(2, 86)
}
pub(crate) fn ___reduce183<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRefOrLifetime> = (<TypeRefOrLifetime> ",")+ => ActionFn(677);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action677::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(1, 86)
}
pub(crate) fn ___reduce184<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Cond = NotMacroId, CondOp, StringLiteral => ActionFn(429);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant20(___symbols);
let ___sym1 = ___pop_Variant59(___symbols);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action429::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant7(___nt), ___end));
(3, 87)
}
pub(crate) fn ___reduce185<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// CondOp = "==" => ActionFn(48);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action48::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant59(___nt), ___end));
(1, 88)
}
pub(crate) fn ___reduce186<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// CondOp = "!=" => ActionFn(49);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action49::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant59(___nt), ___end));
(1, 88)
}
pub(crate) fn ___reduce187<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// CondOp = "~~" => ActionFn(50);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action50::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant59(___nt), ___end));
(1, 88)
}
pub(crate) fn ___reduce188<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// CondOp = "!~" => ActionFn(51);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action51::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant59(___nt), ___end));
(1, 88)
}
pub(crate) fn ___reduce190<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Conversion? = Conversion => ActionFn(263);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action263::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant60(___nt), ___end));
(1, 90)
}
pub(crate) fn ___reduce191<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Conversion? =  => ActionFn(264);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action264::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant60(___nt), ___end));
(0, 90)
}
pub(crate) fn ___reduce192<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// EnumToken = "enum", TypeRef, "{", Comma<Conversion>, "}" => ActionFn(431);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant50(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action431::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant61(___nt), ___end));
(5, 91)
}
pub(crate) fn ___reduce193<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Escape = "Escape" => ActionFn(113);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action113::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(1, 92)
}
pub(crate) fn ___reduce194<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExprSymbol =  => ActionFn(652);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action652::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(0, 93)
}
pub(crate) fn ___reduce195<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExprSymbol = Symbol+ => ActionFn(653);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action653::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(1, 93)
}
pub(crate) fn ___reduce196<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", EnumToken, "}" => ActionFn(472);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action472::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(4, 94)
}
pub(crate) fn ___reduce197<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", EnumToken, AssociatedType+, "}" => ActionFn(473);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant49(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action473::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(5, 94)
}
pub(crate) fn ___reduce198<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", AssociatedType+, EnumToken, "}" => ActionFn(474);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant49(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action474::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(5, 94)
}
pub(crate) fn ___reduce199<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", AssociatedType+, EnumToken, AssociatedType+, "}" => ActionFn(475);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant49(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant49(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action475::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(6, 94)
}
pub(crate) fn ___reduce200<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", "}" => ActionFn(476);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action476::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(3, 94)
}
pub(crate) fn ___reduce201<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", AssociatedType+, "}" => ActionFn(477);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant49(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action477::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(4, 94)
}
pub(crate) fn ___reduce202<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FieldPattern = Id, ":", Pattern => ActionFn(434);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant28(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action434::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant14(___nt), ___end));
(3, 95)
}
pub(crate) fn ___reduce203<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FieldPattern? = FieldPattern => ActionFn(124);
let ___sym0 = ___pop_Variant14(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action124::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant64(___nt), ___end));
(1, 96)
}
pub(crate) fn ___reduce204<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FieldPattern? =  => ActionFn(125);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action125::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant64(___nt), ___end));
(0, 96)
}
pub(crate) fn ___reduce205<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ForAll = "for", "<", Comma<TypeParameter>, ">" => ActionFn(13);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action13::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(4, 97)
}
pub(crate) fn ___reduce206<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ForAll =  => ActionFn(327);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action327::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(0, 97)
}
pub(crate) fn ___reduce207<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(678);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action678::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce208<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(679);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action679::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce209<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(680);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action680::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce210<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(681);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action681::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce211<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(682);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action682::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce212<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(683);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action683::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce213<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(684);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action684::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce214<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(685);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action685::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce215<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(686);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant51(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action686::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce216<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(687);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action687::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce217<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(688);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action688::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce218<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(689);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action689::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce219<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarParameters, ";" => ActionFn(690);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant51(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action690::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(3, 98)
}
pub(crate) fn ___reduce220<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarParameters, ";" => ActionFn(691);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action691::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce221<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarParameters, ";" => ActionFn(692);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action692::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce222<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarParameters, ";" => ActionFn(693);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action693::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce223<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(694);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action694::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce224<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(695);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action695::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce225<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(696);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action696::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce226<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(697);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action697::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce227<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, ";" => ActionFn(698);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action698::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(3, 98)
}
pub(crate) fn ___reduce228<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, ";" => ActionFn(699);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action699::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce229<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, ";" => ActionFn(700);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action700::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce230<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, ";" => ActionFn(701);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action701::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce231<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarWhereClauses, ";" => ActionFn(702);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant52(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action702::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(3, 98)
}
pub(crate) fn ___reduce232<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarWhereClauses, ";" => ActionFn(703);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action703::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce233<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarWhereClauses, ";" => ActionFn(704);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action704::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce234<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarWhereClauses, ";" => ActionFn(705);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action705::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce235<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", ";" => ActionFn(706);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action706::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(2, 98)
}
pub(crate) fn ___reduce236<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", ";" => ActionFn(707);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action707::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(3, 98)
}
pub(crate) fn ___reduce237<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", ";" => ActionFn(708);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action708::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(3, 98)
}
pub(crate) fn ___reduce238<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", ";" => ActionFn(709);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action709::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce239<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(710);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action710::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce240<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(711);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action711::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce241<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(712);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action712::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce242<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(713);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant66(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action713::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(8, 98)
}
pub(crate) fn ___reduce243<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(714);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action714::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce244<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(715);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action715::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce245<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(716);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action716::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce246<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(717);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action717::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce247<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(718);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant51(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action718::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce248<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(719);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action719::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce249<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(720);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action720::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce250<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(721);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action721::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce251<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(722);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant66(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant51(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action722::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce252<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(723);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action723::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce253<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(724);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action724::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce254<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(725);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action725::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce255<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(726);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action726::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce256<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(727);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action727::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce257<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(728);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action728::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce258<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(729);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action729::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce259<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(730);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant66(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action730::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce260<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(731);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action731::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce261<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(732);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action732::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce262<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(733);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action733::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce263<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(734);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant66(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant52(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action734::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce264<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(735);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action735::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce265<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(736);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action736::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce266<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(737);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action737::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce267<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", ";", GrammarItem+ => ActionFn(738);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant66(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action738::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(3, 98)
}
pub(crate) fn ___reduce268<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", ";", GrammarItem+ => ActionFn(739);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant66(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action739::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce269<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", ";", GrammarItem+ => ActionFn(740);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant66(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action740::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce270<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", ";", GrammarItem+ => ActionFn(741);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action741::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce271<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(742);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action742::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce272<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(743);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action743::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce273<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(744);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action744::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce274<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(745);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant52(___symbols);
let ___sym5 = ___pop_Variant51(___symbols);
let ___sym4 = ___pop_Variant57(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action745::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(8, 98)
}
pub(crate) fn ___reduce275<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(746);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action746::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce276<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(747);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action747::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce277<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(748);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action748::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce278<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(749);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant51(___symbols);
let ___sym4 = ___pop_Variant57(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action749::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce279<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(750);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action750::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce280<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(751);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action751::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce281<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(752);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action752::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce282<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(753);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action753::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce283<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarParameters, ";" => ActionFn(754);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action754::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce284<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarParameters, ";" => ActionFn(755);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action755::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce285<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarParameters, ";" => ActionFn(756);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action756::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce286<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarParameters, ";" => ActionFn(757);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action757::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce287<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(758);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action758::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce288<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(759);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action759::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce289<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(760);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action760::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce290<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(761);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant57(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action761::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce291<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarTypeParameters, ";" => ActionFn(762);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action762::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce292<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarTypeParameters, ";" => ActionFn(763);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action763::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce293<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarTypeParameters, ";" => ActionFn(764);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action764::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce294<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarTypeParameters, ";" => ActionFn(765);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant57(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action765::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce295<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarWhereClauses, ";" => ActionFn(766);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action766::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce296<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarWhereClauses, ";" => ActionFn(767);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action767::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce297<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarWhereClauses, ";" => ActionFn(768);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action768::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce298<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarWhereClauses, ";" => ActionFn(769);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action769::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce299<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", ";" => ActionFn(770);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action770::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(3, 98)
}
pub(crate) fn ___reduce300<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", ";" => ActionFn(771);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action771::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce301<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", ";" => ActionFn(772);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action772::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce302<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", ";" => ActionFn(773);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action773::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce303<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(774);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action774::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce304<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(775);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant66(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action775::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(8, 98)
}
pub(crate) fn ___reduce305<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(776);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant66(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action776::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(8, 98)
}
pub(crate) fn ___reduce306<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(777);
assert!(___symbols.len() >= 9);
let ___sym8 = ___pop_Variant66(___symbols);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant52(___symbols);
let ___sym5 = ___pop_Variant51(___symbols);
let ___sym4 = ___pop_Variant57(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym8.2.clone();
let ___nt = super::___action777::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(9, 98)
}
pub(crate) fn ___reduce307<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(778);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action778::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce308<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(779);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action779::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce309<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(780);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action780::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce310<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(781);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant66(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant51(___symbols);
let ___sym4 = ___pop_Variant57(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action781::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(8, 98)
}
pub(crate) fn ___reduce311<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(782);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action782::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce312<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(783);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action783::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce313<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(784);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action784::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce314<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(785);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant66(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action785::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(8, 98)
}
pub(crate) fn ___reduce315<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(786);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant51(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action786::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce316<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(787);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action787::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce317<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(788);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant51(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action788::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce318<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(789);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant51(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action789::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce319<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(790);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action790::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce320<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(791);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action791::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce321<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(792);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action792::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce322<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(793);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant66(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant52(___symbols);
let ___sym4 = ___pop_Variant57(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action793::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(8, 98)
}
pub(crate) fn ___reduce323<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(794);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action794::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce324<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(795);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action795::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce325<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(796);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action796::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce326<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(797);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant57(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action797::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce327<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(798);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant52(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action798::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce328<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(799);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action799::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce329<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(800);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant52(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action800::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce330<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(801);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant66(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant52(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action801::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(7, 98)
}
pub(crate) fn ___reduce331<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Annotation+, "grammar", ";", GrammarItem+ => ActionFn(802);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant66(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action802::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(4, 98)
}
pub(crate) fn ___reduce332<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Annotation+, "grammar", ";", GrammarItem+ => ActionFn(803);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action803::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce333<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Annotation+, "grammar", ";", GrammarItem+ => ActionFn(804);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant66(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant45(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action804::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 98)
}
pub(crate) fn ___reduce334<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Annotation+, "grammar", ";", GrammarItem+ => ActionFn(805);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant66(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant45(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action805::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(6, 98)
}
pub(crate) fn ___reduce335<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem = Use => ActionFn(24);
let ___sym0 = ___pop_Variant63(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action24::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 99)
}
pub(crate) fn ___reduce336<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem = MatchToken => ActionFn(25);
let ___sym0 = ___pop_Variant63(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action25::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 99)
}
pub(crate) fn ___reduce337<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem = ExternToken => ActionFn(26);
let ___sym0 = ___pop_Variant63(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action26::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 99)
}
pub(crate) fn ___reduce338<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem = Nonterminal => ActionFn(27);
let ___sym0 = ___pop_Variant63(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action27::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 99)
}
pub(crate) fn ___reduce339<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem* =  => ActionFn(177);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action177::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(0, 100)
}
pub(crate) fn ___reduce340<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem* = GrammarItem+ => ActionFn(178);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action178::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(1, 100)
}
pub(crate) fn ___reduce341<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem+ = GrammarItem => ActionFn(199);
let ___sym0 = ___pop_Variant63(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action199::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(1, 101)
}
pub(crate) fn ___reduce342<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem+ = GrammarItem+, GrammarItem => ActionFn(200);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant63(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action200::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(2, 101)
}
pub(crate) fn ___reduce343<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameter = Id, ":", TypeRef => ActionFn(23);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant3(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action23::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant16(___nt), ___end));
(3, 102)
}
pub(crate) fn ___reduce344<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameter? = GrammarParameter => ActionFn(229);
let ___sym0 = ___pop_Variant16(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action229::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(1, 103)
}
pub(crate) fn ___reduce345<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameter? =  => ActionFn(230);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action230::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(0, 103)
}
pub(crate) fn ___reduce346<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameters = "(", Comma<GrammarParameter>, ")" => ActionFn(22);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant51(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action22::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant51(___nt), ___end));
(3, 104)
}
pub(crate) fn ___reduce347<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameters? = GrammarParameters => ActionFn(181);
let ___sym0 = ___pop_Variant51(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action181::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant68(___nt), ___end));
(1, 105)
}
pub(crate) fn ___reduce348<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameters? =  => ActionFn(182);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action182::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant68(___nt), ___end));
(0, 105)
}
pub(crate) fn ___reduce349<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarTypeParameters = "<", Comma<TypeParameter>, ">" => ActionFn(7);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant57(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action7::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(3, 106)
}
pub(crate) fn ___reduce350<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarTypeParameters? = GrammarTypeParameters => ActionFn(183);
let ___sym0 = ___pop_Variant57(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action183::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(1, 107)
}
pub(crate) fn ___reduce351<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarTypeParameters? =  => ActionFn(184);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action184::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(0, 107)
}
pub(crate) fn ___reduce352<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause = Lifetime, ":", Plus<Lifetime> => ActionFn(11);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant83(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action11::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant18(___nt), ___end));
(3, 108)
}
pub(crate) fn ___reduce353<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause = "for", "<", Comma<TypeParameter>, ">", TypeRef, ":", TypeBounds => ActionFn(486);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant84(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant3(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action486::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant18(___nt), ___end));
(7, 108)
}
pub(crate) fn ___reduce354<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause = TypeRef, ":", TypeBounds => ActionFn(487);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant84(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action487::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant18(___nt), ___end));
(3, 108)
}
pub(crate) fn ___reduce355<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause? = GrammarWhereClause => ActionFn(206);
let ___sym0 = ___pop_Variant18(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action206::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(1, 109)
}
pub(crate) fn ___reduce356<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause? =  => ActionFn(207);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action207::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(0, 109)
}
pub(crate) fn ___reduce357<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClauses = "where", Comma<GrammarWhereClause> => ActionFn(10);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant52(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action10::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant52(___nt), ___end));
(2, 110)
}
pub(crate) fn ___reduce358<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClauses? = GrammarWhereClauses => ActionFn(179);
let ___sym0 = ___pop_Variant52(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action179::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant71(___nt), ___end));
(1, 111)
}
pub(crate) fn ___reduce359<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClauses? =  => ActionFn(180);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action180::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant71(___nt), ___end));
(0, 111)
}
pub(crate) fn ___reduce360<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Id = "Id" => ActionFn(111);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action111::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(1, 112)
}
pub(crate) fn ___reduce361<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Id = "MacroId" => ActionFn(112);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action112::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(1, 112)
}
pub(crate) fn ___reduce362<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lifetime = "Lifetime" => ActionFn(114);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action114::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant22(___nt), ___end));
(1, 113)
}
pub(crate) fn ___reduce363<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lifetime? = Lifetime => ActionFn(140);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action140::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant72(___nt), ___end));
(1, 114)
}
pub(crate) fn ___reduce364<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lifetime? =  => ActionFn(141);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action141::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant72(___nt), ___end));
(0, 114)
}
pub(crate) fn ___reduce365<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MacroId = "MacroId" => ActionFn(109);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action109::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant26(___nt), ___end));
(1, 115)
}
pub(crate) fn ___reduce366<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchContents = Comma<MatchItem> => ActionFn(87);
let ___sym0 = ___pop_Variant53(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action87::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant73(___nt), ___end));
(1, 116)
}
pub(crate) fn ___reduce367<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchItem = "_" => ActionFn(436);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action436::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant24(___nt), ___end));
(1, 117)
}
pub(crate) fn ___reduce368<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchItem = MatchSymbol => ActionFn(437);
let ___sym0 = ___pop_Variant76(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action437::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant24(___nt), ___end));
(1, 117)
}
pub(crate) fn ___reduce370<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchItem? = MatchItem => ActionFn(258);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action258::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant74(___nt), ___end));
(1, 118)
}
pub(crate) fn ___reduce371<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchItem? =  => ActionFn(259);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action259::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant74(___nt), ___end));
(0, 118)
}
pub(crate) fn ___reduce372<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchMapping = Terminal => ActionFn(92);
let ___sym0 = ___pop_Variant85(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action92::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant75(___nt), ___end));
(1, 119)
}
pub(crate) fn ___reduce373<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchMapping = "{", "}" => ActionFn(93);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action93::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant75(___nt), ___end));
(2, 119)
}
pub(crate) fn ___reduce374<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchSymbol = QuotedLiteral => ActionFn(91);
let ___sym0 = ___pop_Variant76(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action91::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant76(___nt), ___end));
(1, 120)
}
pub(crate) fn ___reduce375<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchToken = MatchTokenInt => ActionFn(84);
let ___sym0 = ___pop_Variant77(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action84::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 121)
}
pub(crate) fn ___reduce376<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchTokenInt = MatchTokenInt, "else", "{", MatchContents, "}" => ActionFn(85);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant73(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant77(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action85::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant77(___nt), ___end));
(5, 122)
}
pub(crate) fn ___reduce377<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchTokenInt = "match", "{", MatchContents, "}" => ActionFn(439);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant73(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action439::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant77(___nt), ___end));
(4, 122)
}
pub(crate) fn ___reduce378<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Nonterminal = Visibility, NonterminalName, ":", TypeRef, "=", Alternatives => ActionFn(466);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant43(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant3(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant78(___symbols);
let ___sym0 = ___pop_Variant95(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action466::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(6, 123)
}
pub(crate) fn ___reduce379<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Nonterminal = Annotation+, Visibility, NonterminalName, ":", TypeRef, "=", Alternatives => ActionFn(467);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant43(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant3(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant78(___symbols);
let ___sym1 = ___pop_Variant95(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action467::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(7, 123)
}
pub(crate) fn ___reduce380<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Nonterminal = Visibility, NonterminalName, "=", Alternatives => ActionFn(468);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant43(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant78(___symbols);
let ___sym0 = ___pop_Variant95(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action468::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(4, 123)
}
pub(crate) fn ___reduce381<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Nonterminal = Annotation+, Visibility, NonterminalName, "=", Alternatives => ActionFn(469);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant43(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant78(___symbols);
let ___sym1 = ___pop_Variant95(___symbols);
let ___sym0 = ___pop_Variant45(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action469::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(5, 123)
}
pub(crate) fn ___reduce382<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NonterminalName = MacroId, "<", Comma<NotMacroId>, ">" => ActionFn(36);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant54(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action36::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant78(___nt), ___end));
(4, 124)
}
pub(crate) fn ___reduce383<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NonterminalName = NotMacroId => ActionFn(37);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action37::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant78(___nt), ___end));
(1, 124)
}
pub(crate) fn ___reduce384<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NonterminalName = "Escape" => ActionFn(38);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action38::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant78(___nt), ___end));
(1, 124)
}
pub(crate) fn ___reduce385<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NotMacroId = "Id" => ActionFn(110);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action110::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant26(___nt), ___end));
(1, 125)
}
pub(crate) fn ___reduce386<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NotMacroId? = NotMacroId => ActionFn(234);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action234::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant79(___nt), ___end));
(1, 126)
}
pub(crate) fn ___reduce387<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NotMacroId? =  => ActionFn(235);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action235::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant79(___nt), ___end));
(0, 126)
}
pub(crate) fn ___reduce388<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = "::", Id => ActionFn(353);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant20(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action353::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant80(___nt), ___end));
(2, 127)
}
pub(crate) fn ___reduce389<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = "::", (<Id> "::")+, Id => ActionFn(354);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant20(___symbols);
let ___sym1 = ___pop_Variant21(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action354::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant80(___nt), ___end));
(3, 127)
}
pub(crate) fn ___reduce390<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = Id => ActionFn(355);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action355::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant80(___nt), ___end));
(1, 127)
}
pub(crate) fn ___reduce391<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = (<Id> "::")+, Id => ActionFn(356);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant20(___symbols);
let ___sym0 = ___pop_Variant21(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action356::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant80(___nt), ___end));
(2, 127)
}
pub(crate) fn ___reduce392<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Pattern = PatternKind => ActionFn(442);
let ___sym0 = ___pop_Variant82(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action442::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant28(___nt), ___end));
(1, 128)
}
pub(crate) fn ___reduce393<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Pattern? = Pattern => ActionFn(268);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action268::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant81(___nt), ___end));
(1, 129)
}
pub(crate) fn ___reduce394<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Pattern? =  => ActionFn(269);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action269::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant81(___nt), ___end));
(0, 129)
}
pub(crate) fn ___reduce395<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "(", Comma<Pattern>, ")" => ActionFn(98);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action98::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(4, 130)
}
pub(crate) fn ___reduce396<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", FieldPattern, "}" => ActionFn(482);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant14(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action482::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(4, 130)
}
pub(crate) fn ___reduce397<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", "}" => ActionFn(483);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action483::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(3, 130)
}
pub(crate) fn ___reduce398<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", (<FieldPattern> ",")+, FieldPattern, "}" => ActionFn(484);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant14(___symbols);
let ___sym2 = ___pop_Variant15(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action484::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(5, 130)
}
pub(crate) fn ___reduce399<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", (<FieldPattern> ",")+, "}" => ActionFn(485);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant15(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action485::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(4, 130)
}
pub(crate) fn ___reduce400<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", "..", "}" => ActionFn(341);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action341::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(4, 130)
}
pub(crate) fn ___reduce401<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", (<FieldPattern> ",")+, "..", "}" => ActionFn(342);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant15(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action342::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(5, 130)
}
pub(crate) fn ___reduce402<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = "_" => ActionFn(101);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action101::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(1, 130)
}
pub(crate) fn ___reduce403<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = ".." => ActionFn(102);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action102::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(1, 130)
}
pub(crate) fn ___reduce404<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = "<", TypeRef, ">" => ActionFn(103);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action103::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(3, 130)
}
pub(crate) fn ___reduce405<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = "(", Comma<Pattern>, ")" => ActionFn(104);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant55(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action104::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(3, 130)
}
pub(crate) fn ___reduce406<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = "CharLiteral" => ActionFn(105);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action105::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(1, 130)
}
pub(crate) fn ___reduce407<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path => ActionFn(106);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action106::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(1, 130)
}
pub(crate) fn ___reduce408<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = StringConstant => ActionFn(107);
let ___sym0 = ___pop_Variant87(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action107::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(1, 130)
}
pub(crate) fn ___reduce409<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<Lifetime> = Lifetime => ActionFn(568);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action568::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant83(___nt), ___end));
(1, 131)
}
pub(crate) fn ___reduce410<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<Lifetime> =  => ActionFn(569);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action569::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant83(___nt), ___end));
(0, 131)
}
pub(crate) fn ___reduce411<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<Lifetime> = (<Lifetime> "+")+, Lifetime => ActionFn(570);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action570::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant83(___nt), ___end));
(2, 131)
}
pub(crate) fn ___reduce412<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<Lifetime> = (<Lifetime> "+")+ => ActionFn(571);
let ___sym0 = ___pop_Variant23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action571::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant83(___nt), ___end));
(1, 131)
}
pub(crate) fn ___reduce413<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<TypeBound> = TypeBound => ActionFn(658);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action658::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(1, 132)
}
pub(crate) fn ___reduce414<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<TypeBound> =  => ActionFn(659);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action659::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(0, 132)
}
pub(crate) fn ___reduce415<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<TypeBound> = (<TypeBound> "+")+, TypeBound => ActionFn(660);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant32(___symbols);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action660::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(2, 132)
}
pub(crate) fn ___reduce416<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<TypeBound> = (<TypeBound> "+")+ => ActionFn(661);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action661::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(1, 132)
}
pub(crate) fn ___reduce417<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// QuotedLiteral = StringLiteral => ActionFn(118);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action118::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant76(___nt), ___end));
(1, 133)
}
pub(crate) fn ___reduce418<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// QuotedLiteral = RegexLiteral => ActionFn(119);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action119::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant76(___nt), ___end));
(1, 133)
}
pub(crate) fn ___reduce419<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// QuotedTerminal = QuotedLiteral => ActionFn(117);
let ___sym0 = ___pop_Variant76(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action117::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant85(___nt), ___end));
(1, 134)
}
pub(crate) fn ___reduce420<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// RegexLiteral = "RegexLiteral" => ActionFn(122);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action122::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(1, 135)
}
pub(crate) fn ___reduce421<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// RepeatOp = "+" => ActionFn(58);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action58::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(1, 136)
}
pub(crate) fn ___reduce422<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// RepeatOp = "*" => ActionFn(59);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action59::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(1, 136)
}
pub(crate) fn ___reduce423<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// RepeatOp = "?" => ActionFn(60);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action60::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(1, 136)
}
pub(crate) fn ___reduce424<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute = "#![...]" => ActionFn(123);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action123::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant87(___nt), ___end));
(1, 137)
}
pub(crate) fn ___reduce425<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute* =  => ActionFn(191);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action191::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(0, 138)
}
pub(crate) fn ___reduce426<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute* = ShebangAttribute+ => ActionFn(192);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action192::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(1, 138)
}
pub(crate) fn ___reduce427<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute+ = ShebangAttribute => ActionFn(193);
let ___sym0 = ___pop_Variant87(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action193::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(1, 139)
}
pub(crate) fn ___reduce428<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute+ = ShebangAttribute+, ShebangAttribute => ActionFn(194);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant87(___symbols);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action194::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(2, 139)
}
pub(crate) fn ___reduce431<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol = "<", "mut", Id, ":", Symbol0, ">" => ActionFn(443);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant30(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant20(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action443::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(6, 142)
}
pub(crate) fn ___reduce432<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol = "<", Id, ":", Symbol0, ">" => ActionFn(444);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant30(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant20(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action444::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(5, 142)
}
pub(crate) fn ___reduce433<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol = "<", Symbol0, ">" => ActionFn(445);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant30(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action445::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(3, 142)
}
pub(crate) fn ___reduce434<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol = Symbol0 => ActionFn(55);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action55::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(1, 142)
}
pub(crate) fn ___reduce435<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol* =  => ActionFn(145);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action145::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(0, 143)
}
pub(crate) fn ___reduce436<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol* = Symbol+ => ActionFn(146);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action146::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(1, 143)
}
pub(crate) fn ___reduce437<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol+ = Symbol => ActionFn(152);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action152::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(1, 144)
}
pub(crate) fn ___reduce438<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol+ = Symbol+, Symbol => ActionFn(153);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant30(___symbols);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action153::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(2, 144)
}
pub(crate) fn ___reduce439<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol0 = Symbol1 => ActionFn(56);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action56::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(1, 145)
}
pub(crate) fn ___reduce440<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol0 = Symbol0, RepeatOp => ActionFn(446);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant86(___symbols);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action446::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(2, 145)
}
pub(crate) fn ___reduce441<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol1 = SymbolKind1 => ActionFn(447);
let ___sym0 = ___pop_Variant90(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action447::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(1, 146)
}
pub(crate) fn ___reduce442<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol? = Symbol => ActionFn(244);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action244::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant89(___nt), ___end));
(1, 147)
}
pub(crate) fn ___reduce443<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol? =  => ActionFn(245);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action245::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant89(___nt), ___end));
(0, 147)
}
pub(crate) fn ___reduce444<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = MacroId, "<", Comma<Symbol>, ">" => ActionFn(62);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action62::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(4, 148)
}
pub(crate) fn ___reduce445<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = QuotedTerminal => ActionFn(63);
let ___sym0 = ___pop_Variant85(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action63::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 148)
}
pub(crate) fn ___reduce446<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "Id" => ActionFn(64);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action64::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 148)
}
pub(crate) fn ___reduce447<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = Escape => ActionFn(65);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action65::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 148)
}
pub(crate) fn ___reduce448<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "(", ExprSymbol, ")" => ActionFn(66);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant62(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action66::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(3, 148)
}
pub(crate) fn ___reduce449<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "@L" => ActionFn(67);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action67::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 148)
}
pub(crate) fn ___reduce450<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "@R" => ActionFn(68);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action68::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 148)
}
pub(crate) fn ___reduce451<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "!" => ActionFn(69);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action69::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 148)
}
pub(crate) fn ___reduce452<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Terminal = QuotedTerminal => ActionFn(115);
let ___sym0 = ___pop_Variant85(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action115::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant85(___nt), ___end));
(1, 149)
}
pub(crate) fn ___reduce453<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Terminal = "Id" => ActionFn(116);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action116::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant85(___nt), ___end));
(1, 149)
}
pub(crate) fn ___reduce454<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartGrammar", Grammar => ActionFn(1);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant65(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action1::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant91(___nt), ___end));
(2, 150)
}
pub(crate) fn ___reduce455<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartPattern", Pattern => ActionFn(2);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant28(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action2::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant91(___nt), ___end));
(2, 150)
}
pub(crate) fn ___reduce456<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartMatchMapping", MatchMapping => ActionFn(3);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant75(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action3::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant91(___nt), ___end));
(2, 150)
}
pub(crate) fn ___reduce457<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartTypeRef", TypeRef => ActionFn(4);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action4::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant91(___nt), ___end));
(2, 150)
}
pub(crate) fn ___reduce458<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartGrammarWhereClauses", GrammarWhereClauses => ActionFn(5);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant52(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action5::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant91(___nt), ___end));
(2, 150)
}
pub(crate) fn ___reduce459<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Lifetime => ActionFn(16);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action16::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(1, 151)
}
pub(crate) fn ___reduce460<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = "for", "<", Comma<TypeParameter>, ">", Path, "(", Comma<TypeRef>, ")", "->", TypeRef => ActionFn(488);
assert!(___symbols.len() >= 10);
let ___sym9 = ___pop_Variant3(___symbols);
let ___sym8 = ___pop_Variant0(___symbols);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant58(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant80(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym9.2.clone();
let ___nt = super::___action488::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8, ___sym9);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(10, 151)
}
pub(crate) fn ___reduce461<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Path, "(", Comma<TypeRef>, ")", "->", TypeRef => ActionFn(489);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant3(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant58(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action489::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(6, 151)
}
pub(crate) fn ___reduce462<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = "for", "<", Comma<TypeParameter>, ">", Path, "(", Comma<TypeRef>, ")" => ActionFn(490);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant58(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant80(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action490::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(8, 151)
}
pub(crate) fn ___reduce463<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Path, "(", Comma<TypeRef>, ")" => ActionFn(491);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant58(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action491::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(4, 151)
}
pub(crate) fn ___reduce464<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = "for", "<", Comma<TypeParameter>, ">", Path, "<", Comma<TypeBoundParameter>, ">" => ActionFn(492);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant5(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant80(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action492::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(8, 151)
}
pub(crate) fn ___reduce465<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Path, "<", Comma<TypeBoundParameter>, ">" => ActionFn(493);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant5(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action493::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(4, 151)
}
pub(crate) fn ___reduce466<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = "for", "<", Comma<TypeParameter>, ">", Path => ActionFn(494);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant80(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant57(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action494::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(5, 151)
}
pub(crate) fn ___reduce467<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Path => ActionFn(495);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action495::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(1, 151)
}
pub(crate) fn ___reduce468<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound? = TypeBound => ActionFn(214);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action214::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant92(___nt), ___end));
(1, 152)
}
pub(crate) fn ___reduce469<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound? =  => ActionFn(215);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action215::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant92(___nt), ___end));
(0, 152)
}
pub(crate) fn ___reduce470<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter = Lifetime => ActionFn(19);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action19::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant34(___nt), ___end));
(1, 153)
}
pub(crate) fn ___reduce471<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter = TypeRef => ActionFn(20);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action20::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant34(___nt), ___end));
(1, 153)
}
pub(crate) fn ___reduce472<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter = Id, "=", TypeRef => ActionFn(21);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant3(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action21::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant34(___nt), ___end));
(3, 153)
}
pub(crate) fn ___reduce473<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter? = TypeBoundParameter => ActionFn(224);
let ___sym0 = ___pop_Variant34(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action224::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant93(___nt), ___end));
(1, 154)
}
pub(crate) fn ___reduce474<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter? =  => ActionFn(225);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action225::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant93(___nt), ___end));
(0, 154)
}
pub(crate) fn ___reduce475<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBounds = Plus<TypeBound> => ActionFn(15);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action15::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(1, 155)
}
pub(crate) fn ___reduce476<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeParameter = Lifetime => ActionFn(8);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action8::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(1, 156)
}
pub(crate) fn ___reduce477<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeParameter = Id => ActionFn(9);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action9::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(1, 156)
}
pub(crate) fn ___reduce478<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeParameter? = TypeParameter => ActionFn(201);
let ___sym0 = ___pop_Variant36(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action201::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(1, 157)
}
pub(crate) fn ___reduce479<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeParameter? =  => ActionFn(202);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action202::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(0, 157)
}
pub(crate) fn ___reduce480<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "(", Comma<TypeRef>, ")" => ActionFn(70);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant58(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action70::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 158)
}
pub(crate) fn ___reduce481<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "[", TypeRef, "]" => ActionFn(71);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action71::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 158)
}
pub(crate) fn ___reduce482<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "#", Symbol, "#" => ActionFn(72);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant30(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action72::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 158)
}
pub(crate) fn ___reduce483<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "&", Lifetime, "mut", TypeRef => ActionFn(572);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant3(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action572::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(4, 158)
}
pub(crate) fn ___reduce484<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "&", "mut", TypeRef => ActionFn(573);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant3(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action573::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 158)
}
pub(crate) fn ___reduce485<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "&", Lifetime, TypeRef => ActionFn(574);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant3(___symbols);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action574::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 158)
}
pub(crate) fn ___reduce486<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "&", TypeRef => ActionFn(575);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action575::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 158)
}
pub(crate) fn ___reduce487<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = Path, "<", Comma<TypeRefOrLifetime>, ">" => ActionFn(74);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant58(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action74::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(4, 158)
}
pub(crate) fn ___reduce488<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = Path => ActionFn(75);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action75::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(1, 158)
}
pub(crate) fn ___reduce489<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", Path, "<", Comma<TypeRefOrLifetime>, ">" => ActionFn(76);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant58(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant80(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action76::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(5, 158)
}
pub(crate) fn ___reduce490<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", Path => ActionFn(77);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant80(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action77::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 158)
}
pub(crate) fn ___reduce491<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", "for", "<", Comma<TypeParameter>, ">", Path, "(", Comma<TypeRef>, ")", "->", TypeRef => ActionFn(496);
assert!(___symbols.len() >= 11);
let ___sym10 = ___pop_Variant3(___symbols);
let ___sym9 = ___pop_Variant0(___symbols);
let ___sym8 = ___pop_Variant0(___symbols);
let ___sym7 = ___pop_Variant58(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant80(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym10.2.clone();
let ___nt = super::___action496::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8, ___sym9, ___sym10);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(11, 158)
}
pub(crate) fn ___reduce492<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", Path, "(", Comma<TypeRef>, ")", "->", TypeRef => ActionFn(497);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant3(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant58(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant80(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action497::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(7, 158)
}
pub(crate) fn ___reduce493<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", "for", "<", Comma<TypeParameter>, ">", Path, "(", Comma<TypeRef>, ")" => ActionFn(498);
assert!(___symbols.len() >= 9);
let ___sym8 = ___pop_Variant0(___symbols);
let ___sym7 = ___pop_Variant58(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant80(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant57(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym8.2.clone();
let ___nt = super::___action498::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(9, 158)
}
pub(crate) fn ___reduce494<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", Path, "(", Comma<TypeRef>, ")" => ActionFn(499);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant58(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant80(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action499::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(5, 158)
}
pub(crate) fn ___reduce495<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef? = TypeRef => ActionFn(219);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action219::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(1, 159)
}
pub(crate) fn ___reduce496<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef? =  => ActionFn(220);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action220::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(0, 159)
}
pub(crate) fn ___reduce497<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRefOrLifetime = TypeRef => ActionFn(79);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action79::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(1, 160)
}
pub(crate) fn ___reduce498<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRefOrLifetime = Lifetime => ActionFn(80);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action80::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(1, 160)
}
pub(crate) fn ___reduce499<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRefOrLifetime? = TypeRefOrLifetime => ActionFn(249);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action249::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(1, 161)
}
pub(crate) fn ___reduce500<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRefOrLifetime? =  => ActionFn(250);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action250::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(0, 161)
}
pub(crate) fn ___reduce501<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use = "use", ";" => ActionFn(28);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action28::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(2, 162)
}
pub(crate) fn ___reduce502<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use* =  => ActionFn(189);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action189::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(0, 163)
}
pub(crate) fn ___reduce503<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use* = Use+ => ActionFn(190);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action190::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(1, 163)
}
pub(crate) fn ___reduce504<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use+ = Use => ActionFn(195);
let ___sym0 = ___pop_Variant63(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action195::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(1, 164)
}
pub(crate) fn ___reduce505<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use+ = Use+, Use => ActionFn(196);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant63(___symbols);
let ___sym0 = ___pop_Variant66(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action196::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(2, 164)
}
pub(crate) fn ___reduce506<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Visibility = "pub", "(", Path, ")" => ActionFn(29);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant80(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action29::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(4, 165)
}
pub(crate) fn ___reduce507<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Visibility = "pub", "(", "in", Path, ")" => ActionFn(30);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant80(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action30::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(5, 165)
}
pub(crate) fn ___reduce508<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Visibility = "pub" => ActionFn(31);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action31::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(1, 165)
}
pub(crate) fn ___reduce509<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Visibility =  => ActionFn(328);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let ___end = ___start.clone();
let ___nt = super::___action328::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(0, 165)
}
}
pub use self::___parse___Top::TopParser;

#[allow(unused_variables)]
fn ___action0<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Top, usize),
) -> Top
{
___0
}

#[allow(unused_variables)]
fn ___action1<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Grammar, usize),
) -> Top
{
Top::Grammar(___0)
}

#[allow(unused_variables)]
fn ___action2<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Pattern<TypeRef>, usize),
) -> Top
{
Top::Pattern(___0)
}

#[allow(unused_variables)]
fn ___action3<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, MatchMapping, usize),
) -> Top
{
Top::MatchMapping(___0)
}

#[allow(unused_variables)]
fn ___action4<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
) -> Top
{
Top::TypeRef(___0)
}

#[allow(unused_variables)]
fn ___action5<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<WhereClause<TypeRef>>, usize),
) -> Top
{
Top::GrammarWhereClauses(___0)
}

#[allow(unused_variables)]
fn ___action6<
    'input,
>(
text: &'input str,
(_, module_attributes, _): (usize, alloc::vec::Vec<String>, usize),
(_, uses, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
(_, annotations, _): (usize, alloc::vec::Vec<Annotation>, usize),
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
(_, tps, _): (usize, core::option::Option<Vec<TypeParameter>>, usize),
(_, parameters, _): (usize, core::option::Option<Vec<Parameter>>, usize),
(_, where_clauses, _): (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, items, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
{
        Grammar { prefix: format!("__"), // adjusted by `parse_grammar`
                  span: Span(lo, hi),
                  type_parameters: tps.unwrap_or(vec![]),
                  parameters: parameters.unwrap_or(vec![]),
                  where_clauses: where_clauses.unwrap_or(vec![]),
                  items: uses.into_iter().chain(items).collect(),
                  annotations,
                  module_attributes }
    }
}

#[allow(unused_variables)]
fn ___action7<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<TypeParameter>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<TypeParameter>
{
___0
}

#[allow(unused_variables)]
fn ___action8<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Lifetime, usize),
) -> TypeParameter
{
TypeParameter::Lifetime(l)
}

#[allow(unused_variables)]
fn ___action9<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Atom, usize),
) -> TypeParameter
{
TypeParameter::Id(l)
}

#[allow(unused_variables)]
fn ___action10<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
___0
}

#[allow(unused_variables)]
fn ___action11<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Lifetime, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, bounds, _): (usize, Vec<Lifetime>, usize),
) -> WhereClause<TypeRef>
{
WhereClause::Lifetime { lifetime: l, bounds }
}

#[allow(unused_variables)]
fn ___action12<
    'input,
>(
text: &'input str,
(_, f, _): (usize, Vec<TypeParameter>, usize),
(_, ty, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, bounds, _): (usize, Vec<TypeBound<TypeRef>>, usize),
) -> WhereClause<TypeRef>
{
WhereClause::Type { forall: f, ty, bounds }
}

#[allow(unused_variables)]
fn ___action13<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<TypeParameter>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<TypeParameter>
{
___0
}

#[allow(unused_variables)]
fn ___action14<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, (), usize),
) -> Vec<TypeParameter>
{
vec![]
}

#[allow(unused_variables)]
fn ___action15<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
___0
}

#[allow(unused_variables)]
fn ___action16<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Lifetime, usize),
) -> TypeBound<TypeRef>
{
TypeBound::Lifetime(l)
}

#[allow(unused_variables)]
fn ___action17<
    'input,
>(
text: &'input str,
(_, f, _): (usize, Vec<TypeParameter>, usize),
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, params, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ret, _): (usize, core::option::Option<TypeRef>, usize),
) -> TypeBound<TypeRef>
{
TypeBound::Fn { forall: f, path: p, parameters: params, ret }
}

#[allow(unused_variables)]
fn ___action18<
    'input,
>(
text: &'input str,
(_, f, _): (usize, Vec<TypeParameter>, usize),
(_, p, _): (usize, Path, usize),
(_, params, _): (usize, core::option::Option<Vec<TypeBoundParameter<TypeRef>>>, usize),
) -> TypeBound<TypeRef>
{
TypeBound::Trait { forall: f, path: p, parameters: params.unwrap_or(vec![]) }
}

#[allow(unused_variables)]
fn ___action19<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Lifetime, usize),
) -> TypeBoundParameter<TypeRef>
{
TypeBoundParameter::Lifetime(l)
}

#[allow(unused_variables)]
fn ___action20<
    'input,
>(
text: &'input str,
(_, ty, _): (usize, TypeRef, usize),
) -> TypeBoundParameter<TypeRef>
{
TypeBoundParameter::TypeParameter(ty)
}

#[allow(unused_variables)]
fn ___action21<
    'input,
>(
text: &'input str,
(_, id, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ty, _): (usize, TypeRef, usize),
) -> TypeBoundParameter<TypeRef>
{
TypeBoundParameter::Associated(id, ty)
}

#[allow(unused_variables)]
fn ___action22<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<Parameter>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<Parameter>
{
___0
}

#[allow(unused_variables)]
fn ___action23<
    'input,
>(
text: &'input str,
(_, id, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ty, _): (usize, TypeRef, usize),
) -> Parameter
{
Parameter { name: id, ty }
}

#[allow(unused_variables)]
fn ___action24<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> GrammarItem
{
___0
}

#[allow(unused_variables)]
fn ___action25<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> GrammarItem
{
___0
}

#[allow(unused_variables)]
fn ___action26<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> GrammarItem
{
___0
}

#[allow(unused_variables)]
fn ___action27<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> GrammarItem
{
___0
}

#[allow(unused_variables)]
fn ___action28<
    'input,
>(
text: &'input str,
(_, u, _): (usize, &'input str, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> GrammarItem
{
GrammarItem::Use(strip(u).to_string())
}

#[allow(unused_variables)]
fn ___action29<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Visibility
{
Visibility::Pub(Some(p))
}

#[allow(unused_variables)]
fn ___action30<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Visibility
{
Visibility::PubIn(p)
}

#[allow(unused_variables)]
fn ___action31<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> Visibility
{
Visibility::Pub(None)
}

#[allow(unused_variables)]
fn ___action32<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, (), usize),
) -> Visibility
{
Visibility::Priv
}

#[allow(unused_variables)]
fn ___action33<
    'input,
>(
text: &'input str,
(_, annotations, _): (usize, alloc::vec::Vec<Annotation>, usize),
(_, v, _): (usize, Visibility, usize),
(_, lo, _): (usize, usize, usize),
(_, n, _): (usize, (NonterminalString, Vec<NonterminalString>), usize),
(_, hi, _): (usize, usize, usize),
(_, t, _): (usize, core::option::Option<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a, _): (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
{
        GrammarItem::Nonterminal(NonterminalData { visibility: v,
                                                   span: Span(lo, hi),
                                                   name: n.0,
                                                   annotations,
                                                   args: n.1,
                                                   type_decl: t,
                                                   alternatives: a })
    }
}

#[allow(unused_variables)]
fn ___action34<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, name, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, value, _): (usize, &'input str, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> (Atom, String)
{
(name, value.into())
}

#[allow(unused_variables)]
fn ___action35<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, lo, _): (usize, usize, usize),
(_, id, _): (usize, Atom, usize),
(_, arg, _): (usize, core::option::Option<(Atom, String)>, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Annotation
{
{
        Annotation { id_span: Span(lo, hi), id, arg }
    }
}

#[allow(unused_variables)]
fn ___action36<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, NonterminalString, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ___1, _): (usize, Vec<NonterminalString>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> (NonterminalString, Vec<NonterminalString>)
{
(___0, ___1)
}

#[allow(unused_variables)]
fn ___action37<
    'input,
>(
text: &'input str,
(_, n, _): (usize, NonterminalString, usize),
) -> (NonterminalString, Vec<NonterminalString>)
{
(n, vec![])
}

#[allow(unused_variables)]
fn ___action38<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> (NonterminalString, Vec<NonterminalString>)
{
(NonterminalString(Atom::from(___0)), vec![])
}

#[allow(unused_variables)]
fn ___action39<
    'input,
>(
text: &'input str,
(_, a, _): (usize, Alternative, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<Alternative>
{
vec![a]
}

#[allow(unused_variables)]
fn ___action40<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<Alternative>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, core::option::Option<Tok<'input>>, usize),
) -> Vec<Alternative>
{
___0
}

#[allow(unused_variables)]
fn ___action41<
    'input,
>(
text: &'input str,
(_, ann, _): (usize, alloc::vec::Vec<Annotation>, usize),
(_, lo, _): (usize, usize, usize),
(_, s, _): (usize, alloc::vec::Vec<Symbol>, usize),
(_, c, _): (usize, core::option::Option<Condition>, usize),
(_, a, _): (usize, core::option::Option<ActionKind>, usize),
(_, hi, _): (usize, usize, usize),
) -> Alternative
{
{
        Alternative {
            span: Span(lo, hi),
            expr: ExprSymbol { symbols: s },
            condition: c,
            action: a,
            annotations: ann,
        }
    }
}

#[allow(unused_variables)]
fn ___action42<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, c, _): (usize, core::option::Option<Condition>, usize),
(_, a, _): (usize, ActionKind, usize),
(_, hi, _): (usize, usize, usize),
) -> Alternative
{
{
        Alternative {
            span: Span(lo, hi),
            expr: ExprSymbol { symbols: vec![] },
            condition: c,
            action: Some(a),
            annotations: vec![],
        }
    }
}

#[allow(unused_variables)]
fn ___action43<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ActionKind
{
ActionKind::Lookahead
}

#[allow(unused_variables)]
fn ___action44<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ActionKind
{
ActionKind::Lookbehind
}

#[allow(unused_variables)]
fn ___action45<
    'input,
>(
text: &'input str,
(_, c, _): (usize, &'input str, usize),
) -> ActionKind
{
ActionKind::User(strip(c).to_string())
}

#[allow(unused_variables)]
fn ___action46<
    'input,
>(
text: &'input str,
(_, c, _): (usize, &'input str, usize),
) -> ActionKind
{
ActionKind::Fallible(strip(c).to_string())
}

#[allow(unused_variables)]
fn ___action47<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, a, _): (usize, NonterminalString, usize),
(_, op, _): (usize, ConditionOp, usize),
(_, b, _): (usize, Atom, usize),
(_, hi, _): (usize, usize, usize),
) -> Condition
{
{
        Condition { span:Span(lo, hi), lhs:a, rhs:b, op }
    }
}

#[allow(unused_variables)]
fn ___action48<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ConditionOp
{
ConditionOp::Equals
}

#[allow(unused_variables)]
fn ___action49<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ConditionOp
{
ConditionOp::NotEquals
}

#[allow(unused_variables)]
fn ___action50<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ConditionOp
{
ConditionOp::Match
}

#[allow(unused_variables)]
fn ___action51<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ConditionOp
{
ConditionOp::NotMatch
}

#[allow(unused_variables)]
fn ___action52<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, alloc::vec::Vec<Symbol>, usize),
) -> ExprSymbol
{
ExprSymbol { symbols: ___0 }
}

#[allow(unused_variables)]
fn ___action53<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, m, _): (usize, core::option::Option<Tok<'input>>, usize),
(_, _, _): (usize, usize, usize),
(_, l, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, s, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lo, hi), SymbolKind::Name(Name::new(m.is_some(), l), Box::new(s)))
}

#[allow(unused_variables)]
fn ___action54<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, s, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lo, hi), SymbolKind::Choose(Box::new(s)))
}

#[allow(unused_variables)]
fn ___action55<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> Symbol
{
___0
}

#[allow(unused_variables)]
fn ___action56<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> Symbol
{
___0
}

#[allow(unused_variables)]
fn ___action57<
    'input,
>(
text: &'input str,
(_, lhs, _): (usize, Symbol, usize),
(_, op, _): (usize, RepeatOp, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lhs.span.0, hi),
                    SymbolKind::Repeat(Box::new(RepeatSymbol { symbol: lhs, op })))
}

#[allow(unused_variables)]
fn ___action58<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> RepeatOp
{
RepeatOp::Plus
}

#[allow(unused_variables)]
fn ___action59<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> RepeatOp
{
RepeatOp::Star
}

#[allow(unused_variables)]
fn ___action60<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> RepeatOp
{
RepeatOp::Question
}

#[allow(unused_variables)]
fn ___action61<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, sk, _): (usize, SymbolKind, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lo, hi), sk)
}

#[allow(unused_variables)]
fn ___action62<
    'input,
>(
text: &'input str,
(_, name, _): (usize, NonterminalString, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, args, _): (usize, Vec<Symbol>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Macro(MacroSymbol { name, args })
}

#[allow(unused_variables)]
fn ___action63<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalString, usize),
) -> SymbolKind
{
SymbolKind::Terminal(___0)
}

#[allow(unused_variables)]
fn ___action64<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> SymbolKind
{
SymbolKind::AmbiguousId(Atom::from(___0))
}

#[allow(unused_variables)]
fn ___action65<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Atom, usize),
) -> SymbolKind
{
SymbolKind::Nonterminal(NonterminalString(___0))
}

#[allow(unused_variables)]
fn ___action66<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, ExprSymbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Expr(___0)
}

#[allow(unused_variables)]
fn ___action67<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Lookahead
}

#[allow(unused_variables)]
fn ___action68<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Lookbehind
}

#[allow(unused_variables)]
fn ___action69<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Error
}

#[allow(unused_variables)]
fn ___action70<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
TypeRef::Tuple(___0)
}

#[allow(unused_variables)]
fn ___action71<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
TypeRef::Slice(Box::new(___0))
}

#[allow(unused_variables)]
fn ___action72<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
{
        TypeRef::OfSymbol(___0.kind)
    }
}

#[allow(unused_variables)]
fn ___action73<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, l, _): (usize, core::option::Option<Lifetime>, usize),
(_, m, _): (usize, core::option::Option<Tok<'input>>, usize),
(_, t, _): (usize, TypeRef, usize),
) -> TypeRef
{
TypeRef::Ref { lifetime: l,
                       mutable: m.is_some(),
                       referent: Box::new(t) }
}

#[allow(unused_variables)]
fn ___action74<
    'input,
>(
text: &'input str,
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, types, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
TypeRef::Nominal { path:path, types:types }
}

#[allow(unused_variables)]
fn ___action75<
    'input,
>(
text: &'input str,
(_, p, _): (usize, Path, usize),
) -> TypeRef
{
match p.as_id() {
            Some(id) => TypeRef::Id(id),
            None => TypeRef::Nominal { path: p, types: vec![] },
        }
}

#[allow(unused_variables)]
fn ___action76<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, types, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
TypeRef::TraitObject { path:path, types:types }
}

#[allow(unused_variables)]
fn ___action77<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, path, _): (usize, Path, usize),
) -> TypeRef
{
TypeRef::TraitObject { path, types: vec![] }
}

#[allow(unused_variables)]
fn ___action78<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, forall, _): (usize, Vec<TypeParameter>, usize),
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, parameters, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ret, _): (usize, core::option::Option<TypeRef>, usize),
) -> TypeRef
{
TypeRef::Fn { forall, path, parameters, ret: ret.map(Box::new) }
}

#[allow(unused_variables)]
fn ___action79<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
fn ___action80<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Lifetime, usize),
) -> TypeRef
{
TypeRef::Lifetime(___0)
}

#[allow(unused_variables)]
fn ___action81<
    'input,
>(
text: &'input str,
(_, a, _): (usize, core::option::Option<Tok<'input>>, usize),
(_, h, _): (usize, alloc::vec::Vec<Atom>, usize),
(_, t, _): (usize, Atom, usize),
) -> Path
{
{
        Path { absolute: a.is_some(),
               ids: h.into_iter().chain(once(t)).collect() }
    }
}

#[allow(unused_variables)]
fn ___action82<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a0, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
(_, et, _): (usize, EnumToken, usize),
(_, a1, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> GrammarItem
{
{
        GrammarItem::ExternToken(ExternToken {
            span: Span(lo, hi),
            associated_types: a0.into_iter().chain(a1).collect(),
            enum_token: Some(et),
        })
    }
}

#[allow(unused_variables)]
fn ___action83<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a0, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> GrammarItem
{
{
        GrammarItem::ExternToken(ExternToken {
            span: Span(lo, hi),
            associated_types: a0,
            enum_token: None,
        })
    }
}

#[allow(unused_variables)]
fn ___action84<
    'input,
>(
text: &'input str,
(_, t, _): (usize, MatchToken, usize),
) -> GrammarItem
{
GrammarItem::MatchToken(t)
}

#[allow(unused_variables)]
fn ___action85<
    'input,
>(
text: &'input str,
(_, t, _): (usize, MatchToken, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, c, _): (usize, MatchContents, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> MatchToken
{
t.add(c)
}

#[allow(unused_variables)]
fn ___action86<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, c, _): (usize, MatchContents, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> MatchToken
{
MatchToken::new(c, Span(lo, hi))
}

#[allow(unused_variables)]
fn ___action87<
    'input,
>(
text: &'input str,
(_, items, _): (usize, Vec<MatchItem>, usize),
) -> MatchContents
{
MatchContents { items }
}

#[allow(unused_variables)]
fn ___action88<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
) -> MatchItem
{
MatchItem::CatchAll(Span(lo, hi))
}

#[allow(unused_variables)]
fn ___action89<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, s, _): (usize, TerminalLiteral, usize),
(_, hi, _): (usize, usize, usize),
) -> MatchItem
{
MatchItem::Unmapped(s, Span(lo, hi))
}

#[allow(unused_variables)]
fn ___action90<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, from, _): (usize, TerminalLiteral, usize),
(_, start, _): (usize, usize, usize),
(_, p, _): (usize, &'input str, usize),
(_, hi, _): (usize, usize, usize),
) -> Result<MatchItem,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
{
        let to = super::parse_match_mapping(p, start + 2)?;
        Ok(MatchItem::Mapped(from, to, Span(lo, hi)))
    }
}

#[allow(unused_variables)]
fn ___action91<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalLiteral, usize),
) -> TerminalLiteral
{
___0
}

#[allow(unused_variables)]
fn ___action92<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalString, usize),
) -> MatchMapping
{
MatchMapping::Terminal(___0)
}

#[allow(unused_variables)]
fn ___action93<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
(_, ___1, _): (usize, Tok<'input>, usize),
) -> MatchMapping
{
MatchMapping::Skip
}

#[allow(unused_variables)]
fn ___action94<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, lo, _): (usize, usize, usize),
(_, t, _): (usize, TypeRef, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, c, _): (usize, Vec<Conversion>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> EnumToken
{
{
        EnumToken {
            type_name: t,
            type_span: Span(lo, hi),
            conversions: c,
        }
    }
}

#[allow(unused_variables)]
fn ___action95<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, lo, _): (usize, usize, usize),
(_, n, _): (usize, Atom, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, t, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> AssociatedType
{
{
        AssociatedType { type_span: Span(lo, hi),
                         type_name: n,
                         type_ref: t }
    }
}

#[allow(unused_variables)]
fn ___action96<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, from, _): (usize, TerminalString, usize),
(_, start, _): (usize, usize, usize),
(_, p, _): (usize, &'input str, usize),
(_, hi, _): (usize, usize, usize),
) -> Result<Conversion,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
{
        let pattern = super::parse_pattern(p, start + 2)?;
        Ok(Conversion { span: Span(lo, hi),
                        from,
                        to: pattern })
    }
}

#[allow(unused_variables)]
fn ___action97<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, k, _): (usize, PatternKind<TypeRef>, usize),
(_, hi, _): (usize, usize, usize),
) -> Pattern<TypeRef>
{
Pattern { span: Span(lo, hi), kind: k }
}

#[allow(unused_variables)]
fn ___action98<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ___1, _): (usize, Vec<Pattern<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Enum(___0, ___1)
}

#[allow(unused_variables)]
fn ___action99<
    'input,
>(
text: &'input str,
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a0, _): (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
(_, a1, _): (usize, core::option::Option<FieldPattern<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Struct(p, a0.into_iter().chain(a1).collect(), false)
}

#[allow(unused_variables)]
fn ___action100<
    'input,
>(
text: &'input str,
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a0, _): (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Struct(p, a0, true)
}

#[allow(unused_variables)]
fn ___action101<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Underscore
}

#[allow(unused_variables)]
fn ___action102<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::DotDot
}

#[allow(unused_variables)]
fn ___action103<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Choose(___0)
}

#[allow(unused_variables)]
fn ___action104<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<Pattern<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Tuple(___0)
}

#[allow(unused_variables)]
fn ___action105<
    'input,
>(
text: &'input str,
(_, c, _): (usize, &'input str, usize),
) -> PatternKind<TypeRef>
{
PatternKind::CharLiteral(Atom::from(c))
}

#[allow(unused_variables)]
fn ___action106<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Path, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Path(___0)
}

#[allow(unused_variables)]
fn ___action107<
    'input,
>(
text: &'input str,
(_, s, _): (usize, String, usize),
) -> PatternKind<TypeRef>
{
PatternKind::String(s)
}

#[allow(unused_variables)]
fn ___action108<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, id, _): (usize, Atom, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, pat, _): (usize, Pattern<TypeRef>, usize),
) -> FieldPattern<TypeRef>
{
{
        FieldPattern { field_span: Span(lo, hi),
                       field_name: id,
                       pattern: pat }
    }
}

#[allow(unused_variables)]
fn ___action109<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> NonterminalString
{
NonterminalString(Atom::from(i))
}

#[allow(unused_variables)]
fn ___action110<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> NonterminalString
{
NonterminalString(Atom::from(i))
}

#[allow(unused_variables)]
fn ___action111<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> Atom
{
Atom::from(i)
}

#[allow(unused_variables)]
fn ___action112<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> Atom
{
Atom::from(i)
}

#[allow(unused_variables)]
fn ___action113<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> Atom
{
Atom::from(i)
}

#[allow(unused_variables)]
fn ___action114<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> Lifetime
{
Lifetime(Atom::from(i))
}

#[allow(unused_variables)]
fn ___action115<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalString, usize),
) -> TerminalString
{
___0
}

#[allow(unused_variables)]
fn ___action116<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> TerminalString
{
TerminalString::Bare(Atom::from(i))
}

#[allow(unused_variables)]
fn ___action117<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalLiteral, usize),
) -> TerminalString
{
TerminalString::Literal(___0)
}

#[allow(unused_variables)]
fn ___action118<
    'input,
>(
text: &'input str,
(_, s, _): (usize, Atom, usize),
) -> TerminalLiteral
{
TerminalLiteral::Quoted(s)
}

#[allow(unused_variables)]
fn ___action119<
    'input,
>(
text: &'input str,
(_, s, _): (usize, Atom, usize),
) -> TerminalLiteral
{
TerminalLiteral::Regex(s)
}

#[allow(unused_variables)]
fn ___action120<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, s, _): (usize, &'input str, usize),
) -> Result<Atom,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
{
        let text = tok::apply_string_escapes(s, lo + 1)
            .map_err(|e| ParseError::User { error: e })?;
        Ok(Atom::from(text))
    }
}

#[allow(unused_variables)]
fn ___action121<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, s, _): (usize, &'input str, usize),
) -> Result<String,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
{
        let text = tok::apply_string_escapes(s, lo + 1)
            .map_err(|e| ParseError::User { error: e })?;
        Ok(text.into_owned())
    }
}

#[allow(unused_variables)]
fn ___action122<
    'input,
>(
text: &'input str,
(_, s, _): (usize, &'input str, usize),
) -> Atom
{
Atom::from(s)
}

#[allow(unused_variables)]
fn ___action123<
    'input,
>(
text: &'input str,
(_, s, _): (usize, &'input str, usize),
) -> String
{
s.to_string()
}

#[allow(unused_variables)]
fn ___action124<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, FieldPattern<TypeRef>, usize),
) -> core::option::Option<FieldPattern<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action125<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<FieldPattern<TypeRef>>
{
None
}

#[allow(unused_variables)]
fn ___action126<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action127<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
v
}

#[allow(unused_variables)]
fn ___action128<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, FieldPattern<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> FieldPattern<TypeRef>
{
___0
}

#[allow(unused_variables)]
fn ___action129<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
(_, e1, _): (usize, core::option::Option<Pattern<TypeRef>>, usize),
) -> Vec<Pattern<TypeRef>>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action130<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Conversion>, usize),
(_, e1, _): (usize, core::option::Option<Conversion>, usize),
) -> Vec<Conversion>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action131<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<MatchItem>, usize),
(_, e1, _): (usize, core::option::Option<MatchItem>, usize),
) -> Vec<MatchItem>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action132<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<AssociatedType>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action133<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
) -> alloc::vec::Vec<AssociatedType>
{
v
}

#[allow(unused_variables)]
fn ___action134<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Atom>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action135<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Atom>, usize),
) -> alloc::vec::Vec<Atom>
{
v
}

#[allow(unused_variables)]
fn ___action136<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Atom
{
___0
}

#[allow(unused_variables)]
fn ___action137<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> core::option::Option<Tok<'input>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action138<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Tok<'input>>
{
None
}

#[allow(unused_variables)]
fn ___action139<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<TypeRef>, usize),
(_, e1, _): (usize, core::option::Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action140<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Lifetime, usize),
) -> core::option::Option<Lifetime>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action141<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Lifetime>
{
None
}

#[allow(unused_variables)]
fn ___action142<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Symbol>, usize),
(_, e1, _): (usize, core::option::Option<Symbol>, usize),
) -> Vec<Symbol>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action143<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> core::option::Option<Tok<'input>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action144<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Tok<'input>>
{
None
}

#[allow(unused_variables)]
fn ___action145<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Symbol>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action146<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Symbol>, usize),
) -> alloc::vec::Vec<Symbol>
{
v
}

#[allow(unused_variables)]
fn ___action147<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, ActionKind, usize),
) -> core::option::Option<ActionKind>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action148<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<ActionKind>
{
None
}

#[allow(unused_variables)]
fn ___action149<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Condition, usize),
) -> core::option::Option<Condition>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action150<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Condition>
{
None
}

#[allow(unused_variables)]
fn ___action151<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Condition, usize),
) -> Condition
{
___0
}

#[allow(unused_variables)]
fn ___action152<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> alloc::vec::Vec<Symbol>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action153<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Symbol>, usize),
(_, e, _): (usize, Symbol, usize),
) -> alloc::vec::Vec<Symbol>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action154<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> core::option::Option<Tok<'input>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action155<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Tok<'input>>
{
None
}

#[allow(unused_variables)]
fn ___action156<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Alternative>, usize),
(_, e1, _): (usize, core::option::Option<Alternative>, usize),
) -> Vec<Alternative>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action157<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<NonterminalString>, usize),
(_, e1, _): (usize, core::option::Option<NonterminalString>, usize),
) -> Vec<NonterminalString>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action158<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, (Atom, String), usize),
) -> core::option::Option<(Atom, String)>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action159<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<(Atom, String)>
{
None
}

#[allow(unused_variables)]
fn ___action160<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> core::option::Option<TypeRef>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action161<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<TypeRef>
{
None
}

#[allow(unused_variables)]
fn ___action162<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
fn ___action163<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Parameter>, usize),
(_, e1, _): (usize, core::option::Option<Parameter>, usize),
) -> Vec<Parameter>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action164<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
) -> core::option::Option<Vec<TypeBoundParameter<TypeRef>>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action165<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Vec<TypeBoundParameter<TypeRef>>>
{
None
}

#[allow(unused_variables)]
fn ___action166<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
___0
}

#[allow(unused_variables)]
fn ___action167<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
(_, e1, _): (usize, core::option::Option<TypeBoundParameter<TypeRef>>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action168<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> core::option::Option<TypeRef>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action169<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<TypeRef>
{
None
}

#[allow(unused_variables)]
fn ___action170<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
fn ___action171<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<TypeRef>, usize),
(_, e1, _): (usize, core::option::Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action172<
    'input,
>(
text: &'input str,
(_, mut v, _): (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
(_, e, _): (usize, core::option::Option<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
}

#[allow(unused_variables)]
fn ___action173<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ()
{
()
}

#[allow(unused_variables)]
fn ___action174<
    'input,
>(
text: &'input str,
(_, mut v, _): (usize, alloc::vec::Vec<Lifetime>, usize),
(_, e, _): (usize, core::option::Option<Lifetime>, usize),
) -> Vec<Lifetime>
{
match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
}

#[allow(unused_variables)]
fn ___action175<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
(_, e1, _): (usize, core::option::Option<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action176<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<TypeParameter>, usize),
(_, e1, _): (usize, core::option::Option<TypeParameter>, usize),
) -> Vec<TypeParameter>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
fn ___action177<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<GrammarItem>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action178<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> alloc::vec::Vec<GrammarItem>
{
v
}

#[allow(unused_variables)]
fn ___action179<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<WhereClause<TypeRef>>, usize),
) -> core::option::Option<Vec<WhereClause<TypeRef>>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action180<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Vec<WhereClause<TypeRef>>>
{
None
}

#[allow(unused_variables)]
fn ___action181<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<Parameter>, usize),
) -> core::option::Option<Vec<Parameter>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action182<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Vec<Parameter>>
{
None
}

#[allow(unused_variables)]
fn ___action183<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<TypeParameter>, usize),
) -> core::option::Option<Vec<TypeParameter>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action184<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Vec<TypeParameter>>
{
None
}

#[allow(unused_variables)]
fn ___action185<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> usize
{
___lookbehind.clone()
}

#[allow(unused_variables)]
fn ___action186<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> usize
{
___lookahead.clone()
}

#[allow(unused_variables)]
fn ___action187<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Annotation>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action188<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Annotation>, usize),
) -> alloc::vec::Vec<Annotation>
{
v
}

#[allow(unused_variables)]
fn ___action189<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<GrammarItem>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action190<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> alloc::vec::Vec<GrammarItem>
{
v
}

#[allow(unused_variables)]
fn ___action191<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<String>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action192<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<String>, usize),
) -> alloc::vec::Vec<String>
{
v
}

#[allow(unused_variables)]
fn ___action193<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, String, usize),
) -> alloc::vec::Vec<String>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action194<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<String>, usize),
(_, e, _): (usize, String, usize),
) -> alloc::vec::Vec<String>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action195<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> alloc::vec::Vec<GrammarItem>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action196<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
(_, e, _): (usize, GrammarItem, usize),
) -> alloc::vec::Vec<GrammarItem>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action197<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Annotation, usize),
) -> alloc::vec::Vec<Annotation>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action198<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Annotation>, usize),
(_, e, _): (usize, Annotation, usize),
) -> alloc::vec::Vec<Annotation>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action199<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> alloc::vec::Vec<GrammarItem>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action200<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
(_, e, _): (usize, GrammarItem, usize),
) -> alloc::vec::Vec<GrammarItem>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action201<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeParameter, usize),
) -> core::option::Option<TypeParameter>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action202<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<TypeParameter>
{
None
}

#[allow(unused_variables)]
fn ___action203<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeParameter>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action204<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeParameter>, usize),
) -> alloc::vec::Vec<TypeParameter>
{
v
}

#[allow(unused_variables)]
fn ___action205<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeParameter, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeParameter
{
___0
}

#[allow(unused_variables)]
fn ___action206<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, WhereClause<TypeRef>, usize),
) -> core::option::Option<WhereClause<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action207<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<WhereClause<TypeRef>>
{
None
}

#[allow(unused_variables)]
fn ___action208<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action209<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
v
}

#[allow(unused_variables)]
fn ___action210<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, WhereClause<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> WhereClause<TypeRef>
{
___0
}

#[allow(unused_variables)]
fn ___action211<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Lifetime>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action212<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Lifetime>, usize),
) -> alloc::vec::Vec<Lifetime>
{
v
}

#[allow(unused_variables)]
fn ___action213<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Lifetime, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Lifetime
{
___0
}

#[allow(unused_variables)]
fn ___action214<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBound<TypeRef>, usize),
) -> core::option::Option<TypeBound<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action215<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<TypeBound<TypeRef>>
{
None
}

#[allow(unused_variables)]
fn ___action216<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action217<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
v
}

#[allow(unused_variables)]
fn ___action218<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBound<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
___0
}

#[allow(unused_variables)]
fn ___action219<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> core::option::Option<TypeRef>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action220<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<TypeRef>
{
None
}

#[allow(unused_variables)]
fn ___action221<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeRef>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action222<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeRef>, usize),
) -> alloc::vec::Vec<TypeRef>
{
v
}

#[allow(unused_variables)]
fn ___action223<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
fn ___action224<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBoundParameter<TypeRef>, usize),
) -> core::option::Option<TypeBoundParameter<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action225<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<TypeBoundParameter<TypeRef>>
{
None
}

#[allow(unused_variables)]
fn ___action226<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action227<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
v
}

#[allow(unused_variables)]
fn ___action228<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBoundParameter<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeBoundParameter<TypeRef>
{
___0
}

#[allow(unused_variables)]
fn ___action229<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Parameter, usize),
) -> core::option::Option<Parameter>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action230<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Parameter>
{
None
}

#[allow(unused_variables)]
fn ___action231<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Parameter>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action232<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Parameter>, usize),
) -> alloc::vec::Vec<Parameter>
{
v
}

#[allow(unused_variables)]
fn ___action233<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Parameter, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Parameter
{
___0
}

#[allow(unused_variables)]
fn ___action234<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, NonterminalString, usize),
) -> core::option::Option<NonterminalString>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action235<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<NonterminalString>
{
None
}

#[allow(unused_variables)]
fn ___action236<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<NonterminalString>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action237<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<NonterminalString>, usize),
) -> alloc::vec::Vec<NonterminalString>
{
v
}

#[allow(unused_variables)]
fn ___action238<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, NonterminalString, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> NonterminalString
{
___0
}

#[allow(unused_variables)]
fn ___action239<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Alternative, usize),
) -> core::option::Option<Alternative>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action240<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Alternative>
{
None
}

#[allow(unused_variables)]
fn ___action241<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Alternative>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action242<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Alternative>, usize),
) -> alloc::vec::Vec<Alternative>
{
v
}

#[allow(unused_variables)]
fn ___action243<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Alternative, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Alternative
{
___0
}

#[allow(unused_variables)]
fn ___action244<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> core::option::Option<Symbol>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action245<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Symbol>
{
None
}

#[allow(unused_variables)]
fn ___action246<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Symbol>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action247<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Symbol>, usize),
) -> alloc::vec::Vec<Symbol>
{
v
}

#[allow(unused_variables)]
fn ___action248<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Symbol
{
___0
}

#[allow(unused_variables)]
fn ___action249<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> core::option::Option<TypeRef>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action250<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<TypeRef>
{
None
}

#[allow(unused_variables)]
fn ___action251<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeRef>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action252<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeRef>, usize),
) -> alloc::vec::Vec<TypeRef>
{
v
}

#[allow(unused_variables)]
fn ___action253<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
fn ___action254<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Atom, usize),
) -> alloc::vec::Vec<Atom>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action255<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Atom>, usize),
(_, e, _): (usize, Atom, usize),
) -> alloc::vec::Vec<Atom>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action256<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, AssociatedType, usize),
) -> alloc::vec::Vec<AssociatedType>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action257<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
(_, e, _): (usize, AssociatedType, usize),
) -> alloc::vec::Vec<AssociatedType>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action258<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, MatchItem, usize),
) -> core::option::Option<MatchItem>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action259<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<MatchItem>
{
None
}

#[allow(unused_variables)]
fn ___action260<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<MatchItem>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action261<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<MatchItem>, usize),
) -> alloc::vec::Vec<MatchItem>
{
v
}

#[allow(unused_variables)]
fn ___action262<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, MatchItem, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> MatchItem
{
___0
}

#[allow(unused_variables)]
fn ___action263<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Conversion, usize),
) -> core::option::Option<Conversion>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action264<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Conversion>
{
None
}

#[allow(unused_variables)]
fn ___action265<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Conversion>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action266<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Conversion>, usize),
) -> alloc::vec::Vec<Conversion>
{
v
}

#[allow(unused_variables)]
fn ___action267<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Conversion, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Conversion
{
___0
}

#[allow(unused_variables)]
fn ___action268<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Pattern<TypeRef>, usize),
) -> core::option::Option<Pattern<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
fn ___action269<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> core::option::Option<Pattern<TypeRef>>
{
None
}

#[allow(unused_variables)]
fn ___action270<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
fn ___action271<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
v
}

#[allow(unused_variables)]
fn ___action272<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Pattern<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Pattern<TypeRef>
{
___0
}

#[allow(unused_variables)]
fn ___action273<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, FieldPattern<TypeRef>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action274<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
(_, e, _): (usize, FieldPattern<TypeRef>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action275<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Pattern<TypeRef>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action276<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
(_, e, _): (usize, Pattern<TypeRef>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action277<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Conversion, usize),
) -> alloc::vec::Vec<Conversion>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action278<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Conversion>, usize),
(_, e, _): (usize, Conversion, usize),
) -> alloc::vec::Vec<Conversion>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action279<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, MatchItem, usize),
) -> alloc::vec::Vec<MatchItem>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action280<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<MatchItem>, usize),
(_, e, _): (usize, MatchItem, usize),
) -> alloc::vec::Vec<MatchItem>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action281<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> alloc::vec::Vec<TypeRef>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action282<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeRef>, usize),
(_, e, _): (usize, TypeRef, usize),
) -> alloc::vec::Vec<TypeRef>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action283<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> alloc::vec::Vec<Symbol>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action284<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Symbol>, usize),
(_, e, _): (usize, Symbol, usize),
) -> alloc::vec::Vec<Symbol>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action285<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Alternative, usize),
) -> alloc::vec::Vec<Alternative>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action286<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Alternative>, usize),
(_, e, _): (usize, Alternative, usize),
) -> alloc::vec::Vec<Alternative>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action287<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, NonterminalString, usize),
) -> alloc::vec::Vec<NonterminalString>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action288<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<NonterminalString>, usize),
(_, e, _): (usize, NonterminalString, usize),
) -> alloc::vec::Vec<NonterminalString>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action289<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Parameter, usize),
) -> alloc::vec::Vec<Parameter>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action290<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Parameter>, usize),
(_, e, _): (usize, Parameter, usize),
) -> alloc::vec::Vec<Parameter>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action291<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBoundParameter<TypeRef>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action292<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
(_, e, _): (usize, TypeBoundParameter<TypeRef>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action293<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> alloc::vec::Vec<TypeRef>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action294<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeRef>, usize),
(_, e, _): (usize, TypeRef, usize),
) -> alloc::vec::Vec<TypeRef>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action295<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBound<TypeRef>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action296<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
(_, e, _): (usize, TypeBound<TypeRef>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action297<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Lifetime, usize),
) -> alloc::vec::Vec<Lifetime>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action298<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Lifetime>, usize),
(_, e, _): (usize, Lifetime, usize),
) -> alloc::vec::Vec<Lifetime>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action299<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, WhereClause<TypeRef>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action300<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
(_, e, _): (usize, WhereClause<TypeRef>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action301<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeParameter, usize),
) -> alloc::vec::Vec<TypeParameter>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
fn ___action302<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeParameter>, usize),
(_, e, _): (usize, TypeParameter, usize),
) -> alloc::vec::Vec<TypeParameter>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn ___action303<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, alloc::vec::Vec<Atom>, usize),
___2: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action137(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action81(
text,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action304<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Atom>, usize),
___1: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action138(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action81(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
fn ___action305<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Alternative>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action154(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action40(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action306<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Alternative>, usize),
___2: (usize, Tok<'input>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___2.2.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action155(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action40(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action307<
    'input,
>(
text: &'input str,
___0: (usize, usize, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, usize, usize),
___4: (usize, Atom, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Symbol, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action143(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action53(
text,
___0,
___1,
___temp0,
___3,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action308<
    'input,
>(
text: &'input str,
___0: (usize, usize, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, usize, usize),
___3: (usize, Atom, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Symbol, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action144(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action53(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action309<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, core::option::Option<Lifetime>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action143(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action73(
text,
___0,
___1,
___temp0,
___3,
)
}

#[allow(unused_variables)]
fn ___action310<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, core::option::Option<Lifetime>, usize),
___2: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action144(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action73(
text,
___0,
___1,
___temp0,
___2,
)
}

#[allow(unused_variables)]
fn ___action311<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
) -> core::option::Option<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action170(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action168(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action312<
    'input,
>(
text: &'input str,
___0: (usize, Vec<TypeParameter>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, TypeRef, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___5.0.clone();
let ___end0 = ___6.2.clone();
let ___temp0 = ___action311(
text,
___5,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action17(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action313<
    'input,
>(
text: &'input str,
___0: (usize, Vec<TypeParameter>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___4.2.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action169(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action17(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action314<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Path, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeRef>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___6.0.clone();
let ___end0 = ___7.2.clone();
let ___temp0 = ___action311(
text,
___6,
___7,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action78(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action315<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Path, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeRef>, usize),
___5: (usize, Tok<'input>, usize),
) -> TypeRef
{
let ___start0 = ___5.2.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action169(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action78(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action316<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
) -> core::option::Option<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action162(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action160(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action317<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Visibility, usize),
___2: (usize, usize, usize),
___3: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___4: (usize, usize, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, TypeRef, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___5.0.clone();
let ___end0 = ___6.2.clone();
let ___temp0 = ___action316(
text,
___5,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action33(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action318<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Visibility, usize),
___2: (usize, usize, usize),
___3: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___4: (usize, usize, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action161(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action33(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action319<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
___2: (usize, Tok<'input>, usize),
) -> core::option::Option<Vec<TypeBoundParameter<TypeRef>>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action166(
text,
___0,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action164(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action320<
    'input,
>(
text: &'input str,
___0: (usize, Vec<TypeParameter>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___2.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action319(
text,
___2,
___3,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action18(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action321<
    'input,
>(
text: &'input str,
___0: (usize, Vec<TypeParameter>, usize),
___1: (usize, Path, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___1.2.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action165(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action18(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action322<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Condition, usize),
) -> core::option::Option<Condition>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action151(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action149(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action323<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, usize, usize),
___2: (usize, alloc::vec::Vec<Symbol>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Condition, usize),
___5: (usize, core::option::Option<ActionKind>, usize),
___6: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___3.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action322(
text,
___3,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action41(
text,
___0,
___1,
___2,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action324<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, usize, usize),
___2: (usize, alloc::vec::Vec<Symbol>, usize),
___3: (usize, core::option::Option<ActionKind>, usize),
___4: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action150(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action41(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action325<
    'input,
>(
text: &'input str,
___0: (usize, usize, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Condition, usize),
___3: (usize, ActionKind, usize),
___4: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action322(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action42(
text,
___0,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action326<
    'input,
>(
text: &'input str,
___0: (usize, usize, usize),
___1: (usize, ActionKind, usize),
___2: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action150(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action42(
text,
___0,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action327<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeParameter>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action173(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action14(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action328<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Visibility
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action173(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action32(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action329<
    'input,
>(
text: &'input str,
___0: (usize, Alternative, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Alternative>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action243(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action285(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action330<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Alternative>, usize),
___1: (usize, Alternative, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Alternative>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action243(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action286(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action331<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<Alternative>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action241(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action156(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action332<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Alternative>, usize),
___1: (usize, core::option::Option<Alternative>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action242(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action156(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action333<
    'input,
>(
text: &'input str,
___0: (usize, Conversion, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Conversion>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action267(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action277(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action334<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Conversion>, usize),
___1: (usize, Conversion, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Conversion>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action267(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action278(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action335<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<Conversion>, usize),
) -> Vec<Conversion>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action265(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action130(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action336<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Conversion>, usize),
___1: (usize, core::option::Option<Conversion>, usize),
) -> Vec<Conversion>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action266(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action130(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action337<
    'input,
>(
text: &'input str,
___0: (usize, FieldPattern<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action128(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action273(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action338<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___1: (usize, FieldPattern<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action128(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action274(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action339<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, core::option::Option<FieldPattern<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action126(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action99(
text,
___0,
___1,
___temp0,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action340<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___3: (usize, core::option::Option<FieldPattern<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action127(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action99(
text,
___0,
___1,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action341<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action126(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action100(
text,
___0,
___1,
___temp0,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action342<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action127(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action100(
text,
___0,
___1,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action343<
    'input,
>(
text: &'input str,
___0: (usize, Parameter, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Parameter>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action233(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action289(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action344<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Parameter>, usize),
___1: (usize, Parameter, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Parameter>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action233(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action290(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action345<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<Parameter>, usize),
) -> Vec<Parameter>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action231(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action163(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action346<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Parameter>, usize),
___1: (usize, core::option::Option<Parameter>, usize),
) -> Vec<Parameter>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action232(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action163(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action347<
    'input,
>(
text: &'input str,
___0: (usize, WhereClause<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action210(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action299(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action348<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
___1: (usize, WhereClause<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action210(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action300(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action349<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action208(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action175(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action350<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
___1: (usize, core::option::Option<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action209(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action175(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action351<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Atom>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action136(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action254(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action352<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Atom>, usize),
___1: (usize, Atom, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Atom>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action136(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action255(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action353<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action134(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action303(
text,
___0,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action354<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, alloc::vec::Vec<Atom>, usize),
___2: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action135(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action303(
text,
___0,
___temp0,
___2,
)
}

#[allow(unused_variables)]
fn ___action355<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action134(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action304(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action356<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Atom>, usize),
___1: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action135(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action304(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action357<
    'input,
>(
text: &'input str,
___0: (usize, Lifetime, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Lifetime>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action213(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action297(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action358<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Lifetime>, usize),
___1: (usize, Lifetime, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Lifetime>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action213(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action298(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action359<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<Lifetime>, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action211(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action174(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action360<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Lifetime>, usize),
___1: (usize, core::option::Option<Lifetime>, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action212(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action174(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action361<
    'input,
>(
text: &'input str,
___0: (usize, MatchItem, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<MatchItem>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action262(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action279(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action362<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<MatchItem>, usize),
___1: (usize, MatchItem, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<MatchItem>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action262(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action280(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action363<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<MatchItem>, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action260(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action131(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action364<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<MatchItem>, usize),
___1: (usize, core::option::Option<MatchItem>, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action261(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action131(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action365<
    'input,
>(
text: &'input str,
___0: (usize, NonterminalString, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<NonterminalString>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action238(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action287(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action366<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<NonterminalString>, usize),
___1: (usize, NonterminalString, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<NonterminalString>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action238(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action288(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action367<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<NonterminalString>, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action236(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action157(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action368<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<NonterminalString>, usize),
___1: (usize, core::option::Option<NonterminalString>, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action237(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action157(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action369<
    'input,
>(
text: &'input str,
___0: (usize, Pattern<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action272(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action275(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action370<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
___1: (usize, Pattern<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action272(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action276(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action371<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<Pattern<TypeRef>>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action270(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action129(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action372<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
___1: (usize, core::option::Option<Pattern<TypeRef>>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action271(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action129(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action373<
    'input,
>(
text: &'input str,
___0: (usize, Symbol, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Symbol>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action248(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action283(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action374<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Symbol, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Symbol>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action248(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action284(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action375<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<Symbol>, usize),
) -> Vec<Symbol>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action246(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action142(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action376<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, core::option::Option<Symbol>, usize),
) -> Vec<Symbol>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action247(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action142(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action377<
    'input,
>(
text: &'input str,
___0: (usize, TypeBound<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action218(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action295(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action378<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
___1: (usize, TypeBound<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action218(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action296(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action379<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action216(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action172(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action380<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
___1: (usize, core::option::Option<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action217(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action172(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action381<
    'input,
>(
text: &'input str,
___0: (usize, TypeBoundParameter<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action228(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action291(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action382<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
___1: (usize, TypeBoundParameter<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action228(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action292(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action383<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<TypeBoundParameter<TypeRef>>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action226(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action167(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action384<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
___1: (usize, core::option::Option<TypeBoundParameter<TypeRef>>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action227(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action167(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action385<
    'input,
>(
text: &'input str,
___0: (usize, TypeParameter, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeParameter>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action205(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action301(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action386<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeParameter>, usize),
___1: (usize, TypeParameter, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeParameter>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action205(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action302(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action387<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<TypeParameter>, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action203(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action176(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action388<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeParameter>, usize),
___1: (usize, core::option::Option<TypeParameter>, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action204(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action176(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action389<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action223(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action293(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action390<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, TypeRef, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeRef>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action223(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action294(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action391<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action221(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action171(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action392<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, core::option::Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action222(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action171(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action393<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action253(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action281(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action394<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, TypeRef, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeRef>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action253(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action282(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action395<
    'input,
>(
text: &'input str,
___0: (usize, core::option::Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action251(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action139(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action396<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, core::option::Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action252(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action139(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action397<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
___4: (usize, core::option::Option<ActionKind>, usize),
___5: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action323(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action398<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, core::option::Option<ActionKind>, usize),
___3: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action324(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action399<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Condition, usize),
___2: (usize, ActionKind, usize),
___3: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action325(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action400<
    'input,
>(
text: &'input str,
___0: (usize, ActionKind, usize),
___1: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action326(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
fn ___action401<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Atom, usize),
___3: (usize, core::option::Option<(Atom, String)>, usize),
___4: (usize, usize, usize),
___5: (usize, Tok<'input>, usize),
) -> Annotation
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action35(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action402<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
___2: (usize, usize, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, TypeRef, usize),
___5: (usize, Tok<'input>, usize),
) -> AssociatedType
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action95(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action403<
    'input,
>(
text: &'input str,
___0: (usize, NonterminalString, usize),
___1: (usize, ConditionOp, usize),
___2: (usize, Atom, usize),
___3: (usize, usize, usize),
) -> Condition
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action47(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action404<
    'input,
>(
text: &'input str,
___0: (usize, TerminalString, usize),
___1: (usize, &'input str, usize),
___2: (usize, usize, usize),
) -> Result<Conversion,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___start1 = ___0.2.clone();
let ___end1 = ___1.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action186(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action96(
text,
___temp0,
___0,
___temp1,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action405<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
___2: (usize, usize, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Conversion>, usize),
___5: (usize, Tok<'input>, usize),
) -> EnumToken
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action94(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action406<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, usize, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<AssociatedType>, usize),
___4: (usize, EnumToken, usize),
___5: (usize, alloc::vec::Vec<AssociatedType>, usize),
___6: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action82(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action407<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, usize, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<AssociatedType>, usize),
___4: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action83(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action408<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, usize, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Pattern<TypeRef>, usize),
) -> FieldPattern<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action108(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action409<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, usize, usize),
___5: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___6: (usize, core::option::Option<Vec<Parameter>>, usize),
___7: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___8: (usize, Tok<'input>, usize),
___9: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action6(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
___6,
___7,
___8,
___9,
)
}

#[allow(unused_variables)]
fn ___action410<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, usize, usize),
) -> MatchItem
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action88(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
fn ___action411<
    'input,
>(
text: &'input str,
___0: (usize, TerminalLiteral, usize),
___1: (usize, usize, usize),
) -> MatchItem
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action89(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
fn ___action412<
    'input,
>(
text: &'input str,
___0: (usize, TerminalLiteral, usize),
___1: (usize, &'input str, usize),
___2: (usize, usize, usize),
) -> Result<MatchItem,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___start1 = ___0.2.clone();
let ___end1 = ___1.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action186(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action90(
text,
___temp0,
___0,
___temp1,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action413<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, usize, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, MatchContents, usize),
___4: (usize, Tok<'input>, usize),
) -> MatchToken
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action86(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action414<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, usize, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, TypeRef, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action317(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action415<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, usize, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action318(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action416<
    'input,
>(
text: &'input str,
___0: (usize, PatternKind<TypeRef>, usize),
___1: (usize, usize, usize),
) -> Pattern<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action97(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
fn ___action417<
    'input,
>(
text: &'input str,
___0: (usize, &'input str, usize),
) -> Result<String,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action121(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action418<
    'input,
>(
text: &'input str,
___0: (usize, &'input str, usize),
) -> Result<Atom,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action120(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action419<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Atom, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Symbol, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___start1 = ___1.2.clone();
let ___end1 = ___2.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action186(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action307(
text,
___temp0,
___0,
___1,
___temp1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action420<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Symbol, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___start1 = ___0.2.clone();
let ___end1 = ___1.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action186(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action308(
text,
___temp0,
___0,
___temp1,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action421<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Symbol, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action54(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action422<
    'input,
>(
text: &'input str,
___0: (usize, SymbolKind, usize),
___1: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action186(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action61(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
fn ___action423<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
___4: (usize, core::option::Option<ActionKind>, usize),
) -> Alternative
{
let ___start0 = ___4.2.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action397(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action424<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, core::option::Option<ActionKind>, usize),
) -> Alternative
{
let ___start0 = ___2.2.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action398(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action425<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Condition, usize),
___2: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___2.2.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action399(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action426<
    'input,
>(
text: &'input str,
___0: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action400(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action427<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Atom, usize),
___3: (usize, core::option::Option<(Atom, String)>, usize),
___4: (usize, Tok<'input>, usize),
) -> Annotation
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action401(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
)
}

#[allow(unused_variables)]
fn ___action428<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, TypeRef, usize),
___4: (usize, Tok<'input>, usize),
) -> AssociatedType
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action402(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action429<
    'input,
>(
text: &'input str,
___0: (usize, NonterminalString, usize),
___1: (usize, ConditionOp, usize),
___2: (usize, Atom, usize),
) -> Condition
{
let ___start0 = ___2.2.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action403(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action430<
    'input,
>(
text: &'input str,
___0: (usize, TerminalString, usize),
___1: (usize, &'input str, usize),
) -> Result<Conversion,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___1.2.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action404(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action431<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Conversion>, usize),
___4: (usize, Tok<'input>, usize),
) -> EnumToken
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action405(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action432<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, EnumToken, usize),
___4: (usize, alloc::vec::Vec<AssociatedType>, usize),
___5: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action406(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action433<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action407(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action434<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Pattern<TypeRef>, usize),
) -> FieldPattern<TypeRef>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action408(
text,
___0,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action435<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___5: (usize, core::option::Option<Vec<Parameter>>, usize),
___6: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action409(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action436<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
) -> MatchItem
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action410(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action437<
    'input,
>(
text: &'input str,
___0: (usize, TerminalLiteral, usize),
) -> MatchItem
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action411(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action438<
    'input,
>(
text: &'input str,
___0: (usize, TerminalLiteral, usize),
___1: (usize, &'input str, usize),
) -> Result<MatchItem,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___1.2.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action412(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action439<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, MatchContents, usize),
___3: (usize, Tok<'input>, usize),
) -> MatchToken
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action413(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action440<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, TypeRef, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action414(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action441<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action415(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action442<
    'input,
>(
text: &'input str,
___0: (usize, PatternKind<TypeRef>, usize),
) -> Pattern<TypeRef>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action416(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action443<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Atom, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Symbol, usize),
___5: (usize, Tok<'input>, usize),
) -> Symbol
{
let ___start0 = ___5.2.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action419(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action444<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Symbol, usize),
___4: (usize, Tok<'input>, usize),
) -> Symbol
{
let ___start0 = ___4.2.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action420(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action445<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Symbol, usize),
___2: (usize, Tok<'input>, usize),
) -> Symbol
{
let ___start0 = ___2.2.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action421(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action446<
    'input,
>(
text: &'input str,
___0: (usize, Symbol, usize),
___1: (usize, RepeatOp, usize),
) -> Symbol
{
let ___start0 = ___1.2.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action57(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action447<
    'input,
>(
text: &'input str,
___0: (usize, SymbolKind, usize),
) -> Symbol
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action185(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action422(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action448<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
___4: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action147(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action423(
text,
___0,
___1,
___2,
___3,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action449<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
) -> Alternative
{
let ___start0 = ___3.2.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action148(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action423(
text,
___0,
___1,
___2,
___3,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action450<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action147(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action424(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action451<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
) -> Alternative
{
let ___start0 = ___1.2.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action148(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action424(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action452<
    'input,
>(
text: &'input str,
___0: (usize, Alternative, usize),
) -> Vec<Alternative>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action239(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action331(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action453<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Alternative>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action240(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action331(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action454<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Alternative>, usize),
___1: (usize, Alternative, usize),
) -> Vec<Alternative>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action239(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action332(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action455<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Alternative>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action240(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action332(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action456<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Condition, usize),
___3: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action448(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action457<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
___4: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action188(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action448(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action458<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Condition, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action449(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action459<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action188(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action449(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action460<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action450(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
fn ___action461<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action188(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action450(
text,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action462<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action451(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action463<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
) -> Alternative
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action188(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action451(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action464<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___4: (usize, core::option::Option<Vec<Parameter>>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action435(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action465<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___5: (usize, core::option::Option<Vec<Parameter>>, usize),
___6: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action188(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action435(
text,
___0,
___1,
___temp0,
___3,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action466<
    'input,
>(
text: &'input str,
___0: (usize, Visibility, usize),
___1: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, TypeRef, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action440(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action467<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, TypeRef, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action188(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action440(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action468<
    'input,
>(
text: &'input str,
___0: (usize, Visibility, usize),
___1: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action441(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action469<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action188(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action441(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action470<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Atom, usize),
___3: (usize, (Atom, String), usize),
___4: (usize, Tok<'input>, usize),
) -> Annotation
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action158(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action427(
text,
___0,
___1,
___2,
___temp0,
___4,
)
}

#[allow(unused_variables)]
fn ___action471<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Atom, usize),
___3: (usize, Tok<'input>, usize),
) -> Annotation
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action159(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action427(
text,
___0,
___1,
___2,
___temp0,
___3,
)
}

#[allow(unused_variables)]
fn ___action472<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, EnumToken, usize),
___3: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___start1 = ___2.2.clone();
let ___end1 = ___3.0.clone();
let ___temp0 = ___action132(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action132(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action432(
text,
___0,
___1,
___temp0,
___2,
___temp1,
___3,
)
}

#[allow(unused_variables)]
fn ___action473<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, EnumToken, usize),
___3: (usize, alloc::vec::Vec<AssociatedType>, usize),
___4: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___start1 = ___3.0.clone();
let ___end1 = ___3.2.clone();
let ___temp0 = ___action132(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action133(
text,
___3,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action432(
text,
___0,
___1,
___temp0,
___2,
___temp1,
___4,
)
}

#[allow(unused_variables)]
fn ___action474<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, EnumToken, usize),
___4: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___start1 = ___3.2.clone();
let ___end1 = ___4.0.clone();
let ___temp0 = ___action133(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action132(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action432(
text,
___0,
___1,
___temp0,
___3,
___temp1,
___4,
)
}

#[allow(unused_variables)]
fn ___action475<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, EnumToken, usize),
___4: (usize, alloc::vec::Vec<AssociatedType>, usize),
___5: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___start1 = ___4.0.clone();
let ___end1 = ___4.2.clone();
let ___temp0 = ___action133(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action133(
text,
___4,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action432(
text,
___0,
___1,
___temp0,
___3,
___temp1,
___5,
)
}

#[allow(unused_variables)]
fn ___action476<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action132(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action433(
text,
___0,
___1,
___temp0,
___2,
)
}

#[allow(unused_variables)]
fn ___action477<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action133(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action433(
text,
___0,
___1,
___temp0,
___3,
)
}

#[allow(unused_variables)]
fn ___action478<
    'input,
>(
text: &'input str,
___0: (usize, Conversion, usize),
) -> Vec<Conversion>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action263(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action335(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action479<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Conversion>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action264(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action335(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action480<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Conversion>, usize),
___1: (usize, Conversion, usize),
) -> Vec<Conversion>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action263(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action336(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action481<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Conversion>, usize),
) -> Vec<Conversion>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action264(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action336(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action482<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, FieldPattern<TypeRef>, usize),
___3: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___2.0.clone();
let ___end0 = ___2.2.clone();
let ___temp0 = ___action124(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action339(
text,
___0,
___1,
___temp0,
___3,
)
}

#[allow(unused_variables)]
fn ___action483<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___1.2.clone();
let ___end0 = ___2.0.clone();
let ___temp0 = ___action125(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action339(
text,
___0,
___1,
___temp0,
___2,
)
}

#[allow(unused_variables)]
fn ___action484<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___3: (usize, FieldPattern<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action124(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action340(
text,
___0,
___1,
___2,
___temp0,
___4,
)
}

#[allow(unused_variables)]
fn ___action485<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action125(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action340(
text,
___0,
___1,
___2,
___temp0,
___3,
)
}

#[allow(unused_variables)]
fn ___action486<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, TypeRef, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<TypeBound<TypeRef>>, usize),
) -> WhereClause<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action12(
text,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action487<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeBound<TypeRef>>, usize),
) -> WhereClause<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action327(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action12(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action488<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Path, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<TypeRef>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, Tok<'input>, usize),
___9: (usize, TypeRef, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action312(
text,
___temp0,
___4,
___5,
___6,
___7,
___8,
___9,
)
}

#[allow(unused_variables)]
fn ___action489<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeRef>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, TypeRef, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action327(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action312(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action490<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Path, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<TypeRef>, usize),
___7: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action313(
text,
___temp0,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action491<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeRef>, usize),
___3: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action327(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action313(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action492<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Path, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action320(
text,
___temp0,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action493<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action327(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action320(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action494<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Path, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action321(
text,
___temp0,
___4,
)
}

#[allow(unused_variables)]
fn ___action495<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action327(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action321(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
fn ___action496<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Path, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, Vec<TypeRef>, usize),
___8: (usize, Tok<'input>, usize),
___9: (usize, Tok<'input>, usize),
___10: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___1.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action13(
text,
___1,
___2,
___3,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action314(
text,
___0,
___temp0,
___5,
___6,
___7,
___8,
___9,
___10,
)
}

#[allow(unused_variables)]
fn ___action497<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action327(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action314(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action498<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Path, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, Vec<TypeRef>, usize),
___8: (usize, Tok<'input>, usize),
) -> TypeRef
{
let ___start0 = ___1.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action13(
text,
___1,
___2,
___3,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action315(
text,
___0,
___temp0,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action499<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
) -> TypeRef
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action327(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action315(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action500<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___4: (usize, core::option::Option<Vec<Parameter>>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___6.2.clone();
let ___end0 = ___6.2.clone();
let ___temp0 = ___action177(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action464(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action501<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___4: (usize, core::option::Option<Vec<Parameter>>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___7.0.clone();
let ___end0 = ___7.2.clone();
let ___temp0 = ___action178(
text,
___7,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action464(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action502<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___5: (usize, core::option::Option<Vec<Parameter>>, usize),
___6: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___7.2.clone();
let ___end0 = ___7.2.clone();
let ___temp0 = ___action177(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action465(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action503<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___5: (usize, core::option::Option<Vec<Parameter>>, usize),
___6: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___8.0.clone();
let ___end0 = ___8.2.clone();
let ___temp0 = ___action178(
text,
___8,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action465(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action504<
    'input,
>(
text: &'input str,
___0: (usize, Parameter, usize),
) -> Vec<Parameter>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action229(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action345(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action505<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Parameter>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action230(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action345(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action506<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Parameter>, usize),
___1: (usize, Parameter, usize),
) -> Vec<Parameter>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action229(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action346(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action507<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Parameter>, usize),
) -> Vec<Parameter>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action230(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action346(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action508<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action181(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action500(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action509<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___4: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action182(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action500(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action510<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action181(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action501(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action511<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___4: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action182(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action501(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action512<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action181(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action502(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action513<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action182(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action502(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action514<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action181(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action503(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action515<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<TypeParameter>>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action182(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action503(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action516<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action183(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action508(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action517<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action184(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action508(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action518<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action183(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action509(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action519<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action184(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action509(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action520<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action183(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action510(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action521<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action184(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action510(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action522<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action183(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action511(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action523<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action184(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action511(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action524<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action183(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action512(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action525<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action184(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action512(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action526<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action183(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action513(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action527<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action184(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action513(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action528<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action183(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action514(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action529<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action184(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action514(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action530<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action183(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action515(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action531<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, core::option::Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action184(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action515(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action532<
    'input,
>(
text: &'input str,
___0: (usize, WhereClause<TypeRef>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action206(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action349(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action533<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action207(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action349(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action534<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
___1: (usize, WhereClause<TypeRef>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action206(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action350(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action535<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action207(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action350(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action536<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action179(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action516(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
)
}

#[allow(unused_variables)]
fn ___action537<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action516(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
)
}

#[allow(unused_variables)]
fn ___action538<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action179(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action517(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
)
}

#[allow(unused_variables)]
fn ___action539<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action517(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
)
}

#[allow(unused_variables)]
fn ___action540<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action179(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action518(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
)
}

#[allow(unused_variables)]
fn ___action541<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action518(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
)
}

#[allow(unused_variables)]
fn ___action542<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action179(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action519(
text,
___0,
___1,
___2,
___temp0,
___4,
)
}

#[allow(unused_variables)]
fn ___action543<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action519(
text,
___0,
___1,
___2,
___temp0,
___3,
)
}

#[allow(unused_variables)]
fn ___action544<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action179(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action520(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action545<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action520(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action546<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action179(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action521(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action547<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action521(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action548<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action179(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action522(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action549<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action522(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action550<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.0.clone();
let ___end0 = ___3.2.clone();
let ___temp0 = ___action179(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action523(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action551<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.2.clone();
let ___end0 = ___3.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action523(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action552<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___6.0.clone();
let ___end0 = ___6.2.clone();
let ___temp0 = ___action179(
text,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action524(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___7,
)
}

#[allow(unused_variables)]
fn ___action553<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.2.clone();
let ___end0 = ___6.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action524(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___6,
)
}

#[allow(unused_variables)]
fn ___action554<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action179(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action525(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
)
}

#[allow(unused_variables)]
fn ___action555<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action525(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
)
}

#[allow(unused_variables)]
fn ___action556<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action179(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action526(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
)
}

#[allow(unused_variables)]
fn ___action557<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action526(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
)
}

#[allow(unused_variables)]
fn ___action558<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action179(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action527(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
)
}

#[allow(unused_variables)]
fn ___action559<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action527(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
)
}

#[allow(unused_variables)]
fn ___action560<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___6.0.clone();
let ___end0 = ___6.2.clone();
let ___temp0 = ___action179(
text,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action528(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action561<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.2.clone();
let ___end0 = ___6.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action528(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action562<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action179(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action529(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action563<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action529(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action564<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.0.clone();
let ___end0 = ___5.2.clone();
let ___temp0 = ___action179(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action530(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action565<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.2.clone();
let ___end0 = ___5.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action530(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action566<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0.clone();
let ___end0 = ___4.2.clone();
let ___temp0 = ___action179(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action531(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action567<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2.clone();
let ___end0 = ___4.0.clone();
let ___temp0 = ___action180(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action531(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action568<
    'input,
>(
text: &'input str,
___0: (usize, Lifetime, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action140(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action359(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action569<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Lifetime>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action141(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action359(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action570<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Lifetime>, usize),
___1: (usize, Lifetime, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action140(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action360(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action571<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Lifetime>, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action141(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action360(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action572<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Lifetime, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action140(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action309(
text,
___0,
___temp0,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action573<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action141(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action309(
text,
___0,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action574<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Lifetime, usize),
___2: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action140(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action310(
text,
___0,
___temp0,
___2,
)
}

#[allow(unused_variables)]
fn ___action575<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action141(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action310(
text,
___0,
___temp0,
___1,
)
}

#[allow(unused_variables)]
fn ___action576<
    'input,
>(
text: &'input str,
___0: (usize, MatchItem, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action258(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action363(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action577<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<MatchItem>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action259(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action363(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action578<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<MatchItem>, usize),
___1: (usize, MatchItem, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action258(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action364(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action579<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<MatchItem>, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action259(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action364(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action580<
    'input,
>(
text: &'input str,
___0: (usize, NonterminalString, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action234(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action367(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action581<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<NonterminalString>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action235(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action367(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action582<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<NonterminalString>, usize),
___1: (usize, NonterminalString, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action234(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action368(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action583<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<NonterminalString>, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action235(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action368(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action584<
    'input,
>(
text: &'input str,
___0: (usize, Pattern<TypeRef>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action268(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action371(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action585<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action269(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action371(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action586<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
___1: (usize, Pattern<TypeRef>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action268(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action372(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action587<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action269(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action372(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action588<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action536(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action589<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action536(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action590<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action537(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action591<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action537(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action592<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action538(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action593<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action538(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action594<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action539(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action595<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action539(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action596<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action540(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action597<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action540(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action598<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action541(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action599<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action541(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action600<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action542(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action601<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action542(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action602<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action543(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action603<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action543(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action604<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action544(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action605<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action544(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action606<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action545(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action607<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action545(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action608<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action546(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action609<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action546(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action610<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action547(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action611<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action547(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action612<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action548(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action613<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action548(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action614<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action549(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action615<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action549(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action616<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action550(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action617<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action550(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action618<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action551(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action619<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action551(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action620<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action552(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action621<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action552(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action622<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action553(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action623<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action553(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action624<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action554(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action625<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action554(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action626<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action555(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action627<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action555(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action628<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action556(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action629<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action556(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action630<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action557(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action631<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action557(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action632<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action558(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action633<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action558(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action634<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action559(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action635<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action559(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action636<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action560(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action637<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action560(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action638<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action561(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action639<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action561(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action640<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action562(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action641<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action562(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action642<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action563(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action643<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action563(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action644<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action564(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action645<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action564(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action646<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action565(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action647<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action565(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action648<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action566(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action649<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action566(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action650<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action191(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action567(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action651<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action192(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action567(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action652<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ExprSymbol
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action145(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action52(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action653<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
) -> ExprSymbol
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action146(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action52(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action654<
    'input,
>(
text: &'input str,
___0: (usize, Symbol, usize),
) -> Vec<Symbol>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action244(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action375(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action655<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Symbol>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action245(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action375(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action656<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Symbol, usize),
) -> Vec<Symbol>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action244(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action376(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action657<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
) -> Vec<Symbol>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action245(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action376(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action658<
    'input,
>(
text: &'input str,
___0: (usize, TypeBound<TypeRef>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action214(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action379(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action659<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action215(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action379(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action660<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
___1: (usize, TypeBound<TypeRef>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action214(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action380(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action661<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action215(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action380(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action662<
    'input,
>(
text: &'input str,
___0: (usize, TypeBoundParameter<TypeRef>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action224(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action383(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action663<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action225(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action383(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action664<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
___1: (usize, TypeBoundParameter<TypeRef>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action224(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action384(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action665<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action225(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action384(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action666<
    'input,
>(
text: &'input str,
___0: (usize, TypeParameter, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action201(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action387(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action667<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeParameter>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action202(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action387(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action668<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeParameter>, usize),
___1: (usize, TypeParameter, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action201(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action388(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action669<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeParameter>, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action202(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action388(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action670<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action219(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action391(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action671<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeRef>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action220(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action391(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action672<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, TypeRef, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action219(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action392(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action673<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action220(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action392(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action674<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action249(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action395(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action675<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeRef>
{
let ___start0 = ___lookbehind.clone();
let ___end0 = ___lookahead.clone();
let ___temp0 = ___action250(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action395(
text,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action676<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, TypeRef, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action249(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action396(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action677<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.2.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action250(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action396(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
fn ___action678<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action588(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action679<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action588(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action680<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action589(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action681<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action589(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action682<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action590(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action683<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action590(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action684<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action591(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action685<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action591(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action686<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Parameter>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action592(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action687<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action592(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action688<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action593(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action689<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action593(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action690<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Parameter>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action594(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action691<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action594(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action692<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action595(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action693<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action595(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action694<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action596(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action695<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action596(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action696<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action597(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action697<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action597(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action698<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action598(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action699<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action598(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action700<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action599(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action701<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action599(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action702<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<WhereClause<TypeRef>>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action600(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action703<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action600(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action704<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action601(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action705<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action601(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action706<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action602(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
fn ___action707<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action602(
text,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action708<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action603(
text,
___0,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action709<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action603(
text,
___0,
___temp0,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action710<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action604(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action711<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action604(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action712<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action605(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action713<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action605(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action714<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action606(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action715<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action606(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action716<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action607(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action717<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action607(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action718<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Parameter>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action608(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action719<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action608(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action720<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action609(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action721<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action609(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action722<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Parameter>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action610(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action723<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action610(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action724<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action611(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action725<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action611(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action726<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action612(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action727<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action612(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action728<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action613(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action729<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action613(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action730<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action614(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action731<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action614(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action732<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action615(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action733<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action615(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action734<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<WhereClause<TypeRef>>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action616(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action735<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action616(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action736<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action617(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action737<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action617(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action738<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action618(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action739<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action618(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action740<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action619(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action741<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action619(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action742<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action620(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action743<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action620(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action744<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action621(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action745<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action621(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action746<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action622(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action747<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action622(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action748<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action623(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action749<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action623(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action750<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action624(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action751<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action624(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action752<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action625(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action753<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action625(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action754<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action626(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action755<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action626(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action756<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action627(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action757<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action627(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action758<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action628(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action759<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action628(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action760<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action629(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action761<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action629(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action762<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action630(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action763<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action630(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action764<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action631(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action765<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action631(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action766<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action632(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action767<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action632(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action768<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action633(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action769<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action633(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action770<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action634(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
fn ___action771<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action634(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action772<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action635(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action773<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action635(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action774<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action636(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action775<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action636(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action776<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action637(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action777<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action637(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
fn ___action778<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action638(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action779<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action638(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action780<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action639(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action781<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action639(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action782<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action640(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action783<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action640(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action784<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action641(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action785<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action641(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action786<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action642(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action787<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action642(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action788<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action643(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action789<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action643(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action790<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action644(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action791<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action644(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action792<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action645(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action793<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action645(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
fn ___action794<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action646(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action795<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action646(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action796<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action647(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action797<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action647(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action798<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action648(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action799<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action648(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action800<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action649(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
fn ___action801<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action649(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
fn ___action802<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Annotation>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action650(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
fn ___action803<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0.clone();
let ___end0 = ___0.2.clone();
let ___temp0 = ___action190(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action650(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action804<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Annotation>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2.clone();
let ___end0 = ___1.0.clone();
let ___temp0 = ___action189(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action651(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
fn ___action805<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Annotation>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0.clone();
let ___end0 = ___1.2.clone();
let ___temp0 = ___action190(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action651(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

pub trait ___ToTriple<'input, >
{
fn to_triple(value: Self) -> Result<(usize,Tok<'input>,usize), ___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>>;
}

impl<'input, > ___ToTriple<'input, > for (usize, Tok<'input>, usize)
{
fn to_triple(value: Self) -> Result<(usize,Tok<'input>,usize), ___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>> {
Ok(value)
}
}
impl<'input, > ___ToTriple<'input, > for Result<(usize, Tok<'input>, usize), tok::Error>
{
fn to_triple(value: Self) -> Result<(usize,Tok<'input>,usize), ___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>> {
match value {
Ok(v) => Ok(v),
Err(error) => Err(___lalrpop_util::ParseError::User { error }),
}
}
}
