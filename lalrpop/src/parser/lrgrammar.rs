// auto-generated: "lalrpop 0.22.2"
// sha3: fed8365f08e95c14bd5cc9bac2b6709f7326576594528024bc23120296396ae1
use string_cache::DefaultAtom as Atom;
use crate::grammar::parse_tree::*;
use crate::grammar::pattern::*;
use std::iter::once;
use crate::tok::{self, Tok};
use crate::util::strip;
use lalrpop_util::ParseError;
use super::Top;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as ___lalrpop_util;
#[allow(unused_imports)]
use self::___lalrpop_util::state_machine as ___state_machine;
#[allow(unused_extern_crates)]
extern crate alloc;

#[rustfmt::skip]
#[allow(explicit_outlives_requirements, non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::needless_lifetimes, clippy::type_complexity, clippy::needless_return, clippy::too_many_arguments, clippy::match_single_binding, clippy::clone_on_copy, clippy::unit_arg)]
mod ___parse___Top {

use string_cache::DefaultAtom as Atom;
use crate::grammar::parse_tree::*;
use crate::grammar::pattern::*;
use std::iter::once;
use crate::tok::{self, Tok};
use crate::util::strip;
use lalrpop_util::ParseError;
use super::super::Top;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as ___lalrpop_util;
#[allow(unused_imports)]
use self::___lalrpop_util::state_machine as ___state_machine;
#[allow(unused_extern_crates)]
extern crate alloc;
use super::___ToTriple;
#[allow(dead_code)]
pub(crate) enum ___Symbol<'input>
 {
Variant0(Tok<'input>),
Variant1(&'input str),
Variant2(Option<Tok<'input>>),
Variant3(TypeRef),
Variant4(Option<TypeRef>),
Variant5(Vec<TypeBoundParameter<TypeRef>>),
Variant6(Option<Vec<TypeBoundParameter<TypeRef>>>),
Variant7(Condition),
Variant8(Option<Condition>),
Variant9(()),
Variant10(Alternative),
Variant11(alloc::vec::Vec<Alternative>),
Variant12(Attribute),
Variant13(alloc::vec::Vec<Attribute>),
Variant14(Conversion),
Variant15(alloc::vec::Vec<Conversion>),
Variant16(FieldPattern<TypeRef>),
Variant17(alloc::vec::Vec<FieldPattern<TypeRef>>),
Variant18(Parameter),
Variant19(alloc::vec::Vec<Parameter>),
Variant20(WhereClause<TypeRef>),
Variant21(alloc::vec::Vec<WhereClause<TypeRef>>),
Variant22(Atom),
Variant23(alloc::vec::Vec<Atom>),
Variant24(Lifetime),
Variant25(alloc::vec::Vec<Lifetime>),
Variant26(MatchItem),
Variant27(alloc::vec::Vec<MatchItem>),
Variant28(NonterminalString),
Variant29(alloc::vec::Vec<NonterminalString>),
Variant30(Pattern<TypeRef>),
Variant31(alloc::vec::Vec<Pattern<TypeRef>>),
Variant32(Symbol),
Variant33(alloc::vec::Vec<Symbol>),
Variant34(TupleItem),
Variant35(alloc::vec::Vec<TupleItem>),
Variant36(TypeBound<TypeRef>),
Variant37(alloc::vec::Vec<TypeBound<TypeRef>>),
Variant38(TypeBoundParameter<TypeRef>),
Variant39(alloc::vec::Vec<TypeBoundParameter<TypeRef>>),
Variant40(TypeParameter),
Variant41(alloc::vec::Vec<TypeParameter>),
Variant42(alloc::vec::Vec<TypeRef>),
Variant43(usize),
Variant44(ActionKind),
Variant45(Option<ActionKind>),
Variant46(Option<Alternative>),
Variant47(Vec<Alternative>),
Variant48(AssociatedType),
Variant49(alloc::vec::Vec<AssociatedType>),
Variant50((AttributeArg)),
Variant51(Option<(AttributeArg)>),
Variant52(Option<Attribute>),
Variant53(Vec<Attribute>),
Variant54(Vec<Conversion>),
Variant55(Vec<Parameter>),
Variant56(Vec<WhereClause<TypeRef>>),
Variant57(Vec<MatchItem>),
Variant58(Vec<NonterminalString>),
Variant59(Vec<Pattern<TypeRef>>),
Variant60(Vec<Symbol>),
Variant61(Vec<TypeParameter>),
Variant62(Vec<TypeRef>),
Variant63(ConditionOp),
Variant64(Option<Conversion>),
Variant65(EnumToken),
Variant66(ExprSymbol),
Variant67(GrammarItem),
Variant68(Option<FieldPattern<TypeRef>>),
Variant69(Grammar),
Variant70(alloc::vec::Vec<GrammarItem>),
Variant71(Option<Parameter>),
Variant72(Option<Vec<Parameter>>),
Variant73(Option<Vec<TypeParameter>>),
Variant74(Option<WhereClause<TypeRef>>),
Variant75(Option<Vec<WhereClause<TypeRef>>>),
Variant76(Option<Lifetime>),
Variant77(MatchContents),
Variant78(Option<MatchItem>),
Variant79(MatchMapping),
Variant80(TerminalLiteral),
Variant81(MatchToken),
Variant82((NonterminalString, Vec<NonterminalString>)),
Variant83(Option<NonterminalString>),
Variant84(Path),
Variant85(Option<Pattern<TypeRef>>),
Variant86(PatternKind<TypeRef>),
Variant87(Vec<Lifetime>),
Variant88(Vec<TypeBound<TypeRef>>),
Variant89(TerminalString),
Variant90(RepeatOp),
Variant91(String),
Variant92(alloc::vec::Vec<String>),
Variant93(Option<Symbol>),
Variant94(SymbolKind),
Variant95(Top),
Variant96(Tuple),
Variant97(Option<TypeBound<TypeRef>>),
Variant98(Option<TypeBoundParameter<TypeRef>>),
Variant99(Option<TypeParameter>),
Variant100(Visibility),
}
const ___ACTION: &[i16] = &[
// State 0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,4,6,3,
// State 1
0,0,10,0,0,0,0,0,0,0,0,0,0,297,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,296,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 2
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 3
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,305,0,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 4
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,318,315,0,0,0,0,0,14,0,314,0,0,0,0,0,0,0,0,0,0,0,13,15,0,0,0,0,0,0,0,0,0,0,0,319,0,0,0,0,0,
// State 5
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 6
0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 7
0,0,24,0,0,0,0,0,0,0,0,0,0,297,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,296,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 8
0,0,26,0,0,0,0,0,0,0,0,0,0,297,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 9
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,
// State 10
0,0,0,0,0,0,0,0,0,0,0,332,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,-166,0,0,0,0,0,0,0,0,
// State 11
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 12
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,318,315,0,0,0,0,0,14,0,314,0,0,0,0,0,0,0,0,0,0,0,13,15,0,0,0,0,0,0,0,-178,0,0,0,319,0,0,0,0,0,
// State 13
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 14
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 15
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 16
0,0,0,0,0,0,43,0,0,0,0,0,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 17
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,0,
// State 18
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 19
0,0,0,0,0,0,0,0,0,0,0,357,0,0,0,0,316,317,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 20
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,
// State 21
0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 22
0,0,50,0,0,0,0,0,0,0,0,0,0,297,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 23
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,
// State 24
0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 25
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,
// State 26
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 27
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,
// State 28
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,0,
// State 29
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-162,0,0,0,0,0,0,0,0,0,
// State 30
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 31
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,331,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 32
0,0,0,0,0,0,0,0,0,0,0,332,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,-168,0,0,0,0,0,0,0,0,
// State 33
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,318,315,0,0,0,0,0,14,0,314,0,0,0,0,0,0,0,0,0,0,0,13,15,0,0,0,0,0,0,0,-178,0,0,0,319,0,0,0,0,0,
// State 34
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,386,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,387,0,0,0,0,0,0,0,0,0,0,0,
// State 35
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,318,315,0,0,0,0,0,14,0,314,0,0,0,0,0,0,0,0,0,0,0,13,15,0,0,0,0,0,0,0,-180,0,0,0,319,0,0,0,0,0,
// State 36
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 37
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,-198,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 38
0,0,0,0,0,-452,0,0,0,0,0,0,-452,0,0,-452,-452,-452,0,-452,0,-452,0,0,0,0,0,-452,0,0,0,-452,-452,-452,-452,-452,-452,0,0,0,-452,-452,-452,-452,0,400,401,-452,0,-452,-452,399,0,0,0,0,0,0,0,
// State 39
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,347,348,0,0,0,0,0,-212,0,0,0,0,0,0,0,0,0,
// State 40
0,0,0,0,0,0,78,0,0,0,0,0,346,0,0,349,406,407,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,77,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 41
0,0,0,0,0,0,79,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 42
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 43
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,-196,0,0,0,0,0,0,0,0,0,
// State 44
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,
// State 45
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,
// State 46
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 47
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,
// State 48
0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 49
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,
// State 50
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,
// State 51
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,
// State 52
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 53
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,
// State 54
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,0,
// State 55
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,0,
// State 56
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 57
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-146,0,425,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,-146,-146,0,0,0,0,0,0,0,0,0,
// State 58
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 59
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,
// State 60
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 61
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 62
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-164,0,0,0,0,0,0,0,0,0,
// State 63
0,0,0,0,0,0,0,375,0,0,0,0,0,0,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 64
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 65
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,435,436,351,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 66
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,331,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 67
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,-428,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-428,0,0,0,0,0,0,0,0,
// State 68
0,0,0,0,0,0,0,0,0,0,0,448,0,0,0,0,316,317,331,0,0,0,0,0,0,0,14,-432,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-432,0,0,0,0,0,0,0,0,
// State 69
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,331,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 70
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,452,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,
// State 71
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,-200,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 72
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,-182,0,0,0,0,40,41,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 73
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,347,348,0,0,0,0,0,-213,0,0,0,0,0,0,0,0,0,
// State 74
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,0,0,0,0,0,0,0,0,0,400,401,0,0,0,0,399,0,0,0,0,0,0,0,
// State 75
0,0,0,0,0,0,127,0,0,0,0,0,346,0,0,349,406,407,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,41,347,348,0,0,0,0,0,-212,0,0,0,0,0,0,0,0,0,
// State 76
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 77
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 78
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 79
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,0,
// State 80
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,-198,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 81
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,331,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 82
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 83
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,0,0,0,0,0,0,0,0,
// State 84
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 85
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 86
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 87
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,0,0,0,0,0,0,0,0,
// State 88
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,0,
// State 89
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 90
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,
// State 91
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0,0,0,0,0,0,0,
// State 92
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,145,0,0,0,0,0,0,0,0,
// State 93
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 94
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 95
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,0,0,0,0,0,0,0,0,
// State 96
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 97
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 98
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 99
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,0,0,0,0,0,0,0,
// State 100
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,156,0,0,0,0,0,0,0,0,
// State 101
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 102
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 103
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,
// State 104
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 105
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 106
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 107
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-154,0,0,0,0,0,0,0,0,0,
// State 108
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 109
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 110
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 111
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 112
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 113
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 114
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 115
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,435,436,351,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 116
176,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,492,0,0,0,0,0,0,0,0,0,0,0,
// State 117
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-170,0,0,0,0,0,498,0,0,0,0,0,
// State 118
0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 119
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,-430,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-430,0,0,0,0,0,0,0,0,
// State 120
0,0,0,0,0,0,0,0,0,0,0,448,0,0,0,0,316,317,331,0,0,0,0,0,0,0,14,-434,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-434,0,0,0,0,0,0,0,0,
// State 121
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,318,315,0,0,0,0,0,14,0,314,0,0,0,0,0,0,0,0,0,0,0,13,15,0,0,0,0,0,0,0,0,0,0,0,319,0,0,0,0,0,
// State 122
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,-184,0,0,0,0,40,41,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 123
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,77,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 124
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,77,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 125
0,0,0,0,0,0,127,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 126
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 127
0,0,0,0,0,0,127,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 128
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 129
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 130
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 131
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 132
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 133
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 134
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 135
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,0,0,0,0,0,0,0,0,
// State 136
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 137
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 138
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 139
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,0,0,0,0,0,0,0,0,
// State 140
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,0,0,0,
// State 141
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 142
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 143
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,0,0,0,0,0,0,
// State 144
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 145
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 146
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 147
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 148
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 149
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 150
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 151
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 152
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 153
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 154
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,0,0,
// State 155
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 156
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 157
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 158
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 159
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 160
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 161
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 162
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 163
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 164
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-156,0,0,0,0,0,0,0,0,0,
// State 165
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 166
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 167
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 168
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 169
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-170,0,0,0,0,0,498,0,0,0,0,0,
// State 170
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,436,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 171
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 172
0,0,0,0,0,229,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,533,534,535,536,0,295,0,230,0,40,41,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 173
176,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,538,0,0,0,0,0,0,0,0,0,0,0,
// State 174
0,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,539,0,0,0,0,0,0,0,0,0,0,0,
// State 175
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 176
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 177
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-172,0,0,0,0,0,498,0,0,0,0,0,
// State 178
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 179
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,0,
// State 180
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,-186,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 181
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,331,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 182
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 183
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,559,0,0,0,0,0,0,0,0,0,400,401,0,0,0,0,399,0,0,0,0,0,0,0,
// State 184
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,560,0,0,0,0,0,0,0,0,0,400,401,0,0,0,0,399,0,0,0,0,0,0,0,
// State 185
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,77,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 186
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 187
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 188
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 189
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 190
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 191
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 192
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 193
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 194
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 195
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 196
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 197
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 198
0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,
// State 199
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 200
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 201
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 202
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 203
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 204
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 205
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 206
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 207
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 208
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 209
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 210
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 211
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 212
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 213
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 214
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 215
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 216
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 217
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 218
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 219
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 220
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 221
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 222
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 223
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 224
0,0,0,0,0,229,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,533,534,535,536,0,295,0,230,0,40,41,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 225
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,436,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 226
0,0,0,0,0,0,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,40,41,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 227
0,0,0,0,0,259,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,-122,0,0,0,533,534,535,536,0,0,0,0,0,40,41,347,348,0,0,0,-122,0,0,-122,0,0,0,0,0,0,0,0,
// State 228
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,436,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 229
0,0,0,0,0,229,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,533,534,535,536,0,295,0,0,0,40,41,347,348,0,0,0,-150,0,0,0,0,0,0,0,0,0,0,0,
// State 230
0,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,576,0,0,0,0,0,0,0,0,0,0,0,
// State 231
0,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,577,0,0,0,0,0,0,0,0,0,0,0,
// State 232
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,-188,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 233
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,584,0,0,0,0,0,0,0,0,0,400,401,0,0,0,0,399,0,0,0,0,0,0,0,
// State 234
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 235
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 236
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 237
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 238
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 239
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 240
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 241
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 242
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 243
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 244
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 245
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 246
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 247
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 248
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 249
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 250
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 251
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 252
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 253
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 254
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 255
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 256
0,0,0,0,0,229,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,533,534,535,536,0,295,0,230,0,40,41,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 257
0,0,0,0,0,278,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,-123,0,0,0,533,534,535,536,0,0,0,0,0,40,41,347,348,0,0,0,-123,0,0,-123,0,0,0,0,0,0,0,0,
// State 258
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,436,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 259
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,533,534,535,536,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 260
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,590,591,0,0,0,0,0,592,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,593,0,0,0,0,0,0,
// State 261
0,0,0,0,0,229,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,533,534,535,536,0,295,0,0,0,40,41,347,348,0,0,0,-152,0,0,0,0,0,0,0,0,0,0,0,
// State 262
0,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,597,0,0,0,0,0,0,0,0,0,0,0,
// State 263
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,305,0,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,-158,0,0,0,0,0,0,0,0,0,0,0,
// State 264
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 265
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 266
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,317,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 267
0,0,0,0,0,0,0,0,0,0,0,448,0,0,0,0,316,317,331,0,0,0,0,0,0,0,14,-432,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-432,0,0,0,0,0,0,0,0,
// State 268
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,0,
// State 269
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 270
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 271
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 272
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 273
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 274
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 275
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 276
0,0,0,0,0,229,0,0,0,0,0,0,346,0,0,349,350,351,0,307,0,306,0,0,0,0,0,0,0,0,0,533,534,535,536,0,295,0,230,0,40,41,347,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 277
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,436,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 278
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-118,0,0,0,533,534,535,536,0,0,0,0,0,0,0,0,0,0,0,0,-118,0,0,-118,0,0,0,0,0,0,0,0,
// State 279
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,307,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 280
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,305,0,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,-160,0,0,0,0,0,0,0,0,0,0,0,
// State 281
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,305,0,0,307,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 282
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 283
0,373,0,374,0,0,0,375,0,0,0,0,0,297,0,-532,-532,-532,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 284
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-119,0,0,0,533,534,535,536,0,0,0,0,0,0,0,0,0,0,0,0,-119,0,0,-119,0,0,0,0,0,0,0,0,
// State 285
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,0,
// State 286
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,331,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,-186,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 287
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 288
0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,316,317,0,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,16,0,0,19,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 289
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 290
0,0,-139,0,0,0,0,-139,0,0,0,0,-139,0,0,-139,-139,-139,0,-139,0,-139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-139,0,0,0,-139,-139,-139,-139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 291
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 292
0,0,-445,0,0,0,0,0,0,0,0,0,0,-445,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-445,-445,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 293
0,0,-527,0,0,0,0,0,0,0,0,0,0,-527,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-527,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 294
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 295
0,0,-442,0,0,0,0,0,0,0,0,0,0,-442,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-442,-442,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 296
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,326,0,0,0,0,0,0,0,0,
// State 297
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 298
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 299
0,0,0,0,0,-437,0,0,0,0,0,0,-437,0,0,-437,-437,-437,0,-437,0,-437,0,0,0,0,0,-437,0,0,0,-437,-437,-437,-437,-437,-437,0,0,0,-437,-437,-437,-437,0,-437,-437,-437,0,-437,-437,-437,0,0,0,0,0,0,0,
// State 300
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 301
0,0,0,0,0,-436,0,0,0,0,0,0,-436,0,0,-436,-436,-436,0,-436,0,-436,0,0,0,0,0,-436,0,0,0,-436,-436,-436,-436,-436,-436,0,0,0,-436,-436,-436,-436,0,-436,-436,-436,0,-436,-436,-436,0,0,0,0,0,0,0,
// State 302
0,0,0,0,0,-435,0,0,0,0,0,0,-435,0,0,-435,-435,-435,0,-435,0,-435,0,0,0,0,0,-435,0,0,0,-435,-435,-435,-435,-435,-435,0,0,0,-435,-435,-435,-435,0,-435,-435,-435,0,-435,-435,-435,0,0,0,0,0,0,0,
// State 303
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 304
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-472,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 305
0,0,0,0,0,-438,0,0,0,0,0,0,-438,0,0,-438,-438,-438,0,-438,0,-438,0,0,0,0,0,-438,0,0,0,-438,-438,-438,-438,-438,-438,0,0,0,-438,-438,-438,-438,0,-438,-438,-438,0,-438,-438,-438,0,0,0,0,0,0,0,
// State 306
0,0,0,0,0,-448,0,0,0,0,0,0,-448,0,0,-448,-448,-448,0,-448,0,-448,0,0,0,0,0,-448,0,0,0,-448,-448,-448,-448,-448,-448,0,0,0,-448,-448,-448,-448,0,-448,-448,-448,0,-448,-448,-448,0,0,0,0,0,0,0,
// State 307
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,333,0,0,0,0,0,0,0,0,0,0,0,
// State 308
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-408,335,-408,0,-408,0,0,0,0,0,-408,0,0,-408,0,-408,-408,0,0,0,-408,0,-408,-408,-408,-408,0,0,0,0,0,0,0,0,
// State 309
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-425,0,0,0,0,0,0,0,0,0,0,35,0,34,0,0,0,0,0,0,-425,0,-425,0,0,0,0,0,0,0,0,0,
// State 310
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 311
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-410,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-410,0,-410,0,0,0,0,0,0,0,0,0,
// State 312
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-426,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-426,0,-426,0,0,0,0,0,0,0,0,0,
// State 313
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-421,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-421,0,-421,0,0,0,0,0,0,0,0,0,
// State 314
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-424,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-424,0,-424,0,0,0,0,0,0,0,0,0,
// State 315
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-378,-378,-378,0,-378,0,0,0,0,0,-378,0,0,-378,0,-378,-378,0,0,0,-378,0,-378,-378,-378,-378,0,0,0,0,0,0,0,0,
// State 316
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-379,-379,-379,0,-379,0,0,0,0,0,-379,0,0,-379,0,-379,-379,0,0,0,-379,0,-379,-379,-379,-379,0,0,0,0,0,0,0,0,
// State 317
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-447,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-447,0,-447,0,0,0,0,0,0,0,0,0,
// State 318
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-420,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-420,0,-420,0,0,0,0,0,0,0,0,0,
// State 319
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-511,0,-511,0,-511,0,0,0,0,0,-511,0,0,-511,0,0,38,0,0,0,-511,0,0,-511,-511,-511,0,0,0,0,0,0,0,0,
// State 320
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 321
0,0,-140,0,0,0,0,-140,0,0,0,0,-140,0,0,-140,-140,-140,0,-140,0,-140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-140,0,0,0,-140,-140,-140,-140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 322
0,0,-446,0,0,0,0,0,0,0,0,0,0,-446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-446,-446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 323
0,0,-528,0,0,0,0,0,0,0,0,0,0,-528,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-528,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 324
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,
// State 325
0,-524,-524,-524,0,0,0,-524,0,0,0,0,0,-524,0,-524,-524,-524,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-524,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 326
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-375,0,0,0,0,0,0,0,0,
// State 327
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-165,0,0,0,0,0,0,0,0,
// State 328
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 329
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 330
0,0,0,0,0,0,-380,0,0,0,0,0,0,0,-380,0,-380,-380,0,0,0,0,-380,0,0,-380,-380,-380,0,0,0,0,0,0,0,-380,-380,0,0,-380,-380,0,0,0,0,-380,0,0,0,0,-380,0,0,0,0,0,0,0,0,
// State 331
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 332
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 333
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-409,382,-409,0,-409,0,0,0,0,0,-409,0,0,-409,0,-409,-409,0,0,0,-409,0,-409,-409,-409,-409,0,0,0,0,0,0,0,0,
// State 334
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-53,-53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 335
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,389,0,0,0,0,0,0,0,0,0,
// State 336
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,390,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-177,0,0,0,0,0,0,0,0,0,
// State 337
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-406,335,-406,0,-406,0,0,0,0,0,-406,0,0,-406,0,-406,-406,0,0,0,-406,0,-406,-406,-406,-406,0,0,0,0,0,0,0,0,
// State 338
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,392,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 339
0,0,0,0,0,-466,0,0,0,0,0,0,-466,0,0,-466,-466,-466,0,-466,0,-466,0,0,0,0,0,-466,0,0,0,-466,-466,-466,-466,-466,-466,0,0,0,-466,-466,-466,-466,0,-466,-466,-466,0,-466,-466,-466,0,0,0,0,0,0,0,
// State 340
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 341
0,0,0,0,0,-464,0,0,0,0,0,0,-464,0,0,-464,-464,-464,0,-464,0,-464,0,0,0,0,0,-464,0,0,0,-464,-464,-464,-464,-464,-464,0,0,0,-464,-464,-464,-464,0,-464,-464,-464,0,-464,-464,-464,0,0,0,0,0,0,0,
// State 342
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,397,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 343
0,0,0,0,0,-457,0,0,0,0,0,0,-457,0,0,-457,-457,-457,0,-457,0,-457,0,0,0,0,0,-457,0,0,0,-457,-457,-457,-457,-457,-457,0,0,0,-457,-457,-457,-457,0,-457,-457,-457,0,-457,-457,-457,0,0,0,0,0,0,0,
// State 344
0,0,0,0,0,-459,0,0,0,0,0,0,-459,0,0,-459,-459,-459,0,-459,0,-459,0,0,0,0,0,-459,0,0,0,-459,-459,-459,-459,-459,-459,0,0,0,-459,-459,-459,-459,0,-459,-459,-459,0,-459,-459,-459,0,0,0,0,0,0,0,
// State 345
0,0,0,0,0,-470,0,0,0,0,0,0,-470,0,0,-470,-470,-470,0,-470,0,-470,0,0,0,0,0,-470,0,0,0,-470,-470,-470,-470,-470,-470,0,0,0,-470,-470,-470,-470,0,-470,-470,-470,0,-470,-470,-470,0,0,0,0,0,0,0,
// State 346
0,0,0,0,0,-468,0,0,0,0,0,0,-468,0,0,-468,-468,-468,0,-468,0,-468,0,0,0,0,0,-468,0,0,0,-468,-468,-468,-468,-468,-468,0,0,0,-468,-468,-468,-468,0,-468,-468,-468,0,-468,-468,-468,0,0,0,0,0,0,0,
// State 347
0,0,0,0,0,-469,0,0,0,0,0,0,-469,0,0,-469,-469,-469,0,-469,0,-469,0,0,0,0,0,-469,0,0,0,-469,-469,-469,-469,-469,-469,0,0,0,-469,-469,-469,-469,0,-469,-469,-469,0,-469,-469,-469,0,0,0,0,0,0,0,
// State 348
0,0,0,0,0,-211,0,0,0,0,0,0,-211,0,0,-211,-211,-211,0,-211,0,-211,0,0,0,0,0,-211,0,0,0,-211,-211,-211,-211,-211,-211,0,0,0,-211,-211,-211,-211,0,-211,-211,-211,0,-211,-211,-211,0,0,0,0,0,0,0,
// State 349
0,0,0,0,0,-465,0,0,0,0,0,0,-465,0,0,-465,-465,-465,0,-465,0,-465,0,0,0,0,0,-465,0,0,0,-465,-465,-465,-465,-465,-465,0,0,0,-465,-465,-465,-465,0,-465,-465,-465,0,-465,-465,-465,0,0,0,0,0,0,0,
// State 350
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-383,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 351
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-509,0,-509,0,-509,0,0,0,0,0,-509,0,0,-509,0,0,0,0,0,0,-509,0,0,-509,-509,-509,0,0,0,0,0,0,0,0,
// State 352
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,411,0,0,0,0,0,0,0,0,0,
// State 353
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-193,0,0,0,0,0,0,0,0,0,
// State 354
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,413,0,0,0,0,0,0,0,0,0,0,
// State 355
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-513,0,-513,0,-513,0,0,0,0,0,-513,0,0,-513,0,80,81,0,0,0,-513,0,0,-513,-513,-513,0,0,0,0,0,0,0,0,
// State 356
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 357
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,
// State 358
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,
// State 359
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,
// State 360
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,423,0,0,0,0,0,0,0,0,0,0,
// State 361
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,
// State 362
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,0,0,0,0,0,
// State 363
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,428,0,0,0,0,0,0,0,0,0,
// State 364
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,429,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-161,0,0,0,0,0,0,0,0,0,
// State 365
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 366
0,-355,0,-355,0,0,0,-355,0,0,0,0,0,-355,0,-355,-355,-355,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-355,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 367
0,-359,0,-359,0,0,0,-359,0,0,0,0,0,-359,0,-359,-359,-359,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-359,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 368
0,-354,0,-354,0,0,0,-354,0,0,0,0,0,-354,0,-354,-354,-354,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-354,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 369
0,-393,0,-393,431,0,0,-393,0,0,0,0,0,-393,0,-393,-393,-393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 370
0,-356,0,-356,0,0,0,-356,0,0,0,0,0,-356,0,-356,-356,-356,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-356,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 371
0,-353,0,-353,0,0,0,-353,0,0,0,0,0,-353,0,-353,-353,-353,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-353,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 372
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 373
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 374
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-531,-531,-531,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 375
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 376
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-500,0,0,0,0,0,0,0,-500,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 377
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-499,0,0,0,0,0,0,0,-499,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 378
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0,0,0,0,0,0,-189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 379
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,440,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-167,0,0,0,0,0,0,0,0,
// State 380
0,0,0,0,0,0,0,0,0,0,0,-48,0,0,-48,0,-48,-48,-48,0,0,0,-48,0,0,0,-48,0,0,0,0,0,0,0,0,0,-48,0,0,-48,-48,0,0,0,0,0,0,0,0,0,-48,0,0,0,0,0,0,0,0,
// State 381
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-54,-54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 382
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,450,0,0,0,0,0,0,0,0,0,
// State 383
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,454,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,455,0,0,0,0,0,0,0,0,0,0,0,
// State 384
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 385
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,456,0,0,0,0,0,0,0,0,0,0,0,
// State 386
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-415,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-415,0,-415,0,0,0,0,0,0,0,0,0,
// State 387
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,457,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-179,0,0,0,0,0,0,0,0,0,
// State 388
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-423,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-423,0,-423,0,0,0,0,0,0,0,0,0,
// State 389
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-73,-73,0,-73,-73,0,0,0,0,0,-73,0,-73,0,0,0,0,0,0,0,0,0,0,0,-73,-73,0,0,0,0,0,0,0,-73,0,0,0,-73,0,0,0,0,0,
// State 390
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-407,382,-407,0,-407,0,0,0,0,0,-407,0,0,-407,0,-407,-407,0,0,0,-407,0,-407,-407,-407,-407,0,0,0,0,0,0,0,0,
// State 391
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-422,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-422,0,-422,0,0,0,0,0,0,0,0,0,
// State 392
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,459,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 393
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-521,0,0,0,0,0,0,0,-521,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 394
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-520,0,0,0,0,0,0,0,-520,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 395
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,460,0,0,0,0,0,0,0,-197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 396
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-505,0,-505,0,-505,0,0,0,0,0,-505,0,0,-505,0,0,0,0,0,0,-505,0,0,-505,-505,-505,0,0,0,0,0,0,0,0,
// State 397
0,0,0,0,0,-458,0,0,0,0,0,0,-458,0,0,-458,-458,-458,0,-458,0,-458,0,0,0,0,0,-458,0,0,0,-458,-458,-458,-458,-458,-458,0,0,0,-458,-458,-458,-458,0,-458,-458,-458,0,-458,-458,-458,0,0,0,0,0,0,0,
// State 398
0,0,0,0,0,-440,0,0,0,0,0,0,-440,0,0,-440,-440,-440,0,-440,0,-440,0,0,0,0,0,-440,0,0,0,-440,-440,-440,-440,-440,-440,0,0,0,-440,-440,-440,-440,0,-440,-440,-440,0,-440,-440,-440,0,0,0,0,0,0,0,
// State 399
0,0,0,0,0,-439,0,0,0,0,0,0,-439,0,0,-439,-439,-439,0,-439,0,-439,0,0,0,0,0,-439,0,0,0,-439,-439,-439,-439,-439,-439,0,0,0,-439,-439,-439,-439,0,-439,-439,-439,0,-439,-439,-439,0,0,0,0,0,0,0,
// State 400
0,0,0,0,0,-441,0,0,0,0,0,0,-441,0,0,-441,-441,-441,0,-441,0,-441,0,0,0,0,0,-441,0,0,0,-441,-441,-441,-441,-441,-441,0,0,0,-441,-441,-441,-441,0,-441,-441,-441,0,-441,-441,-441,0,0,0,0,0,0,0,
// State 401
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,463,0,0,0,0,0,0,0,0,0,
// State 402
0,0,0,0,0,-455,0,0,0,0,0,0,-455,0,0,-455,-455,-455,0,-455,0,-455,0,0,0,0,0,-455,0,0,0,-455,-455,-455,-455,0,0,0,0,0,-455,-455,-455,-455,0,0,0,-455,0,-455,-455,0,0,0,0,0,0,0,0,
// State 403
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 404
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 405
0,0,0,0,0,0,0,0,0,0,0,0,-465,0,0,-465,-465,-465,0,-465,0,-465,0,0,0,-378,0,-378,0,0,0,0,0,0,0,-465,0,0,0,0,-465,-465,-465,-465,0,-465,-465,0,0,-465,0,-465,0,0,0,0,0,0,0,
// State 406
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-379,0,-379,0,0,0,0,0,0,0,0,0,0,0,0,0,-383,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 407
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-508,0,-508,0,-508,0,0,0,0,0,-508,0,0,-508,0,0,0,0,0,0,-508,0,0,-508,-508,-508,0,0,0,0,0,0,0,0,
// State 408
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-507,0,-507,0,-507,0,0,0,0,0,-507,0,0,-507,0,0,0,0,0,0,-507,0,0,-507,-507,-507,0,0,0,0,0,0,0,0,
// State 409
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-195,0,0,0,0,0,0,0,0,0,
// State 410
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-503,0,-503,0,-503,0,0,0,0,0,-503,0,0,-503,0,0,0,0,0,0,-503,0,0,-503,-503,-503,0,0,0,0,0,0,0,0,
// State 411
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-101,0,-101,-101,0,0,0,0,-101,0,0,0,-101,0,0,0,0,0,0,0,0,0,-101,0,0,-101,-101,0,0,0,0,0,0,0,0,-101,0,0,0,0,0,0,0,0,0,
// State 412
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-504,0,-504,0,-504,0,0,0,0,0,-504,0,0,-504,0,0,0,0,0,0,-504,0,0,-504,-504,-504,0,0,0,0,0,0,0,0,
// State 413
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,0,0,0,0,0,0,0,0,
// State 414
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,0,
// State 415
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,0,0,0,0,0,0,0,
// State 416
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,
// State 417
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,0,0,0,0,0,0,0,
// State 418
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,0,0,0,0,0,0,0,0,
// State 419
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,0,0,0,0,0,0,0,0,
// State 420
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,0,0,0,0,0,0,0,0,
// State 421
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0,
// State 422
0,0,-136,0,0,0,0,-136,0,0,0,0,-136,0,0,-136,-136,-136,0,-136,0,-136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-136,0,0,0,-136,-136,-136,-136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 423
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-145,-145,0,0,0,0,0,0,0,0,0,
// State 424
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 425
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,0,0,0,0,0,0,0,0,
// State 426
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-163,0,0,0,0,0,0,0,0,0,
// State 427
0,0,0,0,0,0,0,0,0,0,-364,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-364,0,0,0,0,0,0,0,0,
// State 428
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43,-43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43,0,0,0,0,0,0,0,0,0,
// State 429
0,-360,0,-360,0,0,0,-360,0,0,0,0,0,-360,0,-360,-360,-360,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-360,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 430
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 431
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 432
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,0,0,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 433
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-401,0,0,0,-401,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 434
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-402,0,0,0,-402,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 435
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-403,-403,-403,0,-403,0,-403,-403,0,0,0,0,-403,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-403,0,0,0,0,0,0,
// State 436
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,0,0,0,0,0,0,0,-191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 437
0,0,0,0,0,0,0,0,0,0,-367,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-367,0,0,0,0,0,0,0,0,0,-367,0,0,0,0,0,0,0,0,
// State 438
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-96,-96,-96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 439
0,0,0,0,0,0,0,0,0,0,0,-49,0,0,-49,0,-49,-49,-49,0,0,0,-49,0,0,0,-49,0,0,0,0,0,0,0,0,0,-49,0,0,-49,-49,0,0,0,0,0,0,0,0,0,-49,0,0,0,0,0,0,0,0,
// State 440
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-427,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,502,0,0,0,0,-427,0,0,0,0,0,0,0,0,
// State 441
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-370,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-370,0,0,0,0,0,0,0,0,
// State 442
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-482,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-482,0,0,0,0,-482,0,0,0,0,0,0,0,0,
// State 443
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-490,0,0,0,0,0,0,0,0,0,0,0,0,180,181,0,0,0,-490,0,0,0,0,-490,0,0,0,0,0,0,0,0,
// State 444
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-498,0,0,0,0,0,0,0,0,
// State 445
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-431,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,504,0,0,0,0,-431,0,0,0,0,0,0,0,0,
// State 446
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-372,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-372,0,0,0,0,0,0,0,0,
// State 447
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 448
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 449
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-413,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-413,0,-413,0,0,0,0,0,0,0,0,0,
// State 450
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,506,0,0,0,0,0,0,0,0,0,0,0,
// State 451
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,
// State 452
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-417,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-417,0,-417,0,0,0,0,0,0,0,0,0,
// State 453
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-38,-38,0,0,0,0,0,0,0,0,0,0,-38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-38,0,0,0,0,0,0,0,0,0,0,0,
// State 454
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-414,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-414,0,-414,0,0,0,0,0,0,0,0,0,
// State 455
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-418,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-418,0,-418,0,0,0,0,0,0,0,0,0,
// State 456
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-74,-74,0,-74,-74,0,0,0,0,0,-74,0,-74,0,0,0,0,0,0,0,0,0,0,0,-74,-74,0,0,0,0,0,0,0,-74,0,0,0,-74,0,0,0,0,0,
// State 457
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,509,0,0,0,0,0,0,0,-199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 458
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-510,0,-510,0,-510,0,0,0,0,0,-510,0,0,-510,0,0,0,0,0,0,-510,0,0,-510,-510,-510,0,0,0,0,0,0,0,0,
// State 459
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-106,0,-106,-106,-106,0,0,0,-106,0,0,0,-106,0,0,0,0,0,0,0,0,-106,-106,0,0,-106,-106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 460
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 461
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,-181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 462
0,0,0,0,0,-467,0,0,0,0,0,0,-467,0,0,-467,-467,-467,0,-467,0,-467,0,0,0,0,0,-467,0,0,0,-467,-467,-467,-467,-467,-467,0,0,0,-467,-467,-467,-467,0,-467,-467,-467,0,-467,-467,-467,0,0,0,0,0,0,0,
// State 463
0,0,0,0,0,-456,0,0,0,0,0,0,-456,0,0,-456,-456,-456,0,-456,0,-456,0,0,0,0,0,-456,0,0,0,-456,-456,-456,-456,0,0,0,0,0,-456,-456,-456,-456,0,0,0,-456,0,-456,-456,0,0,0,0,0,0,0,0,
// State 464
0,0,0,0,0,-451,0,0,0,0,0,0,-451,0,0,-451,-451,-451,0,-451,0,-451,0,0,0,0,0,-451,0,0,0,-451,-451,-451,-451,-451,-451,0,0,0,-451,-451,-451,-451,0,0,0,-451,0,-451,-451,0,0,0,0,0,0,0,0,
// State 465
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-479,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-479,0,0,0,0,0,0,0,0,0,
// State 466
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,514,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 467
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-480,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-480,0,0,0,0,0,0,0,0,0,
// State 468
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 469
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-506,0,-506,0,-506,0,0,0,0,0,-506,0,0,-506,0,0,0,0,0,0,-506,0,0,-506,-506,-506,0,0,0,0,0,0,0,0,
// State 470
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-102,0,-102,-102,0,0,0,0,-102,0,0,0,-102,0,0,0,0,0,0,0,0,0,-102,0,0,-102,-102,0,0,0,0,0,0,0,0,-102,0,0,0,0,0,0,0,0,0,
// State 471
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,516,0,0,0,0,0,0,0,0,0,
// State 472
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,517,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 473
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 474
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,0,0,0,0,0,0,0,0,
// State 475
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,
// State 476
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,0,0,0,0,0,0,0,
// State 477
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,0,0,0,0,0,0,0,0,
// State 478
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,0,0,0,0,0,0,0,0,
// State 479
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,0,0,0,0,0,0,0,0,
// State 480
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0,0,0,0,0,0,0,
// State 481
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,
// State 482
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,0,0,0,0,0,0,0,0,
// State 483
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,0,0,0,0,0,0,0,0,
// State 484
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-153,0,0,0,0,0,0,0,0,0,
// State 485
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,525,0,0,0,0,0,0,0,0,0,
// State 486
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-142,-142,0,0,0,0,0,0,0,0,0,
// State 487
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-44,-44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-44,0,0,0,0,0,0,0,0,0,
// State 488
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-361,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-361,0,0,0,0,0,0,0,0,0,
// State 489
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 490
-134,0,0,0,0,0,0,0,0,-134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-134,0,0,0,0,0,0,0,0,0,0,0,
// State 491
0,-218,0,-218,0,0,0,-218,0,0,0,0,0,-218,0,-218,-218,-218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 492
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-384,0,0,0,0,0,0,0,0,0,0,0,
// State 493
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,
// State 494
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,544,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-169,0,0,0,0,0,0,0,0,0,0,0,
// State 495
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-386,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-386,0,0,0,0,0,0,0,0,0,0,0,
// State 496
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-392,0,0,0,-392,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-392,0,0,0,0,0,0,0,0,0,0,0,
// State 497
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-385,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-385,0,0,0,0,0,0,0,0,0,0,0,
// State 498
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,0,0,0,0,0,0,0,0,0,
// State 499
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-97,-97,-97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 500
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-429,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,548,0,0,0,0,-429,0,0,0,0,0,0,0,0,
// State 501
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-58,0,0,0,0,0,0,0,0,-58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-58,0,0,0,0,0,0,0,0,
// State 502
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-433,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0,0,0,-433,0,0,0,0,0,0,0,0,
// State 503
0,0,0,0,0,0,0,0,0,0,0,-86,0,0,0,0,-86,-86,-86,0,0,0,0,0,0,0,-86,-86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-86,0,0,0,0,0,0,0,0,
// State 504
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-39,-39,0,0,0,0,0,0,0,0,0,0,-39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-39,0,0,0,0,0,0,0,0,0,0,0,
// State 505
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-416,0,-416,0,0,0,0,0,0,0,0,0,
// State 506
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-419,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-419,0,-419,0,0,0,0,0,0,0,0,0,
// State 507
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-220,0,0,0,0,0,0,0,0,0,0,0,
// State 508
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-107,0,-107,-107,-107,0,0,0,-107,0,0,0,-107,0,0,0,0,0,0,0,0,-107,-107,0,0,-107,-107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 509
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,558,0,0,0,0,0,0,0,-183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 510
0,0,0,0,0,-463,0,0,0,0,0,0,-463,0,0,-463,-463,-463,0,-463,0,-463,0,0,0,0,0,-463,0,0,0,-463,-463,-463,-463,-463,-463,0,0,0,-463,-463,-463,-463,0,-463,-463,-463,0,-463,-463,-463,0,0,0,0,0,0,0,
// State 511
0,0,0,0,0,0,0,0,0,0,0,0,-78,0,0,-78,-78,-78,0,-78,0,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,0,0,0,0,-78,-78,-78,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 512
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,561,0,0,0,0,0,0,0,0,0,
// State 513
0,0,0,0,0,0,-81,0,0,0,0,0,0,0,0,0,-81,-81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 514
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-478,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-478,0,0,0,0,0,0,0,0,0,
// State 515
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-517,0,-517,0,-517,0,0,0,0,0,-517,0,0,-517,0,0,0,0,0,235,-517,0,0,-517,-517,-517,0,0,0,0,0,0,0,0,
// State 516
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-512,0,-512,0,-512,0,0,0,0,0,-512,0,0,-512,0,0,0,0,0,0,-512,0,0,-512,-512,-512,0,0,0,0,0,0,0,0,
// State 517
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,0,0,0,0,0,0,0,0,
// State 518
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,0,0,0,0,0,0,0,0,
// State 519
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,0,0,0,0,0,0,0,0,
// State 520
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,
// State 521
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,0,0,0,0,0,0,0,0,
// State 522
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,565,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-155,0,0,0,0,0,0,0,0,0,
// State 523
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-28,-28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-28,0,0,0,0,0,0,0,0,0,
// State 524
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-141,-141,0,0,0,0,0,0,0,0,0,
// State 525
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,568,0,0,0,0,0,0,0,0,0,0,0,
// State 526
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,570,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 527
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,571,0,0,0,0,0,0,0,-173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 528
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,257,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 529
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-125,0,0,-125,0,0,0,0,0,0,0,0,
// State 530
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,572,0,0,0,0,0,0,0,0,
// State 531
0,-398,0,-398,0,0,0,-398,0,0,0,0,0,-398,0,-398,-398,-398,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-398,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 532
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-112,0,0,-112,0,0,0,0,0,0,0,0,
// State 533
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-113,0,0,-113,0,0,0,0,0,0,0,0,
// State 534
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-110,0,0,-110,0,0,0,0,0,0,0,0,
// State 535
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-111,0,0,-111,0,0,0,0,0,0,0,0,
// State 536
-135,0,0,0,0,0,0,0,0,-135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-135,0,0,0,0,0,0,0,0,0,0,0,
// State 537
0,-219,0,-219,0,0,0,-219,0,0,0,0,0,-219,0,-219,-219,-219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 538
0,-214,0,-214,0,0,0,-214,0,0,0,0,0,-214,0,-214,-214,-214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 539
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,264,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 540
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,265,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 541
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,578,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-171,0,0,0,0,0,0,0,0,0,0,0,
// State 542
0,-395,0,-395,-395,0,0,-395,0,0,0,0,0,-395,0,-395,-395,-395,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-395,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 543
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-63,0,-63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-63,0,0,0,0,0,-63,0,0,0,0,0,
// State 544
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-387,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-387,0,0,0,0,0,0,0,0,0,0,0,
// State 545
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-529,-529,-529,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 546
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,579,0,0,0,0,0,0,0,0,0,
// State 547
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-59,0,0,0,0,0,0,0,0,-59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-59,0,0,0,0,0,0,0,0,
// State 548
0,0,0,0,0,0,0,0,0,0,0,-87,0,0,0,0,-87,-87,-87,0,0,0,0,0,0,0,-87,-87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-87,0,0,0,0,0,0,0,0,
// State 549
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,
// State 550
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 551
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,335,-408,0,266,0,0,0,0,0,-408,0,0,0,0,0,-408,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 552
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-493,0,0,0,0,0,0,0,-493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 553
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,583,0,0,0,0,0,0,0,-185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 554
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-494,0,0,0,0,0,0,0,-494,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 555
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,267,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 556
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,268,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 557
0,0,0,0,0,0,0,0,0,0,0,0,-79,0,0,-79,-79,-79,0,-79,0,-79,0,0,0,0,0,0,0,0,0,0,0,0,0,-79,0,0,0,0,-79,-79,-79,-79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 558
0,0,0,0,0,-450,0,0,0,0,0,0,-450,0,0,-450,-450,-450,0,-450,0,-450,0,0,0,0,0,-450,0,0,0,-450,-450,-450,-450,-450,-450,0,0,0,-450,-450,-450,-450,0,0,0,-450,0,-450,-450,0,0,0,0,0,0,0,0,
// State 559
0,0,0,0,0,-460,0,0,0,0,0,0,-460,0,0,-460,-460,-460,0,-460,0,-460,0,0,0,0,0,-460,0,0,0,-460,-460,-460,-460,-460,-460,0,0,0,-460,-460,-460,-460,0,-460,-460,-460,0,-460,-460,-460,0,0,0,0,0,0,0,
// State 560
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-481,0,-481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-481,0,0,0,0,0,0,0,0,0,
// State 561
0,0,0,0,0,0,-82,0,0,0,0,0,0,0,0,0,-82,-82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 562
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,269,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 563
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0,
// State 564
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,
// State 565
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,277,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 566
0,-399,0,-399,0,0,0,-399,0,0,0,0,0,-399,0,-399,-399,-399,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-399,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 567
0,-394,0,-394,-394,0,0,-394,0,0,0,0,0,-394,0,-394,-394,-394,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-394,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 568
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,586,0,0,0,0,0,0,0,-175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 569
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-400,0,0,0,-400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 570
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 571
0,-128,0,-128,0,0,0,-128,0,0,0,0,0,-128,0,-128,-128,-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 572
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-120,0,0,-120,0,0,0,0,0,0,0,0,
// State 573
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,595,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-149,0,0,0,0,0,0,0,0,0,0,0,
// State 574
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,596,0,0,0,0,0,0,0,0,0,0,0,
// State 575
0,-216,0,-216,0,0,0,-216,0,0,0,0,0,-216,0,-216,-216,-216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 576
0,-215,0,-215,0,0,0,-215,0,0,0,0,0,-215,0,-215,-215,-215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 577
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-64,0,-64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-64,0,0,0,0,0,-64,0,0,0,0,0,
// State 578
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-530,-530,-530,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 579
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,283,-486,0,0,0,0,-486,0,0,0,0,0,0,0,0,
// State 580
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,602,0,0,0,0,0,0,0,-187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 581
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-488,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-488,0,0,0,0,-488,0,0,0,0,0,0,0,0,
// State 582
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-91,0,-91,-91,-91,0,0,0,-91,0,0,0,-91,0,0,0,0,0,0,0,0,-91,-91,0,0,-91,-91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 583
0,0,0,0,0,-449,0,0,0,0,0,0,-449,0,0,-449,-449,-449,0,-449,0,-449,0,0,0,0,0,-449,0,0,0,-449,-449,-449,-449,-449,-449,0,0,0,-449,-449,-449,-449,0,0,0,-449,0,-449,-449,0,0,0,0,0,0,0,0,
// State 584
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-515,0,-515,0,-515,0,0,0,0,0,-515,0,0,-515,0,0,0,0,0,0,-515,0,0,-515,-515,-515,0,0,0,0,0,0,0,0,
// State 585
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 586
0,-396,0,-396,0,0,0,-396,0,0,0,0,0,-396,0,-396,-396,-396,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-396,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 587
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-121,0,0,-121,0,0,0,0,0,0,0,0,
// State 588
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-124,0,0,-124,0,0,0,0,0,0,0,0,
// State 589
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 590
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 591
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 592
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 593
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,610,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-151,0,0,0,0,0,0,0,0,0,0,0,
// State 594
0,0,0,0,0,-23,0,0,0,0,0,0,-23,0,0,-23,-23,-23,0,-23,0,-23,0,0,0,0,0,0,0,0,0,-23,-23,-23,-23,0,-23,0,0,0,-23,-23,-23,-23,0,0,0,-23,0,0,0,0,0,0,0,0,0,0,0,
// State 595
0,-130,0,-130,0,0,0,-130,0,0,0,0,0,-130,0,-130,-130,-130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-130,0,0,0,0,0,0,0,0,0,0,0,0,0,611,0,0,0,0,0,0,0,0,
// State 596
0,-217,0,-217,0,0,0,-217,0,0,0,0,0,-217,0,-217,-217,-217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 597
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,614,0,0,0,0,0,0,0,0,0,0,0,
// State 598
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,615,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-157,0,0,0,0,0,0,0,0,0,0,0,
// State 599
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,616,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 600
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,617,0,0,0,0,0,0,0,0,
// State 601
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-92,0,-92,-92,-92,0,0,0,-92,0,0,0,-92,0,0,0,0,0,0,0,0,-92,-92,0,0,-92,-92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 602
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-495,0,0,0,0,0,0,0,-495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 603
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-489,0,0,0,0,0,0,0,0,0,0,0,0,286,287,0,0,0,-489,0,0,0,0,-489,0,0,0,0,0,0,0,0,
// State 604
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-371,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-371,0,0,0,0,0,0,0,0,
// State 605
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,619,0,0,0,0,0,0,0,0,0,
// State 606
0,-397,0,-397,0,0,0,-397,0,0,0,0,0,-397,0,-397,-397,-397,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-397,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 607
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-116,0,0,-116,0,0,0,0,0,0,0,0,
// State 608
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-201,0,0,0,-201,-201,-201,-201,0,0,0,0,0,0,0,0,0,0,0,0,-201,0,0,-201,0,0,0,0,0,0,0,0,
// State 609
0,0,0,0,0,-24,0,0,0,0,0,0,-24,0,0,-24,-24,-24,0,-24,0,-24,0,0,0,0,0,0,0,0,0,-24,-24,-24,-24,0,-24,0,0,0,-24,-24,-24,-24,0,0,0,-24,0,0,0,0,0,0,0,0,0,0,0,
// State 610
0,-129,0,-129,0,0,0,-129,0,0,0,0,0,-129,0,-129,-129,-129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 611
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,621,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-159,0,0,0,0,0,0,0,0,0,0,0,
// State 612
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,622,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 613
0,0,0,0,0,0,0,0,0,-210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-210,0,0,0,0,0,0,0,0,0,0,0,
// State 614
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-33,0,0,-33,0,-33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-33,0,0,0,0,0,0,0,0,0,0,-33,0,0,0,0,0,0,0,0,0,0,0,
// State 615
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-206,0,0,0,0,0,0,0,0,0,0,0,
// State 616
-131,0,0,0,0,0,0,0,0,-131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-131,0,0,0,0,0,0,0,0,0,0,0,
// State 617
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-484,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-484,0,0,0,0,-484,0,0,0,0,0,0,0,0,
// State 618
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-516,0,-516,0,-516,0,0,0,0,0,-516,0,0,-516,0,0,0,0,0,288,-516,0,0,-516,-516,-516,0,0,0,0,0,0,0,0,
// State 619
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-117,0,0,-117,0,0,0,0,0,0,0,0,
// State 620
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-34,0,0,-34,0,-34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-34,0,0,0,0,0,0,0,0,0,0,-34,0,0,0,0,0,0,0,0,0,0,0,
// State 621
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-207,0,0,0,0,0,0,0,0,0,0,0,
// State 622
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,625,0,0,0,0,0,0,0,0,0,
// State 623
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,626,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 624
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-485,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,289,-485,0,0,0,0,-485,0,0,0,0,0,0,0,0,
// State 625
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-487,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-487,0,0,0,0,-487,0,0,0,0,0,0,0,0,
// State 626
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-514,0,-514,0,-514,0,0,0,0,0,-514,0,0,-514,0,0,0,0,0,0,-514,0,0,-514,-514,-514,0,0,0,0,0,0,0,0,
// State 627
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-483,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-483,0,0,0,0,-483,0,0,0,0,0,0,0,0,
];
fn ___action(state: i16, integer: usize) -> i16 {
___ACTION[(state as usize) * 59 + integer]
}
const ___EOF_ACTION: &[i16] = &[
// State 0
0,
// State 1
0,
// State 2
0,
// State 3
0,
// State 4
0,
// State 5
0,
// State 6
0,
// State 7
0,
// State 8
0,
// State 9
0,
// State 10
-166,
// State 11
0,
// State 12
0,
// State 13
0,
// State 14
0,
// State 15
0,
// State 16
0,
// State 17
0,
// State 18
0,
// State 19
0,
// State 20
0,
// State 21
0,
// State 22
0,
// State 23
0,
// State 24
0,
// State 25
0,
// State 26
0,
// State 27
0,
// State 28
0,
// State 29
0,
// State 30
-253,
// State 31
0,
// State 32
-168,
// State 33
0,
// State 34
0,
// State 35
0,
// State 36
0,
// State 37
0,
// State 38
0,
// State 39
0,
// State 40
0,
// State 41
0,
// State 42
0,
// State 43
0,
// State 44
0,
// State 45
0,
// State 46
-317,
// State 47
0,
// State 48
0,
// State 49
0,
// State 50
0,
// State 51
0,
// State 52
-255,
// State 53
0,
// State 54
0,
// State 55
0,
// State 56
-254,
// State 57
0,
// State 58
-237,
// State 59
0,
// State 60
-245,
// State 61
-249,
// State 62
0,
// State 63
0,
// State 64
-285,
// State 65
0,
// State 66
0,
// State 67
-428,
// State 68
-432,
// State 69
0,
// State 70
0,
// State 71
0,
// State 72
0,
// State 73
0,
// State 74
0,
// State 75
0,
// State 76
0,
// State 77
0,
// State 78
0,
// State 79
0,
// State 80
0,
// State 81
0,
// State 82
-301,
// State 83
0,
// State 84
-309,
// State 85
-313,
// State 86
-349,
// State 87
0,
// State 88
0,
// State 89
-319,
// State 90
0,
// State 91
0,
// State 92
0,
// State 93
-256,
// State 94
-239,
// State 95
0,
// State 96
-247,
// State 97
-251,
// State 98
-287,
// State 99
0,
// State 100
0,
// State 101
-318,
// State 102
-238,
// State 103
0,
// State 104
-246,
// State 105
-250,
// State 106
-286,
// State 107
0,
// State 108
-233,
// State 109
-269,
// State 110
-229,
// State 111
-241,
// State 112
-277,
// State 113
-281,
// State 114
0,
// State 115
0,
// State 116
0,
// State 117
0,
// State 118
0,
// State 119
-430,
// State 120
-434,
// State 121
0,
// State 122
0,
// State 123
0,
// State 124
0,
// State 125
0,
// State 126
0,
// State 127
0,
// State 128
-297,
// State 129
-333,
// State 130
-293,
// State 131
-305,
// State 132
-341,
// State 133
-345,
// State 134
-303,
// State 135
0,
// State 136
-311,
// State 137
-315,
// State 138
-351,
// State 139
0,
// State 140
0,
// State 141
-320,
// State 142
-240,
// State 143
0,
// State 144
-248,
// State 145
-252,
// State 146
-288,
// State 147
-235,
// State 148
-271,
// State 149
-231,
// State 150
-243,
// State 151
-279,
// State 152
-283,
// State 153
-302,
// State 154
0,
// State 155
-310,
// State 156
-314,
// State 157
-350,
// State 158
-234,
// State 159
-270,
// State 160
-230,
// State 161
-242,
// State 162
-278,
// State 163
-282,
// State 164
0,
// State 165
-265,
// State 166
-225,
// State 167
-261,
// State 168
-273,
// State 169
0,
// State 170
0,
// State 171
0,
// State 172
0,
// State 173
0,
// State 174
0,
// State 175
0,
// State 176
0,
// State 177
0,
// State 178
0,
// State 179
0,
// State 180
0,
// State 181
0,
// State 182
0,
// State 183
0,
// State 184
0,
// State 185
0,
// State 186
0,
// State 187
-329,
// State 188
-289,
// State 189
-325,
// State 190
-337,
// State 191
-299,
// State 192
-335,
// State 193
-295,
// State 194
-307,
// State 195
-343,
// State 196
-347,
// State 197
-304,
// State 198
0,
// State 199
-312,
// State 200
-316,
// State 201
-352,
// State 202
-236,
// State 203
-272,
// State 204
-232,
// State 205
-244,
// State 206
-280,
// State 207
-284,
// State 208
-267,
// State 209
-227,
// State 210
-263,
// State 211
-275,
// State 212
-298,
// State 213
-334,
// State 214
-294,
// State 215
-306,
// State 216
-342,
// State 217
-346,
// State 218
-266,
// State 219
-226,
// State 220
-262,
// State 221
-274,
// State 222
-257,
// State 223
0,
// State 224
0,
// State 225
0,
// State 226
0,
// State 227
0,
// State 228
0,
// State 229
0,
// State 230
0,
// State 231
0,
// State 232
0,
// State 233
0,
// State 234
0,
// State 235
-321,
// State 236
-331,
// State 237
-291,
// State 238
-327,
// State 239
-339,
// State 240
-300,
// State 241
-336,
// State 242
-296,
// State 243
-308,
// State 244
-344,
// State 245
-348,
// State 246
-268,
// State 247
-228,
// State 248
-264,
// State 249
-276,
// State 250
-259,
// State 251
-330,
// State 252
-290,
// State 253
-326,
// State 254
-338,
// State 255
-258,
// State 256
0,
// State 257
0,
// State 258
0,
// State 259
0,
// State 260
0,
// State 261
0,
// State 262
0,
// State 263
0,
// State 264
0,
// State 265
0,
// State 266
0,
// State 267
-432,
// State 268
0,
// State 269
-323,
// State 270
-332,
// State 271
-292,
// State 272
-328,
// State 273
-340,
// State 274
-260,
// State 275
-322,
// State 276
0,
// State 277
0,
// State 278
0,
// State 279
0,
// State 280
0,
// State 281
0,
// State 282
0,
// State 283
-324,
// State 284
0,
// State 285
0,
// State 286
0,
// State 287
0,
// State 288
0,
// State 289
-533,
// State 290
0,
// State 291
-473,
// State 292
0,
// State 293
0,
// State 294
0,
// State 295
0,
// State 296
0,
// State 297
-477,
// State 298
-475,
// State 299
-437,
// State 300
-471,
// State 301
-436,
// State 302
-435,
// State 303
-390,
// State 304
-472,
// State 305
-438,
// State 306
-448,
// State 307
0,
// State 308
-408,
// State 309
-425,
// State 310
-474,
// State 311
-410,
// State 312
-426,
// State 313
-421,
// State 314
-424,
// State 315
-378,
// State 316
-379,
// State 317
-447,
// State 318
-420,
// State 319
-511,
// State 320
-476,
// State 321
0,
// State 322
0,
// State 323
0,
// State 324
0,
// State 325
-524,
// State 326
-375,
// State 327
-165,
// State 328
0,
// State 329
0,
// State 330
-380,
// State 331
0,
// State 332
-391,
// State 333
-409,
// State 334
0,
// State 335
0,
// State 336
0,
// State 337
-406,
// State 338
0,
// State 339
0,
// State 340
0,
// State 341
0,
// State 342
0,
// State 343
0,
// State 344
0,
// State 345
0,
// State 346
0,
// State 347
0,
// State 348
0,
// State 349
0,
// State 350
0,
// State 351
-509,
// State 352
0,
// State 353
0,
// State 354
0,
// State 355
-513,
// State 356
0,
// State 357
0,
// State 358
0,
// State 359
0,
// State 360
0,
// State 361
0,
// State 362
0,
// State 363
0,
// State 364
0,
// State 365
0,
// State 366
-355,
// State 367
-359,
// State 368
-354,
// State 369
-393,
// State 370
-356,
// State 371
-353,
// State 372
0,
// State 373
0,
// State 374
0,
// State 375
0,
// State 376
0,
// State 377
0,
// State 378
0,
// State 379
-167,
// State 380
-48,
// State 381
0,
// State 382
0,
// State 383
0,
// State 384
0,
// State 385
0,
// State 386
-415,
// State 387
0,
// State 388
-423,
// State 389
0,
// State 390
-407,
// State 391
-422,
// State 392
0,
// State 393
0,
// State 394
0,
// State 395
0,
// State 396
-505,
// State 397
0,
// State 398
0,
// State 399
0,
// State 400
0,
// State 401
0,
// State 402
0,
// State 403
0,
// State 404
0,
// State 405
0,
// State 406
0,
// State 407
-508,
// State 408
-507,
// State 409
0,
// State 410
-503,
// State 411
0,
// State 412
-504,
// State 413
0,
// State 414
0,
// State 415
0,
// State 416
0,
// State 417
0,
// State 418
0,
// State 419
0,
// State 420
0,
// State 421
0,
// State 422
0,
// State 423
0,
// State 424
0,
// State 425
0,
// State 426
0,
// State 427
0,
// State 428
0,
// State 429
-360,
// State 430
0,
// State 431
0,
// State 432
0,
// State 433
0,
// State 434
0,
// State 435
0,
// State 436
0,
// State 437
0,
// State 438
0,
// State 439
-49,
// State 440
-427,
// State 441
-370,
// State 442
-482,
// State 443
-490,
// State 444
-498,
// State 445
-431,
// State 446
-372,
// State 447
0,
// State 448
0,
// State 449
-413,
// State 450
0,
// State 451
0,
// State 452
-417,
// State 453
0,
// State 454
-414,
// State 455
-418,
// State 456
0,
// State 457
0,
// State 458
-510,
// State 459
0,
// State 460
0,
// State 461
0,
// State 462
0,
// State 463
0,
// State 464
0,
// State 465
0,
// State 466
0,
// State 467
0,
// State 468
0,
// State 469
-506,
// State 470
0,
// State 471
0,
// State 472
0,
// State 473
0,
// State 474
0,
// State 475
0,
// State 476
0,
// State 477
0,
// State 478
0,
// State 479
0,
// State 480
0,
// State 481
0,
// State 482
0,
// State 483
0,
// State 484
0,
// State 485
0,
// State 486
0,
// State 487
0,
// State 488
0,
// State 489
0,
// State 490
0,
// State 491
-218,
// State 492
0,
// State 493
0,
// State 494
0,
// State 495
0,
// State 496
0,
// State 497
0,
// State 498
0,
// State 499
0,
// State 500
-429,
// State 501
-58,
// State 502
-433,
// State 503
-86,
// State 504
0,
// State 505
-416,
// State 506
-419,
// State 507
0,
// State 508
0,
// State 509
0,
// State 510
0,
// State 511
0,
// State 512
0,
// State 513
0,
// State 514
0,
// State 515
-517,
// State 516
-512,
// State 517
0,
// State 518
0,
// State 519
0,
// State 520
0,
// State 521
0,
// State 522
0,
// State 523
0,
// State 524
0,
// State 525
0,
// State 526
0,
// State 527
0,
// State 528
0,
// State 529
0,
// State 530
0,
// State 531
-398,
// State 532
0,
// State 533
0,
// State 534
0,
// State 535
0,
// State 536
0,
// State 537
-219,
// State 538
-214,
// State 539
0,
// State 540
0,
// State 541
0,
// State 542
-395,
// State 543
0,
// State 544
0,
// State 545
0,
// State 546
0,
// State 547
-59,
// State 548
-87,
// State 549
0,
// State 550
0,
// State 551
0,
// State 552
0,
// State 553
0,
// State 554
0,
// State 555
0,
// State 556
0,
// State 557
0,
// State 558
0,
// State 559
0,
// State 560
0,
// State 561
0,
// State 562
0,
// State 563
0,
// State 564
0,
// State 565
0,
// State 566
-399,
// State 567
-394,
// State 568
0,
// State 569
0,
// State 570
0,
// State 571
-128,
// State 572
0,
// State 573
0,
// State 574
0,
// State 575
-216,
// State 576
-215,
// State 577
0,
// State 578
0,
// State 579
-486,
// State 580
0,
// State 581
-488,
// State 582
0,
// State 583
0,
// State 584
-515,
// State 585
0,
// State 586
-396,
// State 587
0,
// State 588
0,
// State 589
0,
// State 590
0,
// State 591
0,
// State 592
0,
// State 593
0,
// State 594
0,
// State 595
-130,
// State 596
-217,
// State 597
0,
// State 598
0,
// State 599
0,
// State 600
0,
// State 601
0,
// State 602
0,
// State 603
-489,
// State 604
-371,
// State 605
0,
// State 606
-397,
// State 607
0,
// State 608
0,
// State 609
0,
// State 610
-129,
// State 611
0,
// State 612
0,
// State 613
0,
// State 614
0,
// State 615
0,
// State 616
0,
// State 617
-484,
// State 618
-516,
// State 619
0,
// State 620
0,
// State 621
0,
// State 622
0,
// State 623
0,
// State 624
-485,
// State 625
-487,
// State 626
-514,
// State 627
-483,
];
fn ___goto(state: i16, nt: usize) -> i16 {
match nt {
14 => 261,
17 => 164,
20 => 280,
23 => 70,
26 => 62,
29 => 32,
32 => match state {
13 => 36,
_ => 11,
},
35 => 119,
38 => 177,
41 => 225,
44 => 35,
47 => 122,
49 => 125,
52 => 120,
55 => 232,
58 => 66,
61 => 43,
64 => 71,
67 => match state {
227 => 572,
257 => 587,
259 => 588,
278 => 607,
284 => 619,
_ => 529,
},
69 => match state {
229 => 573,
261 => 593,
_ => 530,
},
71 => match state {
224 => 566,
256 => 586,
276 => 606,
_ => 531,
},
72 => match state {
173 | 231 | 262 => 536,
_ => 490,
},
74 => match state {
174 => 231,
230 => 262,
_ => 173,
},
75 => match state {
6 | 21 | 24 | 48 | 63 | 226 | 281 => 321,
_ => 290,
},
77 => match state {
1 => 6,
7 => 21,
8 => 24,
22 => 48,
172 | 224 | 229 | 256 | 261 | 276 => 226,
263 | 280 => 281,
_ => 63,
},
78 => 423,
80 => match state {
107 => 484,
164 => 522,
_ => 360,
},
82 => 574,
83 => 485,
84 => 597,
85 => 363,
86 => 326,
87 => 492,
88 => 526,
89 => match state {
33 => 382,
_ => 335,
},
90 => 460,
91 => match state {
286 => 623,
_ => 550,
},
92 => match state {
69 => 448,
81 => 473,
181 => 555,
_ => 375,
},
93 => match state {
79 => 471,
179 => 549,
268 => 605,
285 => 622,
_ => 352,
},
94 => match state {
80 => 472,
_ => 392,
},
95 => match state {
258 => 278,
277 => 284,
_ => 259,
},
96 => 279,
97 => match state {
280 => 611,
_ => 598,
},
99 => match state {
173 => 230,
_ => 174,
},
100 => 339,
101 => 401,
102 => 366,
103 => match state {
70 => 450,
_ => 383,
},
106 => 291,
107 => match state {
64 | 86 | 98 | 106 | 109 | 112..=113 | 129 | 132..=133 | 138 | 146 | 148 | 151..=152 | 157 | 159 | 162..=163 | 165 | 167..=168 | 187 | 189..=190 | 192 | 195..=196 | 201 | 203 | 206..=208 | 210..=211 | 213 | 216..=218 | 220..=222 | 235..=236 | 238..=239 | 241 | 244..=246 | 248..=251 | 253..=255 | 269..=270 | 272..=275 | 283 => 429,
_ => 367,
},
109 => match state {
46 => 86,
52 => 98,
56 => 106,
58 => 109,
60 => 112,
61 => 113,
82 => 129,
84 => 132,
85 => 133,
89 => 138,
93 => 146,
94 => 148,
96 => 151,
97 => 152,
101 => 157,
102 => 159,
104 => 162,
105 => 163,
108 => 165,
110 => 167,
111 => 168,
128 => 187,
130 => 189,
131 => 190,
134 => 192,
136 => 195,
137 => 196,
141 => 201,
142 => 203,
144 => 206,
145 => 207,
147 => 208,
149 => 210,
150 => 211,
153 => 213,
155 => 216,
156 => 217,
158 => 218,
160 => 220,
161 => 221,
166 => 222,
188 => 235,
191 => 236,
193 => 238,
194 => 239,
197 => 241,
199 => 244,
200 => 245,
202 => 246,
204 => 248,
205 => 249,
209 => 250,
212 => 251,
214 => 253,
215 => 254,
219 => 255,
237 => 269,
240 => 270,
242 => 272,
243 => 273,
247 => 274,
252 => 275,
271 => 283,
_ => 64,
},
110 => match state {
62 => 426,
_ => 364,
},
112 => match state {
20 => 44,
23 => 50,
25 => 54,
28 => 59,
45 => 83,
47 => 87,
49 => 91,
51 => 95,
53 => 99,
55 => 103,
88 => 135,
90 => 139,
92 => 143,
100 => 154,
140 => 198,
_ => 27,
},
114 => match state {
20 => 45,
23 => 51,
25 => 55,
47 => 88,
49 => 92,
53 => 100,
90 => 140,
_ => 28,
},
116 => match state {
32 => 379,
_ => 327,
},
118 => match state {
9 => 324,
20 => 357,
23 => 358,
25 => 359,
27 => 361,
28 => 362,
44 => 413,
45 => 414,
47 => 415,
49 => 416,
50 => 417,
51 => 418,
53 => 419,
54 => 420,
55 => 421,
59 => 425,
83 => 474,
87 => 475,
88 => 476,
90 => 477,
91 => 478,
92 => 479,
95 => 480,
99 => 481,
100 => 482,
103 => 483,
135 => 517,
139 => 518,
140 => 519,
143 => 520,
154 => 521,
198 => 563,
_ => 297,
},
120 => match state {
26 | 107 | 164 => 57,
11 => 333,
13 => 337,
29 | 62 => 365,
31 | 66 | 69 | 81 | 181 => 376,
34 | 70 => 384,
36 => 390,
40 => 403,
75 | 125 | 127 => 465,
77 => 468,
126 => 514,
176 => 540,
180 | 232 | 286 => 551,
_ => 308,
},
121 => match state {
16 => 41,
10 | 32 => 328,
37 | 71 | 80 => 393,
67 => 440,
68 | 120 | 267 => 442,
119 => 500,
180 | 232 | 286 => 552,
_ => 377,
},
123 => match state {
65 | 115 => 431,
_ => 340,
},
124 => match state {
169 => 525,
_ => 493,
},
125 => match state {
177 => 541,
_ => 494,
},
127 => 298,
128 => 495,
129 => 368,
130 => 369,
131 => 370,
132 => match state {
115 => 489,
_ => 432,
},
133 => match state {
65 | 115 => 433,
170 => 527,
225 => 568,
_ => 260,
},
135 => match state {
4 | 12 | 33 | 35 | 121 => 309,
19 => 355,
68 | 120 | 267 => 443,
118 => 498,
178 => 546,
186 => 562,
266 => 603,
_ => 319,
},
136 => match state {
4 => 310,
35 => 387,
121 => 507,
_ => 336,
},
138 => 311,
139 => 441,
140 => 444,
141 => match state {
117 | 169 | 177 => 496,
_ => 299,
},
142 => match state {
3 | 263 | 280..=281 => 300,
_ => 341,
},
143 => 301,
144 => 397,
145 => match state {
7 => 322,
_ => 292,
},
147 => 7,
148 => 312,
149 => match state {
279 => 608,
_ => 302,
},
150 => match state {
15 => 342,
72 => 461,
73 | 227 | 257 => 463,
122 => 509,
_ => 402,
},
152 => match state {
39 | 75 => 73,
226 => 257,
_ => 227,
},
153 => match state {
40 => 74,
123 => 183,
124 => 184,
185 => 233,
_ => 38,
},
154 => 343,
156 => 344,
157 => match state {
3 => 303,
281 => 612,
_ => 599,
},
158 => 289,
159 => match state {
125 => 512,
_ => 466,
},
160 => match state {
40 | 76 => 404,
_ => 467,
},
161 => match state {
120 => 502,
_ => 445,
},
163 => match state {
232 => 580,
_ => 553,
},
165 => match state {
267 => 604,
_ => 446,
},
166 => match state {
66 => 436,
_ => 378,
},
168 => match state {
5 => 320,
10 | 32 => 329,
14 => 338,
16 => 351,
18 => 354,
37 | 71 | 80 => 394,
41 => 407,
42 => 408,
43 => 409,
78 => 469,
114 => 488,
171 => 528,
175 => 539,
180 | 232 | 286 => 554,
182 => 556,
223 => 565,
234 => 584,
264 => 600,
265 => 602,
282 => 617,
287 => 626,
288 => 627,
_ => 353,
},
170 => match state {
71 => 457,
_ => 395,
},
172 => match state {
1 | 7 => 293,
8 | 22 => 323,
_ => 371,
},
174 => match state {
7 => 22,
_ => 8,
},
175 => match state {
63 => 115,
_ => 65,
},
_ => 0,
}
}
#[allow(clippy::needless_raw_string_hashes)]
const ___TERMINAL: &[&str] = &[
r###""enum""###,
r###""extern""###,
r###""grammar""###,
r###""match""###,
r###""else""###,
r###""if""###,
r###""mut""###,
r###""pub""###,
r###""in""###,
r###""type""###,
r###""where""###,
r###""for""###,
r###""!""###,
r###""use""###,
r###""dyn""###,
r###""Escape""###,
r###""Id""###,
r###""MacroId""###,
r###""Lifetime""###,
r###""StringLiteral""###,
r###""CharLiteral""###,
r###""RegexLiteral""###,
r###""&""###,
r###""!=""###,
r###""!~""###,
r###"":""###,
r###""::""###,
r###"",""###,
r###""..""###,
r###""=""###,
r###""==""###,
r###""=>""###,
r###""=>?""###,
r###""=>@L""###,
r###""=>@R""###,
r###"">""###,
r###""#""###,
r###""#![...]""###,
r###""{""###,
r###""[""###,
r###""(""###,
r###""<""###,
r###""@L""###,
r###""@R""###,
r###""->""###,
r###""+""###,
r###""?""###,
r###""}""###,
r###""]""###,
r###"")""###,
r###"";""###,
r###""*""###,
r###""~~""###,
r###""_""###,
r###""StartGrammar""###,
r###""StartPattern""###,
r###""StartMatchMapping""###,
r###""StartTypeRef""###,
r###""StartGrammarWhereClauses""###,
];
fn ___expected_tokens(___state: i16) -> alloc::vec::Vec<alloc::string::String> {
___TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
let next_state = ___action(___state, index);
if next_state == 0 {
None
} else {
Some(alloc::string::ToString::to_string(terminal))
}
}).collect()
}
fn ___expected_tokens_from_states<
    'input,
>(
___states: &[i16],
_: core::marker::PhantomData<(&'input ())>,
) -> alloc::vec::Vec<alloc::string::String>
{
___TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
if ___accepts(None, ___states, Some(index), core::marker::PhantomData::<(&())>) {
Some(alloc::string::ToString::to_string(terminal))
} else {
None
}
}).collect()
}
struct ___StateMachine<'input>
where 
{
text: &'input str,
___phantom: core::marker::PhantomData<(&'input ())>,
}
impl<'input> ___state_machine::ParserDefinition for ___StateMachine<'input>
where 
{
type Location = usize;
type Error = tok::Error;
type Token = Tok<'input>;
type TokenIndex = usize;
type Symbol = ___Symbol<'input>;
type Success = Top;
type StateIndex = i16;
type Action = i16;
type ReduceIndex = i16;
type NonterminalIndex = usize;

#[inline]
fn start_location(&self) -> Self::Location {
  Default::default()
}

#[inline]
fn start_state(&self) -> Self::StateIndex {
  0
}

#[inline]
fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
___token_to_integer(token, core::marker::PhantomData::<(&())>)
}

#[inline]
fn action(&self, state: i16, integer: usize) -> i16 {
___action(state, integer)
}

#[inline]
fn error_action(&self, state: i16) -> i16 {
___action(state, 59 - 1)
}

#[inline]
fn eof_action(&self, state: i16) -> i16 {
___EOF_ACTION[state as usize]
}

#[inline]
fn goto(&self, state: i16, nt: usize) -> i16 {
___goto(state, nt)
}

fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
___token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
}

fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
___expected_tokens(state)
}

fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
___expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
}

#[inline]
fn uses_error_recovery(&self) -> bool {
false
}

#[inline]
fn error_recovery_symbol(
&self,
recovery: ___state_machine::ErrorRecovery<Self>,
) -> Self::Symbol {
panic!("error recovery not enabled for this grammar")
}

fn reduce(
&mut self,
action: i16,
start_location: Option<&Self::Location>,
states: &mut alloc::vec::Vec<i16>,
symbols: &mut alloc::vec::Vec<___state_machine::SymbolTriple<Self>>,
) -> Option<___state_machine::ParseResult<Self>> {
___reduce(
self.text,
action,
start_location,
states,
symbols,
core::marker::PhantomData::<(&())>,
)
}

fn simulate_reduce(&self, action: i16) -> ___state_machine::SimulatedReduce<Self> {
___simulate_reduce(action, core::marker::PhantomData::<(&())>)
}
}
fn ___token_to_integer<
    'input,
>(
___token: &Tok<'input>,
_: core::marker::PhantomData<(&'input ())>,
) -> Option<usize>
{
#[warn(unused_variables)]
match ___token {
Tok::Enum if true => Some(0),
Tok::Extern if true => Some(1),
Tok::Grammar if true => Some(2),
Tok::Match if true => Some(3),
Tok::Else if true => Some(4),
Tok::If if true => Some(5),
Tok::Mut if true => Some(6),
Tok::Pub if true => Some(7),
Tok::In if true => Some(8),
Tok::Type if true => Some(9),
Tok::Where if true => Some(10),
Tok::For if true => Some(11),
Tok::Bang if true => Some(12),
Tok::Use(_) if true => Some(13),
Tok::Dyn if true => Some(14),
Tok::Escape(_) if true => Some(15),
Tok::Id(_) if true => Some(16),
Tok::MacroId(_) if true => Some(17),
Tok::Lifetime(_) if true => Some(18),
Tok::StringLiteral(_) if true => Some(19),
Tok::CharLiteral(_) if true => Some(20),
Tok::RegexLiteral(_) if true => Some(21),
Tok::Ampersand if true => Some(22),
Tok::BangEquals if true => Some(23),
Tok::BangTilde if true => Some(24),
Tok::Colon if true => Some(25),
Tok::ColonColon if true => Some(26),
Tok::Comma if true => Some(27),
Tok::DotDot if true => Some(28),
Tok::Equals if true => Some(29),
Tok::EqualsEquals if true => Some(30),
Tok::EqualsGreaterThanCode(_) if true => Some(31),
Tok::EqualsGreaterThanQuestionCode(_) if true => Some(32),
Tok::EqualsGreaterThanLookahead if true => Some(33),
Tok::EqualsGreaterThanLookbehind if true => Some(34),
Tok::GreaterThan if true => Some(35),
Tok::Hash if true => Some(36),
Tok::ShebangAttribute(_) if true => Some(37),
Tok::LeftBrace if true => Some(38),
Tok::LeftBracket if true => Some(39),
Tok::LeftParen if true => Some(40),
Tok::LessThan if true => Some(41),
Tok::Lookahead if true => Some(42),
Tok::Lookbehind if true => Some(43),
Tok::MinusGreaterThan if true => Some(44),
Tok::Plus if true => Some(45),
Tok::Question if true => Some(46),
Tok::RightBrace if true => Some(47),
Tok::RightBracket if true => Some(48),
Tok::RightParen if true => Some(49),
Tok::Semi if true => Some(50),
Tok::Star if true => Some(51),
Tok::TildeTilde if true => Some(52),
Tok::Underscore if true => Some(53),
Tok::StartGrammar if true => Some(54),
Tok::StartPattern if true => Some(55),
Tok::StartMatchMapping if true => Some(56),
Tok::StartTypeRef if true => Some(57),
Tok::StartGrammarWhereClauses if true => Some(58),
_ => None,
}
}
fn ___token_to_symbol<
    'input,
>(
___token_index: usize,
___token: Tok<'input>,
_: core::marker::PhantomData<(&'input ())>,
) -> ___Symbol<'input>
{
#[allow(clippy::manual_range_patterns)]match ___token_index {
0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 14 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 33 | 34 | 35 | 36 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 => ___Symbol::Variant0(___token),
13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 31 | 32 | 37 => match ___token {
Tok::Use(___tok0) | Tok::Escape(___tok0) | Tok::Id(___tok0) | Tok::MacroId(___tok0) | Tok::Lifetime(___tok0) | Tok::StringLiteral(___tok0) | Tok::CharLiteral(___tok0) | Tok::RegexLiteral(___tok0) | Tok::EqualsGreaterThanCode(___tok0) | Tok::EqualsGreaterThanQuestionCode(___tok0) | Tok::ShebangAttribute(___tok0) if true => ___Symbol::Variant1(___tok0),
_ => unreachable!(),
},
_ => unreachable!(),
}
}
fn ___simulate_reduce<
    'input,
>(
___reduce_index: i16,
_: core::marker::PhantomData<(&'input ())>,
) -> ___state_machine::SimulatedReduce<___StateMachine<'input>>
{
match ___reduce_index {
0 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 0,
}
}
1 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 0,
}
}
2 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 1,
}
}
3 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 1,
}
}
4 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 2,
}
}
5 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 2,
}
}
6 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 3,
}
}
7 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 4,
}
}
8 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 4,
}
}
9 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 5,
}
}
10 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 6,
}
}
11 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 6,
}
}
12 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 7,
}
}
13 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 8,
}
}
14 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 8,
}
}
15 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 9,
}
}
16 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 10,
}
}
17 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 10,
}
}
18 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 11,
}
}
19 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 12,
}
}
20 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 13,
}
}
21 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 13,
}
}
22 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 14,
}
}
23 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 14,
}
}
24 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 15,
}
}
25 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 16,
}
}
26 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 16,
}
}
27 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 17,
}
}
28 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 17,
}
}
29 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 18,
}
}
30 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 19,
}
}
31 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 19,
}
}
32 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 20,
}
}
33 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 20,
}
}
34 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 21,
}
}
35 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 22,
}
}
36 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 22,
}
}
37 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 23,
}
}
38 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 23,
}
}
39 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 24,
}
}
40 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 25,
}
}
41 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 25,
}
}
42 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 26,
}
}
43 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 26,
}
}
44 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 27,
}
}
45 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 28,
}
}
46 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 28,
}
}
47 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 29,
}
}
48 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 29,
}
}
49 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 30,
}
}
50 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 31,
}
}
51 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 31,
}
}
52 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 32,
}
}
53 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 32,
}
}
54 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 33,
}
}
55 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 34,
}
}
56 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 34,
}
}
57 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 35,
}
}
58 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 35,
}
}
59 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 36,
}
}
60 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 37,
}
}
61 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 37,
}
}
62 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 38,
}
}
63 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 38,
}
}
64 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 39,
}
}
65 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 40,
}
}
66 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 40,
}
}
67 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 41,
}
}
68 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 41,
}
}
69 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 42,
}
}
70 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 43,
}
}
71 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 43,
}
}
72 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 44,
}
}
73 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 44,
}
}
74 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 45,
}
}
75 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 46,
}
}
76 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 46,
}
}
77 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 47,
}
}
78 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 47,
}
}
79 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 48,
}
}
80 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 49,
}
}
81 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 49,
}
}
82 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 50,
}
}
83 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 51,
}
}
84 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 51,
}
}
85 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 52,
}
}
86 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 52,
}
}
87 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 53,
}
}
88 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 54,
}
}
89 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 54,
}
}
90 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 55,
}
}
91 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 55,
}
}
92 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 56,
}
}
93 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 57,
}
}
94 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 57,
}
}
95 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 58,
}
}
96 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 58,
}
}
97 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 59,
}
}
98 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 60,
}
}
99 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 60,
}
}
100 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 61,
}
}
101 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 61,
}
}
102 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 62,
}
}
103 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 63,
}
}
104 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 63,
}
}
105 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 64,
}
}
106 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 64,
}
}
107 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 65,
}
}
108 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 66,
}
}
109 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 67,
}
}
110 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 67,
}
}
111 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 67,
}
}
112 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 67,
}
}
113 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 68,
}
}
114 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 68,
}
}
115 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 69,
}
}
116 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 69,
}
}
117 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 69,
}
}
118 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 69,
}
}
119 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 69,
}
}
120 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 69,
}
}
121 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 69,
}
}
122 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 69,
}
}
123 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 69,
}
}
124 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 69,
}
}
125 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 70,
}
}
126 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 70,
}
}
127 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 71,
}
}
128 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 71,
}
}
129 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 71,
}
}
130 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 72,
}
}
131 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 73,
}
}
132 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 73,
}
}
133 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 74,
}
}
134 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 74,
}
}
135 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 75,
}
}
136 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 76,
}
}
137 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 76,
}
}
138 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 77,
}
}
139 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 77,
}
}
140 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 78,
}
}
141 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 78,
}
}
142 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 79,
}
}
143 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 79,
}
}
144 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 80,
}
}
145 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 80,
}
}
146 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 81,
}
}
147 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 81,
}
}
148 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 82,
}
}
149 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 82,
}
}
150 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 82,
}
}
151 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 82,
}
}
152 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 83,
}
}
153 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 83,
}
}
154 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 83,
}
}
155 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 83,
}
}
156 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 84,
}
}
157 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 84,
}
}
158 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 84,
}
}
159 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 84,
}
}
160 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 85,
}
}
161 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 85,
}
}
162 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 85,
}
}
163 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 85,
}
}
164 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 86,
}
}
165 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 86,
}
}
166 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 86,
}
}
167 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 86,
}
}
168 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 87,
}
}
169 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 87,
}
}
170 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 87,
}
}
171 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 87,
}
}
172 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 88,
}
}
173 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 88,
}
}
174 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 88,
}
}
175 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 88,
}
}
176 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 89,
}
}
177 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 89,
}
}
178 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 89,
}
}
179 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 89,
}
}
180 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 90,
}
}
181 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 90,
}
}
182 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 90,
}
}
183 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 90,
}
}
184 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 91,
}
}
185 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 91,
}
}
186 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 91,
}
}
187 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 91,
}
}
188 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 92,
}
}
189 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 92,
}
}
190 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 92,
}
}
191 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 92,
}
}
192 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 93,
}
}
193 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 93,
}
}
194 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 93,
}
}
195 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 93,
}
}
196 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 94,
}
}
197 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 94,
}
}
198 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 94,
}
}
199 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 94,
}
}
200 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 95,
}
}
201 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 96,
}
}
202 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 96,
}
}
203 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 96,
}
}
204 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 96,
}
}
205 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 97,
}
}
206 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 97,
}
}
207 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 98,
}
}
208 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 98,
}
}
209 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 99,
}
}
210 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 100,
}
}
211 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 101,
}
}
212 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 101,
}
}
213 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 102,
}
}
214 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 102,
}
}
215 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 102,
}
}
216 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 102,
}
}
217 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 102,
}
}
218 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 102,
}
}
219 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 103,
}
}
220 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 104,
}
}
221 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 104,
}
}
222 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 105,
}
}
223 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 105,
}
}
224 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
225 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
226 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
227 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
228 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
229 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
230 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
231 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
232 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
233 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
234 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
235 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
236 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 106,
}
}
237 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
238 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
239 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
240 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
241 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
242 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
243 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
244 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 106,
}
}
245 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
246 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
247 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
248 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 106,
}
}
249 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
250 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
251 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
252 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 106,
}
}
253 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 106,
}
}
254 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 106,
}
}
255 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
256 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
257 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
258 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
259 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 106,
}
}
260 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
261 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
262 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
263 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
264 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
265 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
266 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
267 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
268 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
269 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
270 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
271 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
272 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
273 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
274 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
275 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
276 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
277 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
278 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
279 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
280 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
281 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
282 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
283 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
284 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 106,
}
}
285 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
286 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
287 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
288 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
289 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
290 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
291 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 106,
}
}
292 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
293 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
294 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
295 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
296 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
297 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
298 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
299 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
300 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
301 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
302 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
303 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
304 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
305 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
306 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
307 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
308 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
309 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
310 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
311 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
312 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
313 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
314 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
315 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
316 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 106,
}
}
317 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
318 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
319 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
320 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
321 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 106,
}
}
322 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 106,
}
}
323 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 9,
nonterminal_produced: 106,
}
}
324 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
325 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
326 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
327 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 106,
}
}
328 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
329 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
330 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
331 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 106,
}
}
332 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
333 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
334 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
335 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
336 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
337 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
338 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
339 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 106,
}
}
340 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
341 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
342 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
343 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
344 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
345 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
346 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
347 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 106,
}
}
348 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 106,
}
}
349 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
350 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 106,
}
}
351 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 106,
}
}
352 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 107,
}
}
353 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 107,
}
}
354 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 107,
}
}
355 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 107,
}
}
356 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 108,
}
}
357 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 108,
}
}
358 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 109,
}
}
359 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 109,
}
}
360 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 110,
}
}
361 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 111,
}
}
362 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 111,
}
}
363 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 112,
}
}
364 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 113,
}
}
365 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 113,
}
}
366 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 114,
}
}
367 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 115,
}
}
368 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 115,
}
}
369 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 116,
}
}
370 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 116,
}
}
371 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 116,
}
}
372 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 117,
}
}
373 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 117,
}
}
374 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 118,
}
}
375 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 119,
}
}
376 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 119,
}
}
377 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 120,
}
}
378 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 120,
}
}
379 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 121,
}
}
380 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 122,
}
}
381 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 122,
}
}
382 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 123,
}
}
383 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 124,
}
}
384 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 125,
}
}
385 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 125,
}
}
386 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 125,
}
}
387 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 126,
}
}
388 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 126,
}
}
389 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 127,
}
}
390 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 127,
}
}
391 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 128,
}
}
392 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 129,
}
}
393 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 130,
}
}
394 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 130,
}
}
395 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 131,
}
}
396 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 131,
}
}
397 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 131,
}
}
398 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 131,
}
}
399 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 132,
}
}
400 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 132,
}
}
401 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 132,
}
}
402 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 133,
}
}
403 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 134,
}
}
404 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 134,
}
}
405 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 135,
}
}
406 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 135,
}
}
407 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 135,
}
}
408 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 135,
}
}
409 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 136,
}
}
410 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 137,
}
}
411 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 137,
}
}
412 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 138,
}
}
413 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 138,
}
}
414 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 138,
}
}
415 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 138,
}
}
416 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 138,
}
}
417 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 138,
}
}
418 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 138,
}
}
419 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 138,
}
}
420 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 138,
}
}
421 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 138,
}
}
422 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 138,
}
}
423 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 138,
}
}
424 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 138,
}
}
425 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 138,
}
}
426 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 139,
}
}
427 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 139,
}
}
428 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 139,
}
}
429 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 139,
}
}
430 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 140,
}
}
431 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 140,
}
}
432 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 140,
}
}
433 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 140,
}
}
434 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 141,
}
}
435 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 141,
}
}
436 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 142,
}
}
437 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 143,
}
}
438 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 144,
}
}
439 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 144,
}
}
440 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 144,
}
}
441 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 145,
}
}
442 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 146,
}
}
443 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 146,
}
}
444 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 147,
}
}
445 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 147,
}
}
446 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 148,
}
}
447 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 149,
}
}
448 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 150,
}
}
449 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 150,
}
}
450 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 150,
}
}
451 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 150,
}
}
452 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 151,
}
}
453 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 151,
}
}
454 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 152,
}
}
455 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 152,
}
}
456 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 153,
}
}
457 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 153,
}
}
458 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 154,
}
}
459 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 154,
}
}
460 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 155,
}
}
461 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 155,
}
}
462 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 156,
}
}
463 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 156,
}
}
464 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 156,
}
}
465 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 156,
}
}
466 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 156,
}
}
467 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 156,
}
}
468 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 156,
}
}
469 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 156,
}
}
470 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 157,
}
}
471 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 157,
}
}
472 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 158,
}
}
473 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 158,
}
}
474 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 158,
}
}
475 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 158,
}
}
476 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 158,
}
}
477 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 159,
}
}
478 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 159,
}
}
479 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 159,
}
}
480 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 160,
}
}
481 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 161,
}
}
482 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 10,
nonterminal_produced: 161,
}
}
483 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 161,
}
}
484 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 161,
}
}
485 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 161,
}
}
486 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 161,
}
}
487 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 161,
}
}
488 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 161,
}
}
489 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 161,
}
}
490 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 162,
}
}
491 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 162,
}
}
492 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 163,
}
}
493 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 163,
}
}
494 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 163,
}
}
495 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 164,
}
}
496 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 164,
}
}
497 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 165,
}
}
498 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 166,
}
}
499 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 166,
}
}
500 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 167,
}
}
501 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 167,
}
}
502 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 168,
}
}
503 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 168,
}
}
504 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 168,
}
}
505 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 168,
}
}
506 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 168,
}
}
507 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 168,
}
}
508 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 168,
}
}
509 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 168,
}
}
510 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 168,
}
}
511 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 168,
}
}
512 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 168,
}
}
513 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 11,
nonterminal_produced: 168,
}
}
514 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 168,
}
}
515 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 9,
nonterminal_produced: 168,
}
}
516 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 168,
}
}
517 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 169,
}
}
518 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 169,
}
}
519 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 170,
}
}
520 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 170,
}
}
521 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 171,
}
}
522 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 171,
}
}
523 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 172,
}
}
524 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 173,
}
}
525 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 173,
}
}
526 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 174,
}
}
527 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 174,
}
}
528 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 175,
}
}
529 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 175,
}
}
530 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 175,
}
}
531 => {
___state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 175,
}
}
532 => ___state_machine::SimulatedReduce::Accept,
_ => panic!("invalid reduction index {___reduce_index}",)
}
}
pub struct TopParser {
_priv: (),
}

impl Default for TopParser { fn default() -> Self { Self::new() } }
impl TopParser {
pub fn new() -> TopParser {
TopParser {
_priv: (),
}
}

#[allow(dead_code)]
pub fn parse<
    'input,
    ___TOKEN: ___ToTriple<'input, >,
    ___TOKENS: IntoIterator<Item=___TOKEN>,
>(
&self,
text: &'input str,
___tokens0: ___TOKENS,
) -> Result<Top, ___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>>
{
let ___tokens = ___tokens0.into_iter();
let mut ___tokens = ___tokens.map(|t| ___ToTriple::to_triple(t));
___state_machine::Parser::drive(
___StateMachine {
text,
___phantom: core::marker::PhantomData::<(&())>,
},
___tokens,
)
}
}
fn ___accepts<
    'input,
>(
___error_state: Option<i16>,
___states: &[i16],
___opt_integer: Option<usize>,
_: core::marker::PhantomData<(&'input ())>,
) -> bool
{
let mut ___states = ___states.to_vec();
___states.extend(___error_state);
loop {
let mut ___states_len = ___states.len();
let ___top = ___states[___states_len - 1];
let ___action = match ___opt_integer {
None => ___EOF_ACTION[___top as usize],
Some(___integer) => ___action(___top, ___integer),
};
if ___action == 0 { return false; }
if ___action > 0 { return true; }
let (___to_pop, ___nt) = match ___simulate_reduce(-(___action + 1), core::marker::PhantomData::<(&())>) {
___state_machine::SimulatedReduce::Reduce {
states_to_pop, nonterminal_produced
} => (states_to_pop, nonterminal_produced),
___state_machine::SimulatedReduce::Accept => return true,
};
___states_len -= ___to_pop;
___states.truncate(___states_len);
let ___top = ___states[___states_len - 1];
let ___next_state = ___goto(___top, ___nt);
___states.push(___next_state);
}
}
fn ___reduce<
    'input,
>(
text: &'input str,
___action: i16,
___lookahead_start: Option<&usize>,
___states: &mut alloc::vec::Vec<i16>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> Option<Result<Top,___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>>>
{
let (___pop_states, ___nonterminal) = match ___action {
0 => {
___reduce0(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
1 => {
___reduce1(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
2 => {
___reduce2(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
3 => {
___reduce3(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
4 => {
___reduce4(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
5 => {
___reduce5(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
6 => {
___reduce6(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
7 => {
___reduce7(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
8 => {
___reduce8(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
9 => {
___reduce9(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
10 => {
___reduce10(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
11 => {
___reduce11(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
12 => {
___reduce12(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
13 => {
___reduce13(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
14 => {
___reduce14(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
15 => {
___reduce15(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
16 => {
___reduce16(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
17 => {
___reduce17(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
18 => {
___reduce18(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
19 => {
___reduce19(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
20 => {
___reduce20(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
21 => {
___reduce21(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
22 => {
___reduce22(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
23 => {
___reduce23(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
24 => {
___reduce24(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
25 => {
___reduce25(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
26 => {
___reduce26(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
27 => {
___reduce27(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
28 => {
___reduce28(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
29 => {
___reduce29(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
30 => {
___reduce30(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
31 => {
___reduce31(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
32 => {
___reduce32(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
33 => {
___reduce33(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
34 => {
___reduce34(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
35 => {
___reduce35(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
36 => {
___reduce36(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
37 => {
___reduce37(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
38 => {
___reduce38(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
39 => {
___reduce39(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
40 => {
___reduce40(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
41 => {
___reduce41(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
42 => {
___reduce42(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
43 => {
___reduce43(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
44 => {
___reduce44(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
45 => {
___reduce45(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
46 => {
___reduce46(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
47 => {
___reduce47(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
48 => {
___reduce48(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
49 => {
___reduce49(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
50 => {
___reduce50(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
51 => {
___reduce51(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
52 => {
___reduce52(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
53 => {
___reduce53(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
54 => {
___reduce54(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
55 => {
___reduce55(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
56 => {
___reduce56(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
57 => {
___reduce57(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
58 => {
___reduce58(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
59 => {
___reduce59(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
60 => {
___reduce60(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
61 => {
___reduce61(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
62 => {
___reduce62(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
63 => {
___reduce63(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
64 => {
___reduce64(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
65 => {
___reduce65(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
66 => {
___reduce66(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
67 => {
___reduce67(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
68 => {
___reduce68(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
69 => {
___reduce69(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
70 => {
___reduce70(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
71 => {
___reduce71(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
72 => {
___reduce72(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
73 => {
___reduce73(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
74 => {
___reduce74(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
75 => {
___reduce75(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
76 => {
___reduce76(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
77 => {
___reduce77(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
78 => {
___reduce78(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
79 => {
___reduce79(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
80 => {
___reduce80(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
81 => {
___reduce81(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
82 => {
___reduce82(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
83 => {
___reduce83(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
84 => {
___reduce84(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
85 => {
___reduce85(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
86 => {
___reduce86(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
87 => {
___reduce87(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
88 => {
___reduce88(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
89 => {
___reduce89(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
90 => {
___reduce90(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
91 => {
___reduce91(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
92 => {
___reduce92(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
93 => {
___reduce93(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
94 => {
___reduce94(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
95 => {
___reduce95(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
96 => {
___reduce96(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
97 => {
___reduce97(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
98 => {
___reduce98(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
99 => {
___reduce99(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
100 => {
___reduce100(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
101 => {
___reduce101(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
102 => {
___reduce102(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
103 => {
___reduce103(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
104 => {
___reduce104(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
105 => {
___reduce105(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
106 => {
___reduce106(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
107 => {
___reduce107(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
108 => {
___reduce108(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
109 => {
___reduce109(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
110 => {
___reduce110(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
111 => {
___reduce111(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
112 => {
___reduce112(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
113 => {
___reduce113(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
114 => {
___reduce114(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
115 => {
___reduce115(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
116 => {
___reduce116(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
117 => {
___reduce117(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
118 => {
___reduce118(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
119 => {
___reduce119(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
120 => {
___reduce120(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
121 => {
___reduce121(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
122 => {
___reduce122(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
123 => {
___reduce123(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
124 => {
___reduce124(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
125 => {
___reduce125(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
126 => {
___reduce126(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
127 => {
___reduce127(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
128 => {
___reduce128(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
129 => {
___reduce129(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
130 => {
___reduce130(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
131 => {
___reduce131(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
132 => {
___reduce132(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
133 => {
___reduce133(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
134 => {
___reduce134(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
135 => {
___reduce135(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
136 => {
___reduce136(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
137 => {
___reduce137(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
138 => {
___reduce138(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
139 => {
___reduce139(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
140 => {
___reduce140(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
141 => {
___reduce141(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
142 => {
___reduce142(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
143 => {
___reduce143(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
144 => {
___reduce144(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
145 => {
___reduce145(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
146 => {
___reduce146(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
147 => {
___reduce147(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
148 => {
___reduce148(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
149 => {
___reduce149(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
150 => {
___reduce150(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
151 => {
___reduce151(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
152 => {
___reduce152(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
153 => {
___reduce153(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
154 => {
___reduce154(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
155 => {
___reduce155(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
156 => {
___reduce156(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
157 => {
___reduce157(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
158 => {
___reduce158(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
159 => {
___reduce159(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
160 => {
___reduce160(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
161 => {
___reduce161(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
162 => {
___reduce162(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
163 => {
___reduce163(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
164 => {
___reduce164(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
165 => {
___reduce165(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
166 => {
___reduce166(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
167 => {
___reduce167(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
168 => {
___reduce168(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
169 => {
___reduce169(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
170 => {
___reduce170(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
171 => {
___reduce171(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
172 => {
___reduce172(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
173 => {
___reduce173(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
174 => {
___reduce174(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
175 => {
___reduce175(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
176 => {
___reduce176(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
177 => {
___reduce177(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
178 => {
___reduce178(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
179 => {
___reduce179(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
180 => {
___reduce180(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
181 => {
___reduce181(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
182 => {
___reduce182(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
183 => {
___reduce183(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
184 => {
___reduce184(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
185 => {
___reduce185(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
186 => {
___reduce186(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
187 => {
___reduce187(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
188 => {
___reduce188(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
189 => {
___reduce189(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
190 => {
___reduce190(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
191 => {
___reduce191(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
192 => {
___reduce192(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
193 => {
___reduce193(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
194 => {
___reduce194(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
195 => {
___reduce195(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
196 => {
___reduce196(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
197 => {
___reduce197(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
198 => {
___reduce198(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
199 => {
___reduce199(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
200 => {
___reduce200(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
201 => {
___reduce201(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
202 => {
___reduce202(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
203 => {
___reduce203(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
204 => {
___reduce204(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
205 => {
// Conversion = Terminal, "=>" => ActionFn(499);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant1(___symbols);
let ___sym0 = ___pop_Variant89(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = match super::___action499::<>(text, ___sym0, ___sym1) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant14(___nt), ___end));
(2, 97)
}
206 => {
// Conversion = Attribute+, Terminal, "=>" => ActionFn(500);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant1(___symbols);
let ___sym1 = ___pop_Variant89(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = match super::___action500::<>(text, ___sym0, ___sym1, ___sym2) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant14(___nt), ___end));
(3, 97)
}
207 => {
___reduce207(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
208 => {
___reduce208(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
209 => {
___reduce209(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
210 => {
___reduce210(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
211 => {
___reduce211(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
212 => {
___reduce212(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
213 => {
___reduce213(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
214 => {
___reduce214(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
215 => {
___reduce215(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
216 => {
___reduce216(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
217 => {
___reduce217(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
218 => {
___reduce218(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
219 => {
___reduce219(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
220 => {
___reduce220(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
221 => {
___reduce221(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
222 => {
___reduce222(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
223 => {
___reduce223(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
224 => {
___reduce224(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
225 => {
___reduce225(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
226 => {
___reduce226(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
227 => {
___reduce227(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
228 => {
___reduce228(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
229 => {
___reduce229(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
230 => {
___reduce230(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
231 => {
___reduce231(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
232 => {
___reduce232(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
233 => {
___reduce233(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
234 => {
___reduce234(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
235 => {
___reduce235(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
236 => {
___reduce236(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
237 => {
___reduce237(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
238 => {
___reduce238(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
239 => {
___reduce239(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
240 => {
___reduce240(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
241 => {
___reduce241(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
242 => {
___reduce242(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
243 => {
___reduce243(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
244 => {
___reduce244(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
245 => {
___reduce245(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
246 => {
___reduce246(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
247 => {
___reduce247(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
248 => {
___reduce248(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
249 => {
___reduce249(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
250 => {
___reduce250(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
251 => {
___reduce251(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
252 => {
___reduce252(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
253 => {
___reduce253(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
254 => {
___reduce254(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
255 => {
___reduce255(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
256 => {
___reduce256(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
257 => {
___reduce257(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
258 => {
___reduce258(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
259 => {
___reduce259(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
260 => {
___reduce260(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
261 => {
___reduce261(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
262 => {
___reduce262(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
263 => {
___reduce263(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
264 => {
___reduce264(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
265 => {
___reduce265(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
266 => {
___reduce266(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
267 => {
___reduce267(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
268 => {
___reduce268(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
269 => {
___reduce269(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
270 => {
___reduce270(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
271 => {
___reduce271(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
272 => {
___reduce272(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
273 => {
___reduce273(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
274 => {
___reduce274(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
275 => {
___reduce275(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
276 => {
___reduce276(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
277 => {
___reduce277(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
278 => {
___reduce278(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
279 => {
___reduce279(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
280 => {
___reduce280(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
281 => {
___reduce281(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
282 => {
___reduce282(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
283 => {
___reduce283(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
284 => {
___reduce284(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
285 => {
___reduce285(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
286 => {
___reduce286(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
287 => {
___reduce287(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
288 => {
___reduce288(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
289 => {
___reduce289(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
290 => {
___reduce290(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
291 => {
___reduce291(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
292 => {
___reduce292(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
293 => {
___reduce293(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
294 => {
___reduce294(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
295 => {
___reduce295(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
296 => {
___reduce296(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
297 => {
___reduce297(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
298 => {
___reduce298(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
299 => {
___reduce299(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
300 => {
___reduce300(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
301 => {
___reduce301(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
302 => {
___reduce302(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
303 => {
___reduce303(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
304 => {
___reduce304(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
305 => {
___reduce305(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
306 => {
___reduce306(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
307 => {
___reduce307(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
308 => {
___reduce308(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
309 => {
___reduce309(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
310 => {
___reduce310(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
311 => {
___reduce311(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
312 => {
___reduce312(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
313 => {
___reduce313(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
314 => {
___reduce314(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
315 => {
___reduce315(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
316 => {
___reduce316(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
317 => {
___reduce317(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
318 => {
___reduce318(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
319 => {
___reduce319(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
320 => {
___reduce320(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
321 => {
___reduce321(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
322 => {
___reduce322(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
323 => {
___reduce323(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
324 => {
___reduce324(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
325 => {
___reduce325(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
326 => {
___reduce326(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
327 => {
___reduce327(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
328 => {
___reduce328(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
329 => {
___reduce329(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
330 => {
___reduce330(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
331 => {
___reduce331(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
332 => {
___reduce332(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
333 => {
___reduce333(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
334 => {
___reduce334(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
335 => {
___reduce335(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
336 => {
___reduce336(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
337 => {
___reduce337(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
338 => {
___reduce338(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
339 => {
___reduce339(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
340 => {
___reduce340(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
341 => {
___reduce341(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
342 => {
___reduce342(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
343 => {
___reduce343(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
344 => {
___reduce344(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
345 => {
___reduce345(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
346 => {
___reduce346(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
347 => {
___reduce347(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
348 => {
___reduce348(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
349 => {
___reduce349(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
350 => {
___reduce350(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
351 => {
___reduce351(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
352 => {
___reduce352(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
353 => {
___reduce353(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
354 => {
___reduce354(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
355 => {
___reduce355(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
356 => {
___reduce356(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
357 => {
___reduce357(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
358 => {
___reduce358(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
359 => {
___reduce359(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
360 => {
___reduce360(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
361 => {
___reduce361(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
362 => {
___reduce362(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
363 => {
___reduce363(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
364 => {
___reduce364(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
365 => {
___reduce365(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
366 => {
___reduce366(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
367 => {
___reduce367(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
368 => {
___reduce368(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
369 => {
___reduce369(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
370 => {
___reduce370(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
371 => {
___reduce371(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
372 => {
___reduce372(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
373 => {
___reduce373(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
374 => {
___reduce374(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
375 => {
___reduce375(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
376 => {
___reduce376(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
377 => {
___reduce377(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
378 => {
___reduce378(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
379 => {
___reduce379(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
380 => {
___reduce380(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
381 => {
___reduce381(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
382 => {
___reduce382(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
383 => {
___reduce383(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
384 => {
___reduce384(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
385 => {
___reduce385(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
386 => {
// MatchItem = MatchSymbol, "=>" => ActionFn(465);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant1(___symbols);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = match super::___action465::<>(text, ___sym0, ___sym1) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant26(___nt), ___end));
(2, 125)
}
387 => {
___reduce387(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
388 => {
___reduce388(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
389 => {
___reduce389(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
390 => {
___reduce390(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
391 => {
___reduce391(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
392 => {
___reduce392(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
393 => {
___reduce393(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
394 => {
___reduce394(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
395 => {
___reduce395(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
396 => {
___reduce396(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
397 => {
___reduce397(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
398 => {
___reduce398(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
399 => {
___reduce399(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
400 => {
___reduce400(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
401 => {
___reduce401(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
402 => {
___reduce402(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
403 => {
___reduce403(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
404 => {
___reduce404(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
405 => {
___reduce405(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
406 => {
___reduce406(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
407 => {
___reduce407(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
408 => {
___reduce408(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
409 => {
___reduce409(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
410 => {
___reduce410(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
411 => {
___reduce411(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
412 => {
___reduce412(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
413 => {
___reduce413(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
414 => {
___reduce414(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
415 => {
___reduce415(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
416 => {
___reduce416(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
417 => {
___reduce417(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
418 => {
___reduce418(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
419 => {
___reduce419(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
420 => {
___reduce420(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
421 => {
___reduce421(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
422 => {
___reduce422(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
423 => {
___reduce423(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
424 => {
___reduce424(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
425 => {
___reduce425(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
426 => {
___reduce426(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
427 => {
___reduce427(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
428 => {
___reduce428(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
429 => {
___reduce429(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
430 => {
___reduce430(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
431 => {
___reduce431(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
432 => {
___reduce432(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
433 => {
___reduce433(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
434 => {
___reduce434(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
435 => {
___reduce435(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
436 => {
___reduce436(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
437 => {
___reduce437(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
438 => {
___reduce438(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
439 => {
___reduce439(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
440 => {
___reduce440(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
441 => {
___reduce441(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
442 => {
___reduce442(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
443 => {
___reduce443(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
444 => {
___reduce444(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
445 => {
___reduce445(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
446 => {
// StringConstant = "StringLiteral" => ActionFn(442);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = match super::___action442::<>(text, ___sym0) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant91(___nt), ___end));
(1, 148)
}
447 => {
// StringLiteral = "StringLiteral" => ActionFn(443);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = match super::___action443::<>(text, ___sym0) {
Ok(v) => v,
Err(e) => return Some(Err(e)),
};
___symbols.push((___start, ___Symbol::Variant22(___nt), ___end));
(1, 149)
}
448 => {
___reduce448(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
449 => {
___reduce449(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
450 => {
___reduce450(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
451 => {
___reduce451(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
452 => {
___reduce452(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
453 => {
___reduce453(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
454 => {
___reduce454(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
455 => {
___reduce455(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
456 => {
___reduce456(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
457 => {
___reduce457(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
458 => {
___reduce458(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
459 => {
___reduce459(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
460 => {
___reduce460(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
461 => {
___reduce461(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
462 => {
___reduce462(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
463 => {
___reduce463(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
464 => {
___reduce464(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
465 => {
___reduce465(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
466 => {
___reduce466(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
467 => {
___reduce467(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
468 => {
___reduce468(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
469 => {
___reduce469(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
470 => {
___reduce470(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
471 => {
___reduce471(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
472 => {
___reduce472(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
473 => {
___reduce473(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
474 => {
___reduce474(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
475 => {
___reduce475(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
476 => {
___reduce476(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
477 => {
___reduce477(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
478 => {
___reduce478(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
479 => {
___reduce479(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
480 => {
___reduce480(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
481 => {
___reduce481(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
482 => {
___reduce482(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
483 => {
___reduce483(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
484 => {
___reduce484(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
485 => {
___reduce485(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
486 => {
___reduce486(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
487 => {
___reduce487(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
488 => {
___reduce488(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
489 => {
___reduce489(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
490 => {
___reduce490(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
491 => {
___reduce491(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
492 => {
___reduce492(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
493 => {
___reduce493(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
494 => {
___reduce494(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
495 => {
___reduce495(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
496 => {
___reduce496(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
497 => {
___reduce497(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
498 => {
___reduce498(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
499 => {
___reduce499(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
500 => {
___reduce500(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
501 => {
___reduce501(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
502 => {
___reduce502(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
503 => {
___reduce503(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
504 => {
___reduce504(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
505 => {
___reduce505(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
506 => {
___reduce506(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
507 => {
___reduce507(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
508 => {
___reduce508(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
509 => {
___reduce509(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
510 => {
___reduce510(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
511 => {
___reduce511(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
512 => {
___reduce512(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
513 => {
___reduce513(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
514 => {
___reduce514(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
515 => {
___reduce515(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
516 => {
___reduce516(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
517 => {
___reduce517(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
518 => {
___reduce518(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
519 => {
___reduce519(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
520 => {
___reduce520(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
521 => {
___reduce521(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
522 => {
___reduce522(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
523 => {
___reduce523(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
524 => {
___reduce524(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
525 => {
___reduce525(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
526 => {
___reduce526(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
527 => {
___reduce527(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
528 => {
___reduce528(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
529 => {
___reduce529(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
530 => {
___reduce530(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
531 => {
___reduce531(text, ___lookahead_start, ___symbols, core::marker::PhantomData::<(&())>)
}
532 => {
// ___Top = Top => ActionFn(0);
let ___sym0 = ___pop_Variant95(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action0::<>(text, ___sym0);
return Some(Ok(___nt));
}
_ => panic!("invalid action code {___action}")
};
let ___states_len = ___states.len();
___states.truncate(___states_len - ___pop_states);
let ___state = *___states.last().unwrap();
let ___next_state = ___goto(___state, ___nonterminal);
___states.push(___next_state);
None
}
#[inline(never)]
fn ___symbol_type_mismatch() -> ! {
panic!("symbol type mismatch")
}
fn ___pop_Variant9<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (), usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant9(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant50<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (AttributeArg), usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant50(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant82<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, (NonterminalString, Vec<NonterminalString>), usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant82(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant44<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ActionKind, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant44(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant10<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Alternative, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant10(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant48<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, AssociatedType, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant48(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant22<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Atom, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant22(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant12<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Attribute, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant12(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant7<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Condition, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant7(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant63<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ConditionOp, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant63(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant14<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Conversion, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant14(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant65<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, EnumToken, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant65(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant66<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, ExprSymbol, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant66(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant16<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, FieldPattern<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant16(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant69<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Grammar, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant69(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant67<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, GrammarItem, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant67(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant24<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Lifetime, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant24(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant77<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MatchContents, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant77(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant26<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MatchItem, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant26(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant79<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MatchMapping, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant79(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant81<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, MatchToken, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant81(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant28<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, NonterminalString, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant28(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant51<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<(AttributeArg)>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant51(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant45<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<ActionKind>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant45(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant46<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Alternative>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant46(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant52<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Attribute>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant52(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant8<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Condition>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant8(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant64<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Conversion>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant64(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant68<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<FieldPattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant68(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant76<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Lifetime>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant76(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant78<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<MatchItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant78(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant83<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<NonterminalString>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant83(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant71<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Parameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant71(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant85<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Pattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant85(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant93<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Symbol>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant93(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant2<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Tok<'input>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant2(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant97<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<TypeBound<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant97(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant98<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<TypeBoundParameter<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant98(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant99<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<TypeParameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant99(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant4<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant4(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant72<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Vec<Parameter>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant72(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant6<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Vec<TypeBoundParameter<TypeRef>>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant6(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant73<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Vec<TypeParameter>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant73(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant75<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<Vec<WhereClause<TypeRef>>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant75(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant74<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Option<WhereClause<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant74(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant18<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Parameter, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant18(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant84<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Path, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant84(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant30<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Pattern<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant30(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant86<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, PatternKind<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant86(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant90<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, RepeatOp, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant90(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant91<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, String, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant91(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant32<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Symbol, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant32(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant94<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, SymbolKind, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant94(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant80<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TerminalLiteral, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant80(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant89<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TerminalString, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant89(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant0<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Tok<'input>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant0(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant95<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Top, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant95(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant96<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Tuple, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant96(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant34<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TupleItem, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant34(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant36<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeBound<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant36(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant38<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeBoundParameter<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant38(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant40<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeParameter, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant40(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant3<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, TypeRef, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant3(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant47<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Alternative>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant47(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant53<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Attribute>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant53(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant54<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Conversion>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant54(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant87<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Lifetime>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant87(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant57<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<MatchItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant57(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant58<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<NonterminalString>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant58(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant55<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Parameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant55(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant59<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Pattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant59(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant60<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<Symbol>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant60(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant88<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<TypeBound<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant88(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant5<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<TypeBoundParameter<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant5(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant61<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<TypeParameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant61(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant62<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant62(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant56<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Vec<WhereClause<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant56(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant100<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, Visibility, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant100(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant20<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, WhereClause<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant20(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant11<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Alternative>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant11(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant49<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<AssociatedType>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant49(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant23<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Atom>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant23(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant13<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Attribute>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant13(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant15<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Conversion>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant15(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant17<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant17(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant70<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<GrammarItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant70(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant25<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Lifetime>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant25(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant27<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<MatchItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant27(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant29<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<NonterminalString>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant29(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant19<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Parameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant19(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant31<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant31(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant92<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<String>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant92(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant33<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<Symbol>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant33(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant35<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TupleItem>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant35(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant37<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant37(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant39<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant39(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant41<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TypeParameter>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant41(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant42<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<TypeRef>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant42(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant21<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant21(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant43<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, usize, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant43(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___pop_Variant1<
  'input,
>(
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>
) -> (usize, &'input str, usize)
 {
match ___symbols.pop() {
Some((___l, ___Symbol::Variant1(___v), ___r)) => (___l, ___v, ___r),
_ => ___symbol_type_mismatch()
}
}
fn ___reduce0<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// "::"? = "::" => ActionFn(143);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action143::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(1, 0)
}
fn ___reduce1<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// "::"? =  => ActionFn(144);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action144::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(0, 0)
}
fn ___reduce2<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ";"? = ";" => ActionFn(163);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action163::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(1, 1)
}
fn ___reduce3<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ";"? =  => ActionFn(164);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action164::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(0, 1)
}
fn ___reduce4<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// "mut"? = "mut" => ActionFn(152);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action152::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(1, 2)
}
fn ___reduce5<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// "mut"? =  => ActionFn(153);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action153::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant2(___nt), ___end));
(0, 2)
}
fn ___reduce6<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("->" <TypeRef>) = "->", TypeRef => ActionFn(180);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action180::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 3)
}
fn ___reduce7<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("->" <TypeRef>)? = "->", TypeRef => ActionFn(330);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action330::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(2, 4)
}
fn ___reduce8<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("->" <TypeRef>)? =  => ActionFn(179);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action179::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(0, 4)
}
fn ___reduce9<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <TypeRef>) = ":", TypeRef => ActionFn(172);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action172::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 5)
}
fn ___reduce10<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <TypeRef>)? = ":", TypeRef => ActionFn(335);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action335::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(2, 6)
}
fn ___reduce11<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <TypeRef>)? =  => ActionFn(171);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action171::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(0, 6)
}
fn ___reduce12<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("<" <Comma<TypeBoundParameter>> ">") = "<", Comma<TypeBoundParameter>, ">" => ActionFn(176);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant5(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action176::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(3, 7)
}
fn ___reduce13<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("<" <Comma<TypeBoundParameter>> ">")? = "<", Comma<TypeBoundParameter>, ">" => ActionFn(338);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant5(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action338::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant6(___nt), ___end));
(3, 8)
}
fn ___reduce14<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("<" <Comma<TypeBoundParameter>> ">")? =  => ActionFn(175);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action175::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant6(___nt), ___end));
(0, 8)
}
fn ___reduce15<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("if" <Cond>) = "if", Cond => ActionFn(160);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant7(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action160::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant7(___nt), ___end));
(2, 9)
}
fn ___reduce16<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("if" <Cond>)? = "if", Cond => ActionFn(341);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant7(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action341::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant8(___nt), ___end));
(2, 10)
}
fn ___reduce17<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("if" <Cond>)? =  => ActionFn(159);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action159::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant8(___nt), ___end));
(0, 10)
}
fn ___reduce18<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// () =  => ActionFn(183);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action183::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant9(___nt), ___end));
(0, 11)
}
fn ___reduce19<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",") = Alternative, "," => ActionFn(258);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action258::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(2, 12)
}
fn ___reduce20<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",")* =  => ActionFn(256);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action256::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant11(___nt), ___end));
(0, 13)
}
fn ___reduce21<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",")* = (<Alternative> ",")+ => ActionFn(257);
let ___sym0 = ___pop_Variant11(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action257::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant11(___nt), ___end));
(1, 13)
}
fn ___reduce22<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",")+ = Alternative, "," => ActionFn(348);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action348::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant11(___nt), ___end));
(2, 14)
}
fn ___reduce23<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Alternative> ",")+ = (<Alternative> ",")+, Alternative, "," => ActionFn(349);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant10(___symbols);
let ___sym0 = ___pop_Variant11(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action349::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant11(___nt), ___end));
(3, 14)
}
fn ___reduce24<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<AttributeInner> ",") = AttributeInner, "," => ActionFn(248);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action248::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant12(___nt), ___end));
(2, 15)
}
fn ___reduce25<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<AttributeInner> ",")* =  => ActionFn(246);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action246::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(0, 16)
}
fn ___reduce26<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<AttributeInner> ",")* = (<AttributeInner> ",")+ => ActionFn(247);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action247::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(1, 16)
}
fn ___reduce27<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<AttributeInner> ",")+ = AttributeInner, "," => ActionFn(352);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action352::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(2, 17)
}
fn ___reduce28<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<AttributeInner> ",")+ = (<AttributeInner> ",")+, AttributeInner, "," => ActionFn(353);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant12(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action353::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(3, 17)
}
fn ___reduce29<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",") = Conversion, "," => ActionFn(282);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant14(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action282::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant14(___nt), ___end));
(2, 18)
}
fn ___reduce30<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",")* =  => ActionFn(280);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action280::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant15(___nt), ___end));
(0, 19)
}
fn ___reduce31<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",")* = (<Conversion> ",")+ => ActionFn(281);
let ___sym0 = ___pop_Variant15(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action281::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant15(___nt), ___end));
(1, 19)
}
fn ___reduce32<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",")+ = Conversion, "," => ActionFn(356);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant14(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action356::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant15(___nt), ___end));
(2, 20)
}
fn ___reduce33<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Conversion> ",")+ = (<Conversion> ",")+, Conversion, "," => ActionFn(357);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant14(___symbols);
let ___sym0 = ___pop_Variant15(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action357::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant15(___nt), ___end));
(3, 20)
}
fn ___reduce34<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",") = FieldPattern, "," => ActionFn(134);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant16(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action134::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant16(___nt), ___end));
(2, 21)
}
fn ___reduce35<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",")* =  => ActionFn(132);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action132::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant17(___nt), ___end));
(0, 22)
}
fn ___reduce36<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",")* = (<FieldPattern> ",")+ => ActionFn(133);
let ___sym0 = ___pop_Variant17(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action133::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant17(___nt), ___end));
(1, 22)
}
fn ___reduce37<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",")+ = FieldPattern, "," => ActionFn(360);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant16(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action360::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant17(___nt), ___end));
(2, 23)
}
fn ___reduce38<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FieldPattern> ",")+ = (<FieldPattern> ",")+, FieldPattern, "," => ActionFn(361);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant16(___symbols);
let ___sym0 = ___pop_Variant17(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action361::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant17(___nt), ___end));
(3, 23)
}
fn ___reduce39<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",") = GrammarParameter, "," => ActionFn(243);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant18(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action243::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant18(___nt), ___end));
(2, 24)
}
fn ___reduce40<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",")* =  => ActionFn(241);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action241::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant19(___nt), ___end));
(0, 25)
}
fn ___reduce41<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",")* = (<GrammarParameter> ",")+ => ActionFn(242);
let ___sym0 = ___pop_Variant19(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action242::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant19(___nt), ___end));
(1, 25)
}
fn ___reduce42<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",")+ = GrammarParameter, "," => ActionFn(366);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant18(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action366::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant19(___nt), ___end));
(2, 26)
}
fn ___reduce43<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarParameter> ",")+ = (<GrammarParameter> ",")+, GrammarParameter, "," => ActionFn(367);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant18(___symbols);
let ___sym0 = ___pop_Variant19(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action367::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant19(___nt), ___end));
(3, 26)
}
fn ___reduce44<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",") = GrammarWhereClause, "," => ActionFn(220);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action220::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(2, 27)
}
fn ___reduce45<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",")* =  => ActionFn(218);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action218::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant21(___nt), ___end));
(0, 28)
}
fn ___reduce46<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",")* = (<GrammarWhereClause> ",")+ => ActionFn(219);
let ___sym0 = ___pop_Variant21(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action219::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant21(___nt), ___end));
(1, 28)
}
fn ___reduce47<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",")+ = GrammarWhereClause, "," => ActionFn(370);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action370::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant21(___nt), ___end));
(2, 29)
}
fn ___reduce48<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<GrammarWhereClause> ",")+ = (<GrammarWhereClause> ",")+, GrammarWhereClause, "," => ActionFn(371);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant20(___symbols);
let ___sym0 = ___pop_Variant21(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action371::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant21(___nt), ___end));
(3, 29)
}
fn ___reduce49<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::") = Id, "::" => ActionFn(142);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action142::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant22(___nt), ___end));
(2, 30)
}
fn ___reduce50<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::")* =  => ActionFn(140);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action140::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant23(___nt), ___end));
(0, 31)
}
fn ___reduce51<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::")* = (<Id> "::")+ => ActionFn(141);
let ___sym0 = ___pop_Variant23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action141::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant23(___nt), ___end));
(1, 31)
}
fn ___reduce52<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::")+ = Id, "::" => ActionFn(374);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action374::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant23(___nt), ___end));
(2, 32)
}
fn ___reduce53<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Id> "::")+ = (<Id> "::")+, Id, "::" => ActionFn(375);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action375::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant23(___nt), ___end));
(3, 32)
}
fn ___reduce54<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+") = Lifetime, "+" => ActionFn(223);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action223::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant24(___nt), ___end));
(2, 33)
}
fn ___reduce55<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+")* =  => ActionFn(221);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action221::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant25(___nt), ___end));
(0, 34)
}
fn ___reduce56<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+")* = (<Lifetime> "+")+ => ActionFn(222);
let ___sym0 = ___pop_Variant25(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action222::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant25(___nt), ___end));
(1, 34)
}
fn ___reduce57<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+")+ = Lifetime, "+" => ActionFn(380);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action380::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant25(___nt), ___end));
(2, 35)
}
fn ___reduce58<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Lifetime> "+")+ = (<Lifetime> "+")+, Lifetime, "+" => ActionFn(381);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant24(___symbols);
let ___sym0 = ___pop_Variant25(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action381::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant25(___nt), ___end));
(3, 35)
}
fn ___reduce59<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",") = MatchItem, "," => ActionFn(277);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action277::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant26(___nt), ___end));
(2, 36)
}
fn ___reduce60<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",")* =  => ActionFn(275);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action275::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant27(___nt), ___end));
(0, 37)
}
fn ___reduce61<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",")* = (<MatchItem> ",")+ => ActionFn(276);
let ___sym0 = ___pop_Variant27(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action276::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant27(___nt), ___end));
(1, 37)
}
fn ___reduce62<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",")+ = MatchItem, "," => ActionFn(384);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action384::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant27(___nt), ___end));
(2, 38)
}
fn ___reduce63<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<MatchItem> ",")+ = (<MatchItem> ",")+, MatchItem, "," => ActionFn(385);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant26(___symbols);
let ___sym0 = ___pop_Variant27(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action385::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant27(___nt), ___end));
(3, 38)
}
fn ___reduce64<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",") = NotMacroId, "," => ActionFn(253);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action253::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant28(___nt), ___end));
(2, 39)
}
fn ___reduce65<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",")* =  => ActionFn(251);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action251::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant29(___nt), ___end));
(0, 40)
}
fn ___reduce66<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",")* = (<NotMacroId> ",")+ => ActionFn(252);
let ___sym0 = ___pop_Variant29(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action252::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant29(___nt), ___end));
(1, 40)
}
fn ___reduce67<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",")+ = NotMacroId, "," => ActionFn(388);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action388::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant29(___nt), ___end));
(2, 41)
}
fn ___reduce68<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<NotMacroId> ",")+ = (<NotMacroId> ",")+, NotMacroId, "," => ActionFn(389);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant28(___symbols);
let ___sym0 = ___pop_Variant29(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action389::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant29(___nt), ___end));
(3, 41)
}
fn ___reduce69<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",") = Pattern, "," => ActionFn(287);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action287::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(2, 42)
}
fn ___reduce70<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",")* =  => ActionFn(285);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action285::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(0, 43)
}
fn ___reduce71<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",")* = (<Pattern> ",")+ => ActionFn(286);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action286::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(1, 43)
}
fn ___reduce72<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",")+ = Pattern, "," => ActionFn(392);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action392::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(2, 44)
}
fn ___reduce73<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Pattern> ",")+ = (<Pattern> ",")+, Pattern, "," => ActionFn(393);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant30(___symbols);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action393::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant31(___nt), ___end));
(3, 44)
}
fn ___reduce74<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",") = Symbol, "," => ActionFn(263);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action263::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(2, 45)
}
fn ___reduce75<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",")* =  => ActionFn(261);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action261::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(0, 46)
}
fn ___reduce76<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",")* = (<Symbol> ",")+ => ActionFn(262);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action262::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(1, 46)
}
fn ___reduce77<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",")+ = Symbol, "," => ActionFn(396);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action396::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(2, 47)
}
fn ___reduce78<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Symbol> ",")+ = (<Symbol> ",")+, Symbol, "," => ActionFn(397);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant32(___symbols);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action397::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(3, 47)
}
fn ___reduce79<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TupleItem> ",") = TupleItem, "," => ActionFn(150);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant34(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action150::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant34(___nt), ___end));
(2, 48)
}
fn ___reduce80<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TupleItem> ",")+ = TupleItem, "," => ActionFn(400);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant34(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action400::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant35(___nt), ___end));
(2, 49)
}
fn ___reduce81<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TupleItem> ",")+ = (<TupleItem> ",")+, TupleItem, "," => ActionFn(401);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant34(___symbols);
let ___sym0 = ___pop_Variant35(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action401::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant35(___nt), ___end));
(3, 49)
}
fn ___reduce82<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+") = TypeBound, "+" => ActionFn(228);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant36(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action228::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(2, 50)
}
fn ___reduce83<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+")* =  => ActionFn(226);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action226::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant37(___nt), ___end));
(0, 51)
}
fn ___reduce84<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+")* = (<TypeBound> "+")+ => ActionFn(227);
let ___sym0 = ___pop_Variant37(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action227::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant37(___nt), ___end));
(1, 51)
}
fn ___reduce85<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+")+ = TypeBound, "+" => ActionFn(402);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant36(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action402::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant37(___nt), ___end));
(2, 52)
}
fn ___reduce86<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBound> "+")+ = (<TypeBound> "+")+, TypeBound, "+" => ActionFn(403);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant36(___symbols);
let ___sym0 = ___pop_Variant37(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action403::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant37(___nt), ___end));
(3, 52)
}
fn ___reduce87<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",") = TypeBoundParameter, "," => ActionFn(238);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action238::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(2, 53)
}
fn ___reduce88<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",")* =  => ActionFn(236);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action236::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant39(___nt), ___end));
(0, 54)
}
fn ___reduce89<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",")* = (<TypeBoundParameter> ",")+ => ActionFn(237);
let ___sym0 = ___pop_Variant39(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action237::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant39(___nt), ___end));
(1, 54)
}
fn ___reduce90<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",")+ = TypeBoundParameter, "," => ActionFn(406);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action406::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant39(___nt), ___end));
(2, 55)
}
fn ___reduce91<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeBoundParameter> ",")+ = (<TypeBoundParameter> ",")+, TypeBoundParameter, "," => ActionFn(407);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant38(___symbols);
let ___sym0 = ___pop_Variant39(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action407::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant39(___nt), ___end));
(3, 55)
}
fn ___reduce92<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",") = TypeParameter, "," => ActionFn(215);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant40(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action215::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant40(___nt), ___end));
(2, 56)
}
fn ___reduce93<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",")* =  => ActionFn(213);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action213::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant41(___nt), ___end));
(0, 57)
}
fn ___reduce94<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",")* = (<TypeParameter> ",")+ => ActionFn(214);
let ___sym0 = ___pop_Variant41(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action214::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant41(___nt), ___end));
(1, 57)
}
fn ___reduce95<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",")+ = TypeParameter, "," => ActionFn(410);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant40(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action410::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant41(___nt), ___end));
(2, 58)
}
fn ___reduce96<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeParameter> ",")+ = (<TypeParameter> ",")+, TypeParameter, "," => ActionFn(411);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant40(___symbols);
let ___sym0 = ___pop_Variant41(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action411::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant41(___nt), ___end));
(3, 58)
}
fn ___reduce97<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",") = TypeRef, "," => ActionFn(233);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action233::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 59)
}
fn ___reduce98<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",")* =  => ActionFn(231);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action231::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(0, 60)
}
fn ___reduce99<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",")* = (<TypeRef> ",")+ => ActionFn(232);
let ___sym0 = ___pop_Variant42(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action232::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(1, 60)
}
fn ___reduce100<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",")+ = TypeRef, "," => ActionFn(414);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action414::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(2, 61)
}
fn ___reduce101<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRef> ",")+ = (<TypeRef> ",")+, TypeRef, "," => ActionFn(415);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant42(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action415::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(3, 61)
}
fn ___reduce102<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",") = TypeRefOrLifetime, "," => ActionFn(268);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action268::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 62)
}
fn ___reduce103<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",")* =  => ActionFn(266);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action266::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(0, 63)
}
fn ___reduce104<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",")* = (<TypeRefOrLifetime> ",")+ => ActionFn(267);
let ___sym0 = ___pop_Variant42(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action267::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(1, 63)
}
fn ___reduce105<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",")+ = TypeRefOrLifetime, "," => ActionFn(418);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action418::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(2, 64)
}
fn ___reduce106<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<TypeRefOrLifetime> ",")+ = (<TypeRefOrLifetime> ",")+, TypeRefOrLifetime, "," => ActionFn(419);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant42(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action419::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant42(___nt), ___end));
(3, 64)
}
fn ___reduce107<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// @L =  => ActionFn(196);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action196::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(0, 65)
}
fn ___reduce108<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// @R =  => ActionFn(195);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action195::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant43(___nt), ___end));
(0, 66)
}
fn ___reduce109<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action = "=>@L" => ActionFn(45);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action45::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant44(___nt), ___end));
(1, 67)
}
fn ___reduce110<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action = "=>@R" => ActionFn(46);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action46::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant44(___nt), ___end));
(1, 67)
}
fn ___reduce111<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action = "=>" => ActionFn(47);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action47::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant44(___nt), ___end));
(1, 67)
}
fn ___reduce112<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action = "=>?" => ActionFn(48);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action48::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant44(___nt), ___end));
(1, 67)
}
fn ___reduce113<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action? = Action => ActionFn(156);
let ___sym0 = ___pop_Variant44(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action156::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant45(___nt), ___end));
(1, 68)
}
fn ___reduce114<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Action? =  => ActionFn(157);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action157::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant45(___nt), ___end));
(0, 68)
}
fn ___reduce115<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Symbol+, "if", Cond, Action => ActionFn(491);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant44(___symbols);
let ___sym2 = ___pop_Variant7(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action491::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(4, 69)
}
fn ___reduce116<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Attribute+, Symbol+, "if", Cond, Action => ActionFn(492);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant44(___symbols);
let ___sym3 = ___pop_Variant7(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant33(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action492::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(5, 69)
}
fn ___reduce117<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Symbol+, "if", Cond => ActionFn(493);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant7(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action493::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(3, 69)
}
fn ___reduce118<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Attribute+, Symbol+, "if", Cond => ActionFn(494);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant7(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant33(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action494::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(4, 69)
}
fn ___reduce119<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Symbol+, Action => ActionFn(495);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant44(___symbols);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action495::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(2, 69)
}
fn ___reduce120<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Attribute+, Symbol+, Action => ActionFn(496);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant44(___symbols);
let ___sym1 = ___pop_Variant33(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action496::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(3, 69)
}
fn ___reduce121<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Symbol+ => ActionFn(497);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action497::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(1, 69)
}
fn ___reduce122<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Attribute+, Symbol+ => ActionFn(498);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant33(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action498::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(2, 69)
}
fn ___reduce123<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = "if", Cond, Action => ActionFn(452);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant44(___symbols);
let ___sym1 = ___pop_Variant7(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action452::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(3, 69)
}
fn ___reduce124<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative = Action => ActionFn(453);
let ___sym0 = ___pop_Variant44(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action453::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant10(___nt), ___end));
(1, 69)
}
fn ___reduce125<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative? = Alternative => ActionFn(254);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action254::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant46(___nt), ___end));
(1, 70)
}
fn ___reduce126<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternative? =  => ActionFn(255);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action255::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant46(___nt), ___end));
(0, 70)
}
fn ___reduce127<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternatives = Alternative, ";" => ActionFn(41);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action41::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(2, 71)
}
fn ___reduce128<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternatives = "{", Comma<Alternative>, "}", ";" => ActionFn(322);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant47(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action322::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(4, 71)
}
fn ___reduce129<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Alternatives = "{", Comma<Alternative>, "}" => ActionFn(323);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant47(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action323::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(3, 71)
}
fn ___reduce130<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType = "type", Id, "=", TypeRef, ";" => ActionFn(454);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant3(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action454::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant48(___nt), ___end));
(5, 72)
}
fn ___reduce131<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType* =  => ActionFn(138);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action138::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant49(___nt), ___end));
(0, 73)
}
fn ___reduce132<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType* = AssociatedType+ => ActionFn(139);
let ___sym0 = ___pop_Variant49(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action139::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant49(___nt), ___end));
(1, 73)
}
fn ___reduce133<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType+ = AssociatedType => ActionFn(271);
let ___sym0 = ___pop_Variant48(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action271::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant49(___nt), ___end));
(1, 74)
}
fn ___reduce134<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AssociatedType+ = AssociatedType+, AssociatedType => ActionFn(272);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant48(___symbols);
let ___sym0 = ___pop_Variant49(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action272::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant49(___nt), ___end));
(2, 74)
}
fn ___reduce135<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Attribute = "#", "[", AttributeInner, "]" => ActionFn(34);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant12(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action34::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant12(___nt), ___end));
(4, 75)
}
fn ___reduce136<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Attribute* =  => ActionFn(197);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action197::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(0, 76)
}
fn ___reduce137<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Attribute* = Attribute+ => ActionFn(198);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action198::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(1, 76)
}
fn ___reduce138<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Attribute+ = Attribute => ActionFn(207);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action207::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(1, 77)
}
fn ___reduce139<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Attribute+ = Attribute+, Attribute => ActionFn(208);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant12(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action208::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant13(___nt), ___end));
(2, 77)
}
fn ___reduce140<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AttributeArg = "(", Comma<AttributeInner>, ")" => ActionFn(36);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant53(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action36::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant50(___nt), ___end));
(3, 78)
}
fn ___reduce141<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AttributeArg = "=", "StringLiteral" => ActionFn(37);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant1(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action37::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant50(___nt), ___end));
(2, 78)
}
fn ___reduce142<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AttributeArg? = AttributeArg => ActionFn(168);
let ___sym0 = ___pop_Variant50(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action168::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant51(___nt), ___end));
(1, 79)
}
fn ___reduce143<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AttributeArg? =  => ActionFn(169);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action169::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant51(___nt), ___end));
(0, 79)
}
fn ___reduce144<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AttributeInner = Id, AttributeArg => ActionFn(507);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant50(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action507::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant12(___nt), ___end));
(2, 80)
}
fn ___reduce145<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AttributeInner = Id => ActionFn(508);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action508::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant12(___nt), ___end));
(1, 80)
}
fn ___reduce146<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AttributeInner? = AttributeInner => ActionFn(244);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action244::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant52(___nt), ___end));
(1, 81)
}
fn ___reduce147<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// AttributeInner? =  => ActionFn(245);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action245::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant52(___nt), ___end));
(0, 81)
}
fn ___reduce148<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Alternative> = Alternative => ActionFn(481);
let ___sym0 = ___pop_Variant10(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action481::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(1, 82)
}
fn ___reduce149<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Alternative> =  => ActionFn(482);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action482::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(0, 82)
}
fn ___reduce150<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Alternative> = (<Alternative> ",")+, Alternative => ActionFn(483);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant10(___symbols);
let ___sym0 = ___pop_Variant11(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action483::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(2, 82)
}
fn ___reduce151<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Alternative> = (<Alternative> ",")+ => ActionFn(484);
let ___sym0 = ___pop_Variant11(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action484::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant47(___nt), ___end));
(1, 82)
}
fn ___reduce152<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<AttributeInner> = AttributeInner => ActionFn(509);
let ___sym0 = ___pop_Variant12(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action509::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant53(___nt), ___end));
(1, 83)
}
fn ___reduce153<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<AttributeInner> =  => ActionFn(510);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action510::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant53(___nt), ___end));
(0, 83)
}
fn ___reduce154<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<AttributeInner> = (<AttributeInner> ",")+, AttributeInner => ActionFn(511);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant12(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action511::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant53(___nt), ___end));
(2, 83)
}
fn ___reduce155<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<AttributeInner> = (<AttributeInner> ",")+ => ActionFn(512);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action512::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant53(___nt), ___end));
(1, 83)
}
fn ___reduce156<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Conversion> = Conversion => ActionFn(513);
let ___sym0 = ___pop_Variant14(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action513::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant54(___nt), ___end));
(1, 84)
}
fn ___reduce157<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Conversion> =  => ActionFn(514);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action514::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant54(___nt), ___end));
(0, 84)
}
fn ___reduce158<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Conversion> = (<Conversion> ",")+, Conversion => ActionFn(515);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant14(___symbols);
let ___sym0 = ___pop_Variant15(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action515::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant54(___nt), ___end));
(2, 84)
}
fn ___reduce159<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Conversion> = (<Conversion> ",")+ => ActionFn(516);
let ___sym0 = ___pop_Variant15(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action516::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant54(___nt), ___end));
(1, 84)
}
fn ___reduce160<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarParameter> = GrammarParameter => ActionFn(539);
let ___sym0 = ___pop_Variant18(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action539::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(1, 85)
}
fn ___reduce161<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarParameter> =  => ActionFn(540);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action540::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(0, 85)
}
fn ___reduce162<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarParameter> = (<GrammarParameter> ",")+, GrammarParameter => ActionFn(541);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant18(___symbols);
let ___sym0 = ___pop_Variant19(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action541::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(2, 85)
}
fn ___reduce163<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarParameter> = (<GrammarParameter> ",")+ => ActionFn(542);
let ___sym0 = ___pop_Variant19(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action542::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(1, 85)
}
fn ___reduce164<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarWhereClause> = GrammarWhereClause => ActionFn(567);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action567::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(1, 86)
}
fn ___reduce165<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarWhereClause> =  => ActionFn(568);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action568::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(0, 86)
}
fn ___reduce166<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarWhereClause> = (<GrammarWhereClause> ",")+, GrammarWhereClause => ActionFn(569);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant20(___symbols);
let ___sym0 = ___pop_Variant21(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action569::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(2, 86)
}
fn ___reduce167<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<GrammarWhereClause> = (<GrammarWhereClause> ",")+ => ActionFn(570);
let ___sym0 = ___pop_Variant21(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action570::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(1, 86)
}
fn ___reduce168<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<MatchItem> = MatchItem => ActionFn(611);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action611::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(1, 87)
}
fn ___reduce169<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<MatchItem> =  => ActionFn(612);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action612::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(0, 87)
}
fn ___reduce170<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<MatchItem> = (<MatchItem> ",")+, MatchItem => ActionFn(613);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant26(___symbols);
let ___sym0 = ___pop_Variant27(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action613::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(2, 87)
}
fn ___reduce171<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<MatchItem> = (<MatchItem> ",")+ => ActionFn(614);
let ___sym0 = ___pop_Variant27(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action614::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant57(___nt), ___end));
(1, 87)
}
fn ___reduce172<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<NotMacroId> = NotMacroId => ActionFn(615);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action615::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(1, 88)
}
fn ___reduce173<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<NotMacroId> =  => ActionFn(616);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action616::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(0, 88)
}
fn ___reduce174<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<NotMacroId> = (<NotMacroId> ",")+, NotMacroId => ActionFn(617);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant28(___symbols);
let ___sym0 = ___pop_Variant29(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action617::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(2, 88)
}
fn ___reduce175<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<NotMacroId> = (<NotMacroId> ",")+ => ActionFn(618);
let ___sym0 = ___pop_Variant29(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action618::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant58(___nt), ___end));
(1, 88)
}
fn ___reduce176<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Pattern> = Pattern => ActionFn(619);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action619::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant59(___nt), ___end));
(1, 89)
}
fn ___reduce177<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Pattern> =  => ActionFn(620);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action620::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant59(___nt), ___end));
(0, 89)
}
fn ___reduce178<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Pattern> = (<Pattern> ",")+, Pattern => ActionFn(621);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant30(___symbols);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action621::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant59(___nt), ___end));
(2, 89)
}
fn ___reduce179<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Pattern> = (<Pattern> ",")+ => ActionFn(622);
let ___sym0 = ___pop_Variant31(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action622::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant59(___nt), ___end));
(1, 89)
}
fn ___reduce180<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Symbol> = Symbol => ActionFn(689);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action689::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant60(___nt), ___end));
(1, 90)
}
fn ___reduce181<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Symbol> =  => ActionFn(690);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action690::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant60(___nt), ___end));
(0, 90)
}
fn ___reduce182<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Symbol> = (<Symbol> ",")+, Symbol => ActionFn(691);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant32(___symbols);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action691::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant60(___nt), ___end));
(2, 90)
}
fn ___reduce183<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Symbol> = (<Symbol> ",")+ => ActionFn(692);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action692::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant60(___nt), ___end));
(1, 90)
}
fn ___reduce184<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeBoundParameter> = TypeBoundParameter => ActionFn(697);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action697::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(1, 91)
}
fn ___reduce185<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeBoundParameter> =  => ActionFn(698);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action698::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(0, 91)
}
fn ___reduce186<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeBoundParameter> = (<TypeBoundParameter> ",")+, TypeBoundParameter => ActionFn(699);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant38(___symbols);
let ___sym0 = ___pop_Variant39(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action699::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(2, 91)
}
fn ___reduce187<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeBoundParameter> = (<TypeBoundParameter> ",")+ => ActionFn(700);
let ___sym0 = ___pop_Variant39(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action700::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant5(___nt), ___end));
(1, 91)
}
fn ___reduce188<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeParameter> = TypeParameter => ActionFn(701);
let ___sym0 = ___pop_Variant40(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action701::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant61(___nt), ___end));
(1, 92)
}
fn ___reduce189<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeParameter> =  => ActionFn(702);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action702::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant61(___nt), ___end));
(0, 92)
}
fn ___reduce190<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeParameter> = (<TypeParameter> ",")+, TypeParameter => ActionFn(703);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant40(___symbols);
let ___sym0 = ___pop_Variant41(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action703::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant61(___nt), ___end));
(2, 92)
}
fn ___reduce191<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeParameter> = (<TypeParameter> ",")+ => ActionFn(704);
let ___sym0 = ___pop_Variant41(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action704::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant61(___nt), ___end));
(1, 92)
}
fn ___reduce192<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRef> = TypeRef => ActionFn(705);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action705::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(1, 93)
}
fn ___reduce193<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRef> =  => ActionFn(706);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action706::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(0, 93)
}
fn ___reduce194<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRef> = (<TypeRef> ",")+, TypeRef => ActionFn(707);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant42(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action707::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(2, 93)
}
fn ___reduce195<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRef> = (<TypeRef> ",")+ => ActionFn(708);
let ___sym0 = ___pop_Variant42(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action708::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(1, 93)
}
fn ___reduce196<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRefOrLifetime> = TypeRefOrLifetime => ActionFn(709);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action709::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(1, 94)
}
fn ___reduce197<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRefOrLifetime> =  => ActionFn(710);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action710::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(0, 94)
}
fn ___reduce198<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRefOrLifetime> = (<TypeRefOrLifetime> ",")+, TypeRefOrLifetime => ActionFn(711);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant42(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action711::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(2, 94)
}
fn ___reduce199<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<TypeRefOrLifetime> = (<TypeRefOrLifetime> ",")+ => ActionFn(712);
let ___sym0 = ___pop_Variant42(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action712::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant62(___nt), ___end));
(1, 94)
}
fn ___reduce200<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Cond = NotMacroId, CondOp, StringLiteral => ActionFn(456);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant22(___symbols);
let ___sym1 = ___pop_Variant63(___symbols);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action456::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant7(___nt), ___end));
(3, 95)
}
fn ___reduce201<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// CondOp = "==" => ActionFn(50);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action50::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 96)
}
fn ___reduce202<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// CondOp = "!=" => ActionFn(51);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action51::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 96)
}
fn ___reduce203<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// CondOp = "~~" => ActionFn(52);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action52::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 96)
}
fn ___reduce204<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// CondOp = "!~" => ActionFn(53);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action53::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant63(___nt), ___end));
(1, 96)
}
fn ___reduce207<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Conversion? = Conversion => ActionFn(278);
let ___sym0 = ___pop_Variant14(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action278::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant64(___nt), ___end));
(1, 98)
}
fn ___reduce208<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Conversion? =  => ActionFn(279);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action279::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant64(___nt), ___end));
(0, 98)
}
fn ___reduce209<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// EnumToken = "enum", TypeRef, "{", Comma<Conversion>, "}" => ActionFn(458);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant54(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action458::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant65(___nt), ___end));
(5, 99)
}
fn ___reduce210<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Escape = "Escape" => ActionFn(119);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action119::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant22(___nt), ___end));
(1, 100)
}
fn ___reduce211<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExprSymbol =  => ActionFn(687);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action687::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(0, 101)
}
fn ___reduce212<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExprSymbol = Symbol+ => ActionFn(688);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action688::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant66(___nt), ___end));
(1, 101)
}
fn ___reduce213<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", EnumToken, "}" => ActionFn(485);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant65(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action485::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(4, 102)
}
fn ___reduce214<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", EnumToken, AssociatedType+, "}" => ActionFn(486);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant49(___symbols);
let ___sym2 = ___pop_Variant65(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action486::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(5, 102)
}
fn ___reduce215<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", AssociatedType+, EnumToken, "}" => ActionFn(487);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant65(___symbols);
let ___sym2 = ___pop_Variant49(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action487::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(5, 102)
}
fn ___reduce216<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", AssociatedType+, EnumToken, AssociatedType+, "}" => ActionFn(488);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant49(___symbols);
let ___sym3 = ___pop_Variant65(___symbols);
let ___sym2 = ___pop_Variant49(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action488::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(6, 102)
}
fn ___reduce217<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", "}" => ActionFn(489);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action489::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(3, 102)
}
fn ___reduce218<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExternToken = "extern", "{", AssociatedType+, "}" => ActionFn(490);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant49(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action490::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(4, 102)
}
fn ___reduce219<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FieldPattern = Id, ":", Pattern => ActionFn(461);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant30(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action461::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant16(___nt), ___end));
(3, 103)
}
fn ___reduce220<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FieldPattern? = FieldPattern => ActionFn(130);
let ___sym0 = ___pop_Variant16(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action130::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant68(___nt), ___end));
(1, 104)
}
fn ___reduce221<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FieldPattern? =  => ActionFn(131);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action131::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant68(___nt), ___end));
(0, 104)
}
fn ___reduce222<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ForAll = "for", "<", Comma<TypeParameter>, ">" => ActionFn(13);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action13::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant61(___nt), ___end));
(4, 105)
}
fn ___reduce223<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ForAll =  => ActionFn(346);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action346::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant61(___nt), ___end));
(0, 105)
}
fn ___reduce224<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(713);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action713::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce225<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(714);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action714::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce226<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(715);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action715::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce227<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(716);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action716::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce228<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(717);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action717::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce229<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(718);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action718::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce230<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(719);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action719::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce231<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(720);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action720::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce232<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(721);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant55(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action721::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce233<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(722);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action722::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce234<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(723);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action723::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce235<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(724);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action724::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce236<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarParameters, ";" => ActionFn(725);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant55(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action725::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(3, 106)
}
fn ___reduce237<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarParameters, ";" => ActionFn(726);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action726::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce238<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarParameters, ";" => ActionFn(727);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action727::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce239<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarParameters, ";" => ActionFn(728);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action728::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce240<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(729);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action729::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce241<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(730);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action730::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce242<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(731);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action731::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce243<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(732);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action732::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce244<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, ";" => ActionFn(733);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action733::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(3, 106)
}
fn ___reduce245<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, ";" => ActionFn(734);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action734::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce246<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, ";" => ActionFn(735);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action735::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce247<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, ";" => ActionFn(736);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action736::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce248<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarWhereClauses, ";" => ActionFn(737);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant56(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action737::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(3, 106)
}
fn ___reduce249<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarWhereClauses, ";" => ActionFn(738);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action738::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce250<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarWhereClauses, ";" => ActionFn(739);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action739::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce251<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarWhereClauses, ";" => ActionFn(740);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action740::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce252<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", ";" => ActionFn(741);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action741::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(2, 106)
}
fn ___reduce253<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", ";" => ActionFn(742);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action742::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(3, 106)
}
fn ___reduce254<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", ";" => ActionFn(743);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action743::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(3, 106)
}
fn ___reduce255<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", ";" => ActionFn(744);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action744::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce256<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(745);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action745::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce257<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(746);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action746::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce258<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(747);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action747::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce259<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(748);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant70(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action748::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(8, 106)
}
fn ___reduce260<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(749);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action749::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce261<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(750);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action750::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce262<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(751);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action751::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce263<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(752);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action752::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce264<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(753);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant55(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action753::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce265<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(754);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action754::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce266<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(755);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action755::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce267<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(756);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action756::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce268<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(757);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant70(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant55(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action757::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce269<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(758);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action758::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce270<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(759);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action759::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce271<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(760);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action760::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce272<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(761);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action761::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce273<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(762);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action762::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce274<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(763);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action763::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce275<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(764);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action764::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce276<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(765);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant70(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action765::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce277<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(766);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action766::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce278<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(767);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action767::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce279<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(768);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action768::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce280<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(769);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant70(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant56(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action769::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce281<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(770);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action770::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce282<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(771);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action771::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce283<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(772);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action772::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce284<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = "grammar", ";", GrammarItem+ => ActionFn(773);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant70(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action773::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(3, 106)
}
fn ___reduce285<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, "grammar", ";", GrammarItem+ => ActionFn(774);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant70(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action774::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce286<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, "grammar", ";", GrammarItem+ => ActionFn(775);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant70(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action775::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce287<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, "grammar", ";", GrammarItem+ => ActionFn(776);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action776::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce288<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(777);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action777::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce289<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(778);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action778::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce290<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(779);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action779::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce291<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";" => ActionFn(780);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant56(___symbols);
let ___sym5 = ___pop_Variant55(___symbols);
let ___sym4 = ___pop_Variant61(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action780::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(8, 106)
}
fn ___reduce292<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(781);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action781::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce293<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(782);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action782::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce294<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(783);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action783::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce295<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";" => ActionFn(784);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant55(___symbols);
let ___sym4 = ___pop_Variant61(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action784::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce296<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(785);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action785::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce297<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(786);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action786::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce298<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(787);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action787::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce299<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";" => ActionFn(788);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action788::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce300<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarParameters, ";" => ActionFn(789);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action789::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce301<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarParameters, ";" => ActionFn(790);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action790::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce302<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarParameters, ";" => ActionFn(791);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action791::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce303<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarParameters, ";" => ActionFn(792);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action792::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce304<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(793);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action793::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce305<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(794);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action794::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce306<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(795);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action795::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce307<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";" => ActionFn(796);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant61(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action796::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce308<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarTypeParameters, ";" => ActionFn(797);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action797::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce309<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarTypeParameters, ";" => ActionFn(798);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action798::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce310<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarTypeParameters, ";" => ActionFn(799);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action799::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce311<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarTypeParameters, ";" => ActionFn(800);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant61(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action800::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce312<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarWhereClauses, ";" => ActionFn(801);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action801::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce313<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarWhereClauses, ";" => ActionFn(802);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action802::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce314<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarWhereClauses, ";" => ActionFn(803);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action803::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce315<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarWhereClauses, ";" => ActionFn(804);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action804::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce316<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", ";" => ActionFn(805);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action805::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(3, 106)
}
fn ___reduce317<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", ";" => ActionFn(806);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action806::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce318<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", ";" => ActionFn(807);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action807::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce319<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", ";" => ActionFn(808);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action808::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce320<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(809);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action809::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce321<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(810);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant70(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action810::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(8, 106)
}
fn ___reduce322<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(811);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant70(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action811::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(8, 106)
}
fn ___reduce323<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(812);
assert!(___symbols.len() >= 9);
let ___sym8 = ___pop_Variant70(___symbols);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant56(___symbols);
let ___sym5 = ___pop_Variant55(___symbols);
let ___sym4 = ___pop_Variant61(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym8.2.clone();
let ___nt = super::___action812::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(9, 106)
}
fn ___reduce324<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(813);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action813::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce325<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(814);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action814::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce326<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(815);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action815::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce327<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarParameters, ";", GrammarItem+ => ActionFn(816);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant70(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant55(___symbols);
let ___sym4 = ___pop_Variant61(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action816::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(8, 106)
}
fn ___reduce328<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(817);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action817::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce329<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(818);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action818::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce330<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(819);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action819::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce331<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(820);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant70(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action820::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(8, 106)
}
fn ___reduce332<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(821);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant55(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action821::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce333<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(822);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action822::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce334<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(823);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant55(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action823::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce335<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarParameters, ";", GrammarItem+ => ActionFn(824);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant55(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action824::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce336<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(825);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action825::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce337<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(826);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action826::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce338<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(827);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action827::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce339<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarTypeParameters, GrammarWhereClauses, ";", GrammarItem+ => ActionFn(828);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant70(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant56(___symbols);
let ___sym4 = ___pop_Variant61(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action828::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(8, 106)
}
fn ___reduce340<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(829);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action829::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce341<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(830);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action830::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce342<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(831);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action831::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce343<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarTypeParameters, ";", GrammarItem+ => ActionFn(832);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant61(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action832::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce344<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(833);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant56(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action833::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce345<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(834);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action834::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce346<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(835);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant56(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action835::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce347<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", GrammarWhereClauses, ";", GrammarItem+ => ActionFn(836);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant70(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant56(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action836::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(7, 106)
}
fn ___reduce348<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Attribute+, "grammar", ";", GrammarItem+ => ActionFn(837);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant70(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action837::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(4, 106)
}
fn ___reduce349<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = Use+, Attribute+, "grammar", ";", GrammarItem+ => ActionFn(838);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action838::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce350<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Attribute+, "grammar", ";", GrammarItem+ => ActionFn(839);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant70(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant13(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action839::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(5, 106)
}
fn ___reduce351<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Grammar = ShebangAttribute+, Use+, Attribute+, "grammar", ";", GrammarItem+ => ActionFn(840);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant70(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant13(___symbols);
let ___sym1 = ___pop_Variant70(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action840::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant69(___nt), ___end));
(6, 106)
}
fn ___reduce352<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem = Use => ActionFn(24);
let ___sym0 = ___pop_Variant67(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action24::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(1, 107)
}
fn ___reduce353<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem = MatchToken => ActionFn(25);
let ___sym0 = ___pop_Variant67(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action25::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(1, 107)
}
fn ___reduce354<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem = ExternToken => ActionFn(26);
let ___sym0 = ___pop_Variant67(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action26::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(1, 107)
}
fn ___reduce355<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem = Nonterminal => ActionFn(27);
let ___sym0 = ___pop_Variant67(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action27::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(1, 107)
}
fn ___reduce356<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem* =  => ActionFn(187);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action187::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(0, 108)
}
fn ___reduce357<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem* = GrammarItem+ => ActionFn(188);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action188::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(1, 108)
}
fn ___reduce358<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem+ = GrammarItem => ActionFn(209);
let ___sym0 = ___pop_Variant67(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action209::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(1, 109)
}
fn ___reduce359<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarItem+ = GrammarItem+, GrammarItem => ActionFn(210);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant67(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action210::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(2, 109)
}
fn ___reduce360<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameter = Id, ":", TypeRef => ActionFn(23);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant3(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action23::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant18(___nt), ___end));
(3, 110)
}
fn ___reduce361<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameter? = GrammarParameter => ActionFn(239);
let ___sym0 = ___pop_Variant18(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action239::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant71(___nt), ___end));
(1, 111)
}
fn ___reduce362<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameter? =  => ActionFn(240);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action240::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant71(___nt), ___end));
(0, 111)
}
fn ___reduce363<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameters = "(", Comma<GrammarParameter>, ")" => ActionFn(22);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant55(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action22::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant55(___nt), ___end));
(3, 112)
}
fn ___reduce364<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameters? = GrammarParameters => ActionFn(191);
let ___sym0 = ___pop_Variant55(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action191::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant72(___nt), ___end));
(1, 113)
}
fn ___reduce365<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarParameters? =  => ActionFn(192);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action192::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant72(___nt), ___end));
(0, 113)
}
fn ___reduce366<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarTypeParameters = "<", Comma<TypeParameter>, ">" => ActionFn(7);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant61(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action7::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant61(___nt), ___end));
(3, 114)
}
fn ___reduce367<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarTypeParameters? = GrammarTypeParameters => ActionFn(193);
let ___sym0 = ___pop_Variant61(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action193::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant73(___nt), ___end));
(1, 115)
}
fn ___reduce368<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarTypeParameters? =  => ActionFn(194);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action194::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant73(___nt), ___end));
(0, 115)
}
fn ___reduce369<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause = Lifetime, ":", Plus<Lifetime> => ActionFn(11);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant87(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action11::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(3, 116)
}
fn ___reduce370<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause = "for", "<", Comma<TypeParameter>, ">", TypeRef, ":", TypeBounds => ActionFn(521);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant88(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant3(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action521::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(7, 116)
}
fn ___reduce371<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause = TypeRef, ":", TypeBounds => ActionFn(522);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant88(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action522::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant20(___nt), ___end));
(3, 116)
}
fn ___reduce372<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause? = GrammarWhereClause => ActionFn(216);
let ___sym0 = ___pop_Variant20(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action216::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant74(___nt), ___end));
(1, 117)
}
fn ___reduce373<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClause? =  => ActionFn(217);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action217::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant74(___nt), ___end));
(0, 117)
}
fn ___reduce374<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClauses = "where", Comma<GrammarWhereClause> => ActionFn(10);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant56(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action10::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant56(___nt), ___end));
(2, 118)
}
fn ___reduce375<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClauses? = GrammarWhereClauses => ActionFn(189);
let ___sym0 = ___pop_Variant56(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action189::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant75(___nt), ___end));
(1, 119)
}
fn ___reduce376<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// GrammarWhereClauses? =  => ActionFn(190);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action190::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant75(___nt), ___end));
(0, 119)
}
fn ___reduce377<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Id = "Id" => ActionFn(117);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action117::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant22(___nt), ___end));
(1, 120)
}
fn ___reduce378<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Id = "MacroId" => ActionFn(118);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action118::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant22(___nt), ___end));
(1, 120)
}
fn ___reduce379<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lifetime = "Lifetime" => ActionFn(120);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action120::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant24(___nt), ___end));
(1, 121)
}
fn ___reduce380<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lifetime? = Lifetime => ActionFn(146);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action146::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant76(___nt), ___end));
(1, 122)
}
fn ___reduce381<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lifetime? =  => ActionFn(147);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action147::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant76(___nt), ___end));
(0, 122)
}
fn ___reduce382<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MacroId = "MacroId" => ActionFn(115);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action115::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant28(___nt), ___end));
(1, 123)
}
fn ___reduce383<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchContents = Comma<MatchItem> => ActionFn(93);
let ___sym0 = ___pop_Variant57(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action93::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant77(___nt), ___end));
(1, 124)
}
fn ___reduce384<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchItem = "_" => ActionFn(463);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action463::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant26(___nt), ___end));
(1, 125)
}
fn ___reduce385<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchItem = MatchSymbol => ActionFn(464);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action464::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant26(___nt), ___end));
(1, 125)
}
fn ___reduce387<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchItem? = MatchItem => ActionFn(273);
let ___sym0 = ___pop_Variant26(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action273::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant78(___nt), ___end));
(1, 126)
}
fn ___reduce388<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchItem? =  => ActionFn(274);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action274::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant78(___nt), ___end));
(0, 126)
}
fn ___reduce389<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchMapping = Terminal => ActionFn(98);
let ___sym0 = ___pop_Variant89(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action98::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant79(___nt), ___end));
(1, 127)
}
fn ___reduce390<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchMapping = "{", "}" => ActionFn(99);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action99::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant79(___nt), ___end));
(2, 127)
}
fn ___reduce391<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchSymbol = QuotedLiteral => ActionFn(97);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action97::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant80(___nt), ___end));
(1, 128)
}
fn ___reduce392<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchToken = MatchTokenInt => ActionFn(90);
let ___sym0 = ___pop_Variant81(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action90::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(1, 129)
}
fn ___reduce393<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchTokenInt = MatchTokenInt, "else", "{", MatchContents, "}" => ActionFn(91);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant77(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant81(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action91::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant81(___nt), ___end));
(5, 130)
}
fn ___reduce394<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MatchTokenInt = "match", "{", MatchContents, "}" => ActionFn(466);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant77(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action466::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant81(___nt), ___end));
(4, 130)
}
fn ___reduce395<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Nonterminal = Visibility, NonterminalName, ":", TypeRef, "=", Alternatives => ActionFn(503);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant47(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant3(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant82(___symbols);
let ___sym0 = ___pop_Variant100(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action503::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(6, 131)
}
fn ___reduce396<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Nonterminal = Attribute+, Visibility, NonterminalName, ":", TypeRef, "=", Alternatives => ActionFn(504);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant47(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant3(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant82(___symbols);
let ___sym1 = ___pop_Variant100(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action504::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(7, 131)
}
fn ___reduce397<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Nonterminal = Visibility, NonterminalName, "=", Alternatives => ActionFn(505);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant47(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant82(___symbols);
let ___sym0 = ___pop_Variant100(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action505::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(4, 131)
}
fn ___reduce398<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Nonterminal = Attribute+, Visibility, NonterminalName, "=", Alternatives => ActionFn(506);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant47(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant82(___symbols);
let ___sym1 = ___pop_Variant100(___symbols);
let ___sym0 = ___pop_Variant13(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action506::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(5, 131)
}
fn ___reduce399<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NonterminalName = MacroId, "<", Comma<NotMacroId>, ">" => ActionFn(38);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant58(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action38::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(4, 132)
}
fn ___reduce400<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NonterminalName = NotMacroId => ActionFn(39);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action39::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(1, 132)
}
fn ___reduce401<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NonterminalName = "Escape" => ActionFn(40);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action40::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant82(___nt), ___end));
(1, 132)
}
fn ___reduce402<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NotMacroId = "Id" => ActionFn(116);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action116::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant28(___nt), ___end));
(1, 133)
}
fn ___reduce403<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NotMacroId? = NotMacroId => ActionFn(249);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action249::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant83(___nt), ___end));
(1, 134)
}
fn ___reduce404<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// NotMacroId? =  => ActionFn(250);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action250::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant83(___nt), ___end));
(0, 134)
}
fn ___reduce405<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = "::", Id => ActionFn(376);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action376::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(2, 135)
}
fn ___reduce406<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = "::", (<Id> "::")+, Id => ActionFn(377);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant22(___symbols);
let ___sym1 = ___pop_Variant23(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action377::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(3, 135)
}
fn ___reduce407<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = Id => ActionFn(378);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action378::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(1, 135)
}
fn ___reduce408<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = (<Id> "::")+, Id => ActionFn(379);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant23(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action379::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant84(___nt), ___end));
(2, 135)
}
fn ___reduce409<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Pattern = PatternKind => ActionFn(469);
let ___sym0 = ___pop_Variant86(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action469::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant30(___nt), ___end));
(1, 136)
}
fn ___reduce410<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Pattern? = Pattern => ActionFn(283);
let ___sym0 = ___pop_Variant30(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action283::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant85(___nt), ___end));
(1, 137)
}
fn ___reduce411<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Pattern? =  => ActionFn(284);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action284::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant85(___nt), ___end));
(0, 137)
}
fn ___reduce412<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "(", Comma<Pattern>, ")" => ActionFn(104);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant59(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action104::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(4, 138)
}
fn ___reduce413<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", FieldPattern, "}" => ActionFn(517);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant16(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action517::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(4, 138)
}
fn ___reduce414<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", "}" => ActionFn(518);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action518::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(3, 138)
}
fn ___reduce415<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", (<FieldPattern> ",")+, FieldPattern, "}" => ActionFn(519);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant16(___symbols);
let ___sym2 = ___pop_Variant17(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action519::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(5, 138)
}
fn ___reduce416<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", (<FieldPattern> ",")+, "}" => ActionFn(520);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant17(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action520::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(4, 138)
}
fn ___reduce417<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", "..", "}" => ActionFn(364);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action364::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(4, 138)
}
fn ___reduce418<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path, "{", (<FieldPattern> ",")+, "..", "}" => ActionFn(365);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant17(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action365::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(5, 138)
}
fn ___reduce419<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = "_" => ActionFn(107);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action107::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(1, 138)
}
fn ___reduce420<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = ".." => ActionFn(108);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action108::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(1, 138)
}
fn ___reduce421<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = "<", TypeRef, ">" => ActionFn(109);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action109::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(3, 138)
}
fn ___reduce422<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = "(", Comma<Pattern>, ")" => ActionFn(110);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant59(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action110::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(3, 138)
}
fn ___reduce423<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = "CharLiteral" => ActionFn(111);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action111::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(1, 138)
}
fn ___reduce424<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = Path => ActionFn(112);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action112::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(1, 138)
}
fn ___reduce425<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// PatternKind = StringConstant => ActionFn(113);
let ___sym0 = ___pop_Variant91(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action113::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant86(___nt), ___end));
(1, 138)
}
fn ___reduce426<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<Lifetime> = Lifetime => ActionFn(603);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action603::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant87(___nt), ___end));
(1, 139)
}
fn ___reduce427<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<Lifetime> =  => ActionFn(604);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action604::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant87(___nt), ___end));
(0, 139)
}
fn ___reduce428<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<Lifetime> = (<Lifetime> "+")+, Lifetime => ActionFn(605);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant24(___symbols);
let ___sym0 = ___pop_Variant25(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action605::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant87(___nt), ___end));
(2, 139)
}
fn ___reduce429<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<Lifetime> = (<Lifetime> "+")+ => ActionFn(606);
let ___sym0 = ___pop_Variant25(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action606::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant87(___nt), ___end));
(1, 139)
}
fn ___reduce430<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<TypeBound> = TypeBound => ActionFn(693);
let ___sym0 = ___pop_Variant36(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action693::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(1, 140)
}
fn ___reduce431<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<TypeBound> =  => ActionFn(694);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action694::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(0, 140)
}
fn ___reduce432<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<TypeBound> = (<TypeBound> "+")+, TypeBound => ActionFn(695);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant36(___symbols);
let ___sym0 = ___pop_Variant37(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action695::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(2, 140)
}
fn ___reduce433<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Plus<TypeBound> = (<TypeBound> "+")+ => ActionFn(696);
let ___sym0 = ___pop_Variant37(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action696::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(1, 140)
}
fn ___reduce434<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// QuotedLiteral = StringLiteral => ActionFn(124);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action124::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant80(___nt), ___end));
(1, 141)
}
fn ___reduce435<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// QuotedLiteral = RegexLiteral => ActionFn(125);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action125::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant80(___nt), ___end));
(1, 141)
}
fn ___reduce436<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// QuotedTerminal = QuotedLiteral => ActionFn(123);
let ___sym0 = ___pop_Variant80(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action123::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant89(___nt), ___end));
(1, 142)
}
fn ___reduce437<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// RegexLiteral = "RegexLiteral" => ActionFn(128);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action128::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant22(___nt), ___end));
(1, 143)
}
fn ___reduce438<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// RepeatOp = "+" => ActionFn(60);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action60::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 144)
}
fn ___reduce439<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// RepeatOp = "*" => ActionFn(61);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action61::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 144)
}
fn ___reduce440<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// RepeatOp = "?" => ActionFn(62);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action62::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant90(___nt), ___end));
(1, 144)
}
fn ___reduce441<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute = "#![...]" => ActionFn(129);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action129::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant91(___nt), ___end));
(1, 145)
}
fn ___reduce442<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute* =  => ActionFn(201);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action201::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant92(___nt), ___end));
(0, 146)
}
fn ___reduce443<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute* = ShebangAttribute+ => ActionFn(202);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action202::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant92(___nt), ___end));
(1, 146)
}
fn ___reduce444<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute+ = ShebangAttribute => ActionFn(203);
let ___sym0 = ___pop_Variant91(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action203::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant92(___nt), ___end));
(1, 147)
}
fn ___reduce445<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ShebangAttribute+ = ShebangAttribute+, ShebangAttribute => ActionFn(204);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant91(___symbols);
let ___sym0 = ___pop_Variant92(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action204::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant92(___nt), ___end));
(2, 147)
}
fn ___reduce448<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol = "<", "mut", Id, ":", Symbol0, ">" => ActionFn(470);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant32(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant22(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action470::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(6, 150)
}
fn ___reduce449<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol = "<", Id, ":", Symbol0, ">" => ActionFn(471);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant32(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action471::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(5, 150)
}
fn ___reduce450<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol = "<", Symbol0, ">" => ActionFn(472);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant32(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action472::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(3, 150)
}
fn ___reduce451<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol = Symbol0 => ActionFn(57);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action57::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(1, 150)
}
fn ___reduce452<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol* =  => ActionFn(154);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action154::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(0, 151)
}
fn ___reduce453<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol* = Symbol+ => ActionFn(155);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action155::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(1, 151)
}
fn ___reduce454<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol+ = Symbol => ActionFn(161);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action161::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(1, 152)
}
fn ___reduce455<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol+ = Symbol+, Symbol => ActionFn(162);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant32(___symbols);
let ___sym0 = ___pop_Variant33(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action162::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant33(___nt), ___end));
(2, 152)
}
fn ___reduce456<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol0 = Symbol1 => ActionFn(58);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action58::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(1, 153)
}
fn ___reduce457<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol0 = Symbol0, RepeatOp => ActionFn(473);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant90(___symbols);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action473::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(2, 153)
}
fn ___reduce458<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol1 = SymbolKind1 => ActionFn(474);
let ___sym0 = ___pop_Variant94(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action474::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(1, 154)
}
fn ___reduce459<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol1 = "<", Tuples, ":", Symbol0, ">" => ActionFn(475);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant32(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant96(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action475::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant32(___nt), ___end));
(5, 154)
}
fn ___reduce460<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol? = Symbol => ActionFn(259);
let ___sym0 = ___pop_Variant32(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action259::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant93(___nt), ___end));
(1, 155)
}
fn ___reduce461<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Symbol? =  => ActionFn(260);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action260::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant93(___nt), ___end));
(0, 155)
}
fn ___reduce462<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = MacroId, "<", Comma<Symbol>, ">" => ActionFn(65);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant60(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant28(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action65::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(4, 156)
}
fn ___reduce463<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = QuotedTerminal => ActionFn(66);
let ___sym0 = ___pop_Variant89(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action66::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(1, 156)
}
fn ___reduce464<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "Id" => ActionFn(67);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action67::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(1, 156)
}
fn ___reduce465<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = Escape => ActionFn(68);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action68::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(1, 156)
}
fn ___reduce466<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "(", ExprSymbol, ")" => ActionFn(69);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant66(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action69::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(3, 156)
}
fn ___reduce467<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "@L" => ActionFn(70);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action70::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(1, 156)
}
fn ___reduce468<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "@R" => ActionFn(71);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action71::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(1, 156)
}
fn ___reduce469<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// SymbolKind1 = "!" => ActionFn(72);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action72::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant94(___nt), ___end));
(1, 156)
}
fn ___reduce470<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Terminal = QuotedTerminal => ActionFn(121);
let ___sym0 = ___pop_Variant89(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action121::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant89(___nt), ___end));
(1, 157)
}
fn ___reduce471<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Terminal = "Id" => ActionFn(122);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action122::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant89(___nt), ___end));
(1, 157)
}
fn ___reduce472<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartGrammar", Grammar => ActionFn(1);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant69(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action1::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(2, 158)
}
fn ___reduce473<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartPattern", Pattern => ActionFn(2);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant30(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action2::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(2, 158)
}
fn ___reduce474<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartMatchMapping", MatchMapping => ActionFn(3);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant79(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action3::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(2, 158)
}
fn ___reduce475<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartTypeRef", TypeRef => ActionFn(4);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action4::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(2, 158)
}
fn ___reduce476<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Top = "StartGrammarWhereClauses", GrammarWhereClauses => ActionFn(5);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant56(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action5::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant95(___nt), ___end));
(2, 158)
}
fn ___reduce477<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TupleItem = "mut", Id => ActionFn(326);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant22(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action326::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant34(___nt), ___end));
(2, 159)
}
fn ___reduce478<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TupleItem = Id => ActionFn(327);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action327::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant34(___nt), ___end));
(1, 159)
}
fn ___reduce479<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TupleItem = Tuples => ActionFn(75);
let ___sym0 = ___pop_Variant96(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action75::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant34(___nt), ___end));
(1, 159)
}
fn ___reduce480<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Tuples = "(", (<TupleItem> ",")+, TupleItem, ")" => ActionFn(476);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant34(___symbols);
let ___sym1 = ___pop_Variant35(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action476::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant96(___nt), ___end));
(4, 160)
}
fn ___reduce481<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Lifetime => ActionFn(16);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action16::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(1, 161)
}
fn ___reduce482<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = "for", "<", Comma<TypeParameter>, ">", Path, "(", Comma<TypeRef>, ")", "->", TypeRef => ActionFn(523);
assert!(___symbols.len() >= 10);
let ___sym9 = ___pop_Variant3(___symbols);
let ___sym8 = ___pop_Variant0(___symbols);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant62(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant84(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym9.2.clone();
let ___nt = super::___action523::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8, ___sym9);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(10, 161)
}
fn ___reduce483<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Path, "(", Comma<TypeRef>, ")", "->", TypeRef => ActionFn(524);
assert!(___symbols.len() >= 6);
let ___sym5 = ___pop_Variant3(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant62(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym5.2.clone();
let ___nt = super::___action524::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(6, 161)
}
fn ___reduce484<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = "for", "<", Comma<TypeParameter>, ">", Path, "(", Comma<TypeRef>, ")" => ActionFn(525);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant62(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant84(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action525::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(8, 161)
}
fn ___reduce485<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Path, "(", Comma<TypeRef>, ")" => ActionFn(526);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant62(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action526::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(4, 161)
}
fn ___reduce486<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = "for", "<", Comma<TypeParameter>, ">", Path, "<", Comma<TypeBoundParameter>, ">" => ActionFn(527);
assert!(___symbols.len() >= 8);
let ___sym7 = ___pop_Variant0(___symbols);
let ___sym6 = ___pop_Variant5(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant84(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym7.2.clone();
let ___nt = super::___action527::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(8, 161)
}
fn ___reduce487<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Path, "<", Comma<TypeBoundParameter>, ">" => ActionFn(528);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant5(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action528::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(4, 161)
}
fn ___reduce488<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = "for", "<", Comma<TypeParameter>, ">", Path => ActionFn(529);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant84(___symbols);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant61(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action529::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(5, 161)
}
fn ___reduce489<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound = Path => ActionFn(530);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action530::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant36(___nt), ___end));
(1, 161)
}
fn ___reduce490<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound? = TypeBound => ActionFn(224);
let ___sym0 = ___pop_Variant36(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action224::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant97(___nt), ___end));
(1, 162)
}
fn ___reduce491<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBound? =  => ActionFn(225);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action225::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant97(___nt), ___end));
(0, 162)
}
fn ___reduce492<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter = Lifetime => ActionFn(19);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action19::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(1, 163)
}
fn ___reduce493<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter = TypeRef => ActionFn(20);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action20::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(1, 163)
}
fn ___reduce494<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter = Id, "=", TypeRef => ActionFn(21);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant3(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action21::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant38(___nt), ___end));
(3, 163)
}
fn ___reduce495<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter? = TypeBoundParameter => ActionFn(234);
let ___sym0 = ___pop_Variant38(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action234::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant98(___nt), ___end));
(1, 164)
}
fn ___reduce496<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBoundParameter? =  => ActionFn(235);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action235::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant98(___nt), ___end));
(0, 164)
}
fn ___reduce497<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeBounds = Plus<TypeBound> => ActionFn(15);
let ___sym0 = ___pop_Variant88(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action15::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant88(___nt), ___end));
(1, 165)
}
fn ___reduce498<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeParameter = Lifetime => ActionFn(8);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action8::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant40(___nt), ___end));
(1, 166)
}
fn ___reduce499<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeParameter = Id => ActionFn(9);
let ___sym0 = ___pop_Variant22(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action9::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant40(___nt), ___end));
(1, 166)
}
fn ___reduce500<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeParameter? = TypeParameter => ActionFn(211);
let ___sym0 = ___pop_Variant40(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action211::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant99(___nt), ___end));
(1, 167)
}
fn ___reduce501<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeParameter? =  => ActionFn(212);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action212::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant99(___nt), ___end));
(0, 167)
}
fn ___reduce502<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "(", Comma<TypeRef>, ")" => ActionFn(76);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant62(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action76::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 168)
}
fn ___reduce503<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "[", TypeRef, "]" => ActionFn(77);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action77::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 168)
}
fn ___reduce504<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "#", Symbol, "#" => ActionFn(78);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant32(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action78::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 168)
}
fn ___reduce505<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "&", Lifetime, "mut", TypeRef => ActionFn(607);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant3(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant24(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action607::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(4, 168)
}
fn ___reduce506<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "&", "mut", TypeRef => ActionFn(608);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant3(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action608::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 168)
}
fn ___reduce507<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "&", Lifetime, TypeRef => ActionFn(609);
assert!(___symbols.len() >= 3);
let ___sym2 = ___pop_Variant3(___symbols);
let ___sym1 = ___pop_Variant24(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym2.2.clone();
let ___nt = super::___action609::<>(text, ___sym0, ___sym1, ___sym2);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(3, 168)
}
fn ___reduce508<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "&", TypeRef => ActionFn(610);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant3(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action610::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 168)
}
fn ___reduce509<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = Path, "<", Comma<TypeRefOrLifetime>, ">" => ActionFn(80);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant62(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action80::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(4, 168)
}
fn ___reduce510<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = Path => ActionFn(81);
let ___sym0 = ___pop_Variant84(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action81::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(1, 168)
}
fn ___reduce511<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", Path, "<", Comma<TypeRefOrLifetime>, ">" => ActionFn(82);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant62(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant84(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action82::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(5, 168)
}
fn ___reduce512<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", Path => ActionFn(83);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant84(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action83::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(2, 168)
}
fn ___reduce513<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", "for", "<", Comma<TypeParameter>, ">", Path, "(", Comma<TypeRef>, ")", "->", TypeRef => ActionFn(531);
assert!(___symbols.len() >= 11);
let ___sym10 = ___pop_Variant3(___symbols);
let ___sym9 = ___pop_Variant0(___symbols);
let ___sym8 = ___pop_Variant0(___symbols);
let ___sym7 = ___pop_Variant62(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant84(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym10.2.clone();
let ___nt = super::___action531::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8, ___sym9, ___sym10);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(11, 168)
}
fn ___reduce514<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", Path, "(", Comma<TypeRef>, ")", "->", TypeRef => ActionFn(532);
assert!(___symbols.len() >= 7);
let ___sym6 = ___pop_Variant3(___symbols);
let ___sym5 = ___pop_Variant0(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant62(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant84(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym6.2.clone();
let ___nt = super::___action532::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(7, 168)
}
fn ___reduce515<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", "for", "<", Comma<TypeParameter>, ">", Path, "(", Comma<TypeRef>, ")" => ActionFn(533);
assert!(___symbols.len() >= 9);
let ___sym8 = ___pop_Variant0(___symbols);
let ___sym7 = ___pop_Variant62(___symbols);
let ___sym6 = ___pop_Variant0(___symbols);
let ___sym5 = ___pop_Variant84(___symbols);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant61(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym8.2.clone();
let ___nt = super::___action533::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4, ___sym5, ___sym6, ___sym7, ___sym8);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(9, 168)
}
fn ___reduce516<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef = "dyn", Path, "(", Comma<TypeRef>, ")" => ActionFn(534);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant62(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant84(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action534::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(5, 168)
}
fn ___reduce517<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef? = TypeRef => ActionFn(229);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action229::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(1, 169)
}
fn ___reduce518<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRef? =  => ActionFn(230);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action230::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(0, 169)
}
fn ___reduce519<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRefOrLifetime = TypeRef => ActionFn(85);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action85::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(1, 170)
}
fn ___reduce520<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRefOrLifetime = Lifetime => ActionFn(86);
let ___sym0 = ___pop_Variant24(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action86::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant3(___nt), ___end));
(1, 170)
}
fn ___reduce521<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRefOrLifetime? = TypeRefOrLifetime => ActionFn(264);
let ___sym0 = ___pop_Variant3(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action264::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(1, 171)
}
fn ___reduce522<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// TypeRefOrLifetime? =  => ActionFn(265);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action265::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant4(___nt), ___end));
(0, 171)
}
fn ___reduce523<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use = "use", ";" => ActionFn(28);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant1(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action28::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant67(___nt), ___end));
(2, 172)
}
fn ___reduce524<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use* =  => ActionFn(199);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action199::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(0, 173)
}
fn ___reduce525<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use* = Use+ => ActionFn(200);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action200::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(1, 173)
}
fn ___reduce526<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use+ = Use => ActionFn(205);
let ___sym0 = ___pop_Variant67(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action205::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(1, 174)
}
fn ___reduce527<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use+ = Use+, Use => ActionFn(206);
assert!(___symbols.len() >= 2);
let ___sym1 = ___pop_Variant67(___symbols);
let ___sym0 = ___pop_Variant70(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym1.2.clone();
let ___nt = super::___action206::<>(text, ___sym0, ___sym1);
___symbols.push((___start, ___Symbol::Variant70(___nt), ___end));
(2, 174)
}
fn ___reduce528<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Visibility = "pub", "(", Path, ")" => ActionFn(29);
assert!(___symbols.len() >= 4);
let ___sym3 = ___pop_Variant0(___symbols);
let ___sym2 = ___pop_Variant84(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym3.2.clone();
let ___nt = super::___action29::<>(text, ___sym0, ___sym1, ___sym2, ___sym3);
___symbols.push((___start, ___Symbol::Variant100(___nt), ___end));
(4, 175)
}
fn ___reduce529<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Visibility = "pub", "(", "in", Path, ")" => ActionFn(30);
assert!(___symbols.len() >= 5);
let ___sym4 = ___pop_Variant0(___symbols);
let ___sym3 = ___pop_Variant84(___symbols);
let ___sym2 = ___pop_Variant0(___symbols);
let ___sym1 = ___pop_Variant0(___symbols);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym4.2.clone();
let ___nt = super::___action30::<>(text, ___sym0, ___sym1, ___sym2, ___sym3, ___sym4);
___symbols.push((___start, ___Symbol::Variant100(___nt), ___end));
(5, 175)
}
fn ___reduce530<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Visibility = "pub" => ActionFn(31);
let ___sym0 = ___pop_Variant0(___symbols);
let ___start = ___sym0.0.clone();
let ___end = ___sym0.2.clone();
let ___nt = super::___action31::<>(text, ___sym0);
___symbols.push((___start, ___Symbol::Variant100(___nt), ___end));
(1, 175)
}
fn ___reduce531<
    'input,
>(
text: &'input str,
___lookahead_start: Option<&usize>,
___symbols: &mut alloc::vec::Vec<(usize,___Symbol<'input>,usize)>,
_: core::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Visibility =  => ActionFn(347);
let ___start = ___lookahead_start.cloned().or_else(|| ___symbols.last().map(|s| s.2)).unwrap_or_default();
let ___end = ___start;
let ___nt = super::___action347::<>(text, &___start, &___end);
___symbols.push((___start, ___Symbol::Variant100(___nt), ___end));
(0, 175)
}
}
#[allow(unused_imports)]
pub use self::___parse___Top::TopParser;

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action0<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Top, usize),
) -> Top
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action1<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Grammar, usize),
) -> Top
{
Top::Grammar(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action2<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Pattern<TypeRef>, usize),
) -> Top
{
Top::Pattern(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action3<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, MatchMapping, usize),
) -> Top
{
Top::MatchMapping(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action4<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
) -> Top
{
Top::TypeRef(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action5<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<WhereClause<TypeRef>>, usize),
) -> Top
{
Top::GrammarWhereClauses(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action6<
    'input,
>(
text: &'input str,
(_, module_attributes, _): (usize, alloc::vec::Vec<String>, usize),
(_, uses, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
(_, attributes, _): (usize, alloc::vec::Vec<Attribute>, usize),
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
(_, tps, _): (usize, Option<Vec<TypeParameter>>, usize),
(_, parameters, _): (usize, Option<Vec<Parameter>>, usize),
(_, where_clauses, _): (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, items, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
{
        Grammar { prefix: format!("__"), // adjusted by `parse_grammar`
                  span: Span(lo, hi),
                  type_parameters: tps.unwrap_or(vec![]),
                  parameters: parameters.unwrap_or(vec![]),
                  where_clauses: where_clauses.unwrap_or(vec![]),
                  items: uses.into_iter().chain(items).collect(),
                  attributes,
                  module_attributes }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action7<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<TypeParameter>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<TypeParameter>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action8<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Lifetime, usize),
) -> TypeParameter
{
TypeParameter::Lifetime(l)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action9<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Atom, usize),
) -> TypeParameter
{
TypeParameter::Id(l)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action10<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action11<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Lifetime, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, bounds, _): (usize, Vec<Lifetime>, usize),
) -> WhereClause<TypeRef>
{
WhereClause::Lifetime { lifetime: l, bounds }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action12<
    'input,
>(
text: &'input str,
(_, f, _): (usize, Vec<TypeParameter>, usize),
(_, ty, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, bounds, _): (usize, Vec<TypeBound<TypeRef>>, usize),
) -> WhereClause<TypeRef>
{
WhereClause::Type { forall: f, ty, bounds }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action13<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<TypeParameter>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<TypeParameter>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action14<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, (), usize),
) -> Vec<TypeParameter>
{
vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action15<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action16<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Lifetime, usize),
) -> TypeBound<TypeRef>
{
TypeBound::Lifetime(l)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action17<
    'input,
>(
text: &'input str,
(_, f, _): (usize, Vec<TypeParameter>, usize),
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, params, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ret, _): (usize, Option<TypeRef>, usize),
) -> TypeBound<TypeRef>
{
TypeBound::Fn { forall: f, path: p, parameters: params, ret }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action18<
    'input,
>(
text: &'input str,
(_, f, _): (usize, Vec<TypeParameter>, usize),
(_, p, _): (usize, Path, usize),
(_, params, _): (usize, Option<Vec<TypeBoundParameter<TypeRef>>>, usize),
) -> TypeBound<TypeRef>
{
TypeBound::Trait { forall: f, path: p, parameters: params.unwrap_or(vec![]) }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action19<
    'input,
>(
text: &'input str,
(_, l, _): (usize, Lifetime, usize),
) -> TypeBoundParameter<TypeRef>
{
TypeBoundParameter::Lifetime(l)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action20<
    'input,
>(
text: &'input str,
(_, ty, _): (usize, TypeRef, usize),
) -> TypeBoundParameter<TypeRef>
{
TypeBoundParameter::TypeParameter(ty)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action21<
    'input,
>(
text: &'input str,
(_, id, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ty, _): (usize, TypeRef, usize),
) -> TypeBoundParameter<TypeRef>
{
TypeBoundParameter::Associated(id, ty)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action22<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<Parameter>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<Parameter>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action23<
    'input,
>(
text: &'input str,
(_, id, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ty, _): (usize, TypeRef, usize),
) -> Parameter
{
Parameter { name: id, ty }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action24<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> GrammarItem
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action25<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> GrammarItem
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action26<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> GrammarItem
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action27<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> GrammarItem
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action28<
    'input,
>(
text: &'input str,
(_, u, _): (usize, &'input str, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> GrammarItem
{
GrammarItem::Use(strip(u).to_string())
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action29<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Visibility
{
Visibility::Pub(Some(p))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action30<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Visibility
{
Visibility::PubIn(p)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action31<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> Visibility
{
Visibility::Pub(None)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action32<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, (), usize),
) -> Visibility
{
Visibility::Priv
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action33<
    'input,
>(
text: &'input str,
(_, attributes, _): (usize, alloc::vec::Vec<Attribute>, usize),
(_, v, _): (usize, Visibility, usize),
(_, lo, _): (usize, usize, usize),
(_, n, _): (usize, (NonterminalString, Vec<NonterminalString>), usize),
(_, hi, _): (usize, usize, usize),
(_, t, _): (usize, Option<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a, _): (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
{
        GrammarItem::Nonterminal(NonterminalData { visibility: v,
                                                   span: Span(lo, hi),
                                                   name: n.0,
                                                   attributes,
                                                   args: n.1,
                                                   type_decl: t,
                                                   alternatives: a })
}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action34<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Attribute, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Attribute
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action35<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, id, _): (usize, Atom, usize),
(_, arg, _): (usize, Option<(AttributeArg)>, usize),
(_, hi, _): (usize, usize, usize),
) -> Attribute
{
{
        Attribute { id_span: Span(lo, hi), id, arg: arg.unwrap_or_default() }
}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action36<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<Attribute>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> (AttributeArg)
{
AttributeArg::Paren(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action37<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, value, _): (usize, &'input str, usize),
) -> (AttributeArg)
{
AttributeArg::Equal(value.into())
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action38<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, NonterminalString, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ___1, _): (usize, Vec<NonterminalString>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> (NonterminalString, Vec<NonterminalString>)
{
(___0, ___1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action39<
    'input,
>(
text: &'input str,
(_, n, _): (usize, NonterminalString, usize),
) -> (NonterminalString, Vec<NonterminalString>)
{
(n, vec![])
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action40<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> (NonterminalString, Vec<NonterminalString>)
{
(NonterminalString(Atom::from(___0)), vec![])
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action41<
    'input,
>(
text: &'input str,
(_, a, _): (usize, Alternative, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<Alternative>
{
vec![a]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action42<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<Alternative>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Option<Tok<'input>>, usize),
) -> Vec<Alternative>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action43<
    'input,
>(
text: &'input str,
(_, attr, _): (usize, alloc::vec::Vec<Attribute>, usize),
(_, lo, _): (usize, usize, usize),
(_, s, _): (usize, alloc::vec::Vec<Symbol>, usize),
(_, c, _): (usize, Option<Condition>, usize),
(_, a, _): (usize, Option<ActionKind>, usize),
(_, hi, _): (usize, usize, usize),
) -> Alternative
{
{
        Alternative {
            span: Span(lo, hi),
            expr: ExprSymbol { symbols: s },
            condition: c,
            action: a,
            attributes: attr,
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action44<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, c, _): (usize, Option<Condition>, usize),
(_, a, _): (usize, ActionKind, usize),
(_, hi, _): (usize, usize, usize),
) -> Alternative
{
{
        Alternative {
            span: Span(lo, hi),
            expr: ExprSymbol { symbols: vec![] },
            condition: c,
            action: Some(a),
            attributes: vec![],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action45<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ActionKind
{
ActionKind::Lookahead
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action46<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ActionKind
{
ActionKind::Lookbehind
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action47<
    'input,
>(
text: &'input str,
(_, c, _): (usize, &'input str, usize),
) -> ActionKind
{
ActionKind::User(strip(c).to_string())
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action48<
    'input,
>(
text: &'input str,
(_, c, _): (usize, &'input str, usize),
) -> ActionKind
{
ActionKind::Fallible(strip(c).to_string())
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action49<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, a, _): (usize, NonterminalString, usize),
(_, op, _): (usize, ConditionOp, usize),
(_, b, _): (usize, Atom, usize),
(_, hi, _): (usize, usize, usize),
) -> Condition
{
{
        Condition { span:Span(lo, hi), lhs:a, rhs:b, op }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action50<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ConditionOp
{
ConditionOp::Equals
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action51<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ConditionOp
{
ConditionOp::NotEquals
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action52<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ConditionOp
{
ConditionOp::Match
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action53<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> ConditionOp
{
ConditionOp::NotMatch
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action54<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, alloc::vec::Vec<Symbol>, usize),
) -> ExprSymbol
{
ExprSymbol { symbols: ___0 }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action55<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, m, _): (usize, Option<Tok<'input>>, usize),
(_, _, _): (usize, usize, usize),
(_, l, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, s, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lo, hi), SymbolKind::Name(Name::new(m.is_some(), l), Box::new(s)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action56<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, s, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lo, hi), SymbolKind::Choose(Box::new(s)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action57<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> Symbol
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action58<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> Symbol
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action59<
    'input,
>(
text: &'input str,
(_, lhs, _): (usize, Symbol, usize),
(_, op, _): (usize, RepeatOp, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lhs.span.0, hi),
                    SymbolKind::Repeat(Box::new(RepeatSymbol { symbol: lhs, op })))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action60<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> RepeatOp
{
RepeatOp::Plus
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action61<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> RepeatOp
{
RepeatOp::Star
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action62<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> RepeatOp
{
RepeatOp::Question
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action63<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, sk, _): (usize, SymbolKind, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lo, hi), sk)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action64<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, t, _): (usize, Tuple, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, s, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
) -> Symbol
{
Symbol::new(Span(lo, hi), SymbolKind::Tuple(t, Box::new(s)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action65<
    'input,
>(
text: &'input str,
(_, name, _): (usize, NonterminalString, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, args, _): (usize, Vec<Symbol>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Macro(MacroSymbol { name, args })
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action66<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalString, usize),
) -> SymbolKind
{
SymbolKind::Terminal(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action67<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, &'input str, usize),
) -> SymbolKind
{
SymbolKind::AmbiguousId(Atom::from(___0))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action68<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Atom, usize),
) -> SymbolKind
{
SymbolKind::Nonterminal(NonterminalString(___0))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action69<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, ExprSymbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Expr(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action70<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Lookahead
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action71<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Lookbehind
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action72<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> SymbolKind
{
SymbolKind::Error
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action73<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, tuples, _): (usize, alloc::vec::Vec<TupleItem>, usize),
(_, e, _): (usize, TupleItem, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
) -> Tuple
{
{
        Tuple::new(tuples.into_iter().chain(once(e)).collect())
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action74<
    'input,
>(
text: &'input str,
(_, m, _): (usize, Option<Tok<'input>>, usize),
(_, l, _): (usize, Atom, usize),
) -> TupleItem
{
TupleItem::Name(Name::new(m.is_some(), l))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action75<
    'input,
>(
text: &'input str,
(_, t, _): (usize, Tuple, usize),
) -> TupleItem
{
TupleItem::Tuple(t)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action76<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
TypeRef::Tuple(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action77<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
TypeRef::Slice(Box::new(___0))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action78<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
{
        TypeRef::OfSymbol(___0.kind)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action79<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, l, _): (usize, Option<Lifetime>, usize),
(_, m, _): (usize, Option<Tok<'input>>, usize),
(_, t, _): (usize, TypeRef, usize),
) -> TypeRef
{
TypeRef::Ref { lifetime: l,
                       mutable: m.is_some(),
                       referent: Box::new(t) }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action80<
    'input,
>(
text: &'input str,
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, types, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
TypeRef::Nominal { path, types }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action81<
    'input,
>(
text: &'input str,
(_, p, _): (usize, Path, usize),
) -> TypeRef
{
match p.as_id() {
            Some(id) => TypeRef::Id(id),
            None => TypeRef::Nominal { path: p, types: vec![] },
        }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action82<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, types, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
TypeRef::TraitObject { path, types }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action83<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, path, _): (usize, Path, usize),
) -> TypeRef
{
TypeRef::TraitObject { path, types: vec![] }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action84<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, forall, _): (usize, Vec<TypeParameter>, usize),
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, parameters, _): (usize, Vec<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ret, _): (usize, Option<TypeRef>, usize),
) -> TypeRef
{
TypeRef::Fn { forall, path, parameters, ret: ret.map(Box::new) }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action85<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action86<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Lifetime, usize),
) -> TypeRef
{
TypeRef::Lifetime(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action87<
    'input,
>(
text: &'input str,
(_, a, _): (usize, Option<Tok<'input>>, usize),
(_, h, _): (usize, alloc::vec::Vec<Atom>, usize),
(_, t, _): (usize, Atom, usize),
) -> Path
{
{
        Path { absolute: a.is_some(),
               ids: h.into_iter().chain(once(t)).collect() }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action88<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a0, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
(_, et, _): (usize, EnumToken, usize),
(_, a1, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> GrammarItem
{
{
        GrammarItem::ExternToken(ExternToken {
            span: Span(lo, hi),
            associated_types: a0.into_iter().chain(a1).collect(),
            enum_token: Some(et),
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action89<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a0, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> GrammarItem
{
{
        GrammarItem::ExternToken(ExternToken {
            span: Span(lo, hi),
            associated_types: a0,
            enum_token: None,
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action90<
    'input,
>(
text: &'input str,
(_, t, _): (usize, MatchToken, usize),
) -> GrammarItem
{
GrammarItem::MatchToken(t)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action91<
    'input,
>(
text: &'input str,
(_, t, _): (usize, MatchToken, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, c, _): (usize, MatchContents, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> MatchToken
{
t.add(c)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action92<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, c, _): (usize, MatchContents, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> MatchToken
{
MatchToken::new(c, Span(lo, hi))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action93<
    'input,
>(
text: &'input str,
(_, items, _): (usize, Vec<MatchItem>, usize),
) -> MatchContents
{
MatchContents { items }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action94<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, hi, _): (usize, usize, usize),
) -> MatchItem
{
MatchItem::CatchAll(Span(lo, hi))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action95<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, s, _): (usize, TerminalLiteral, usize),
(_, hi, _): (usize, usize, usize),
) -> MatchItem
{
MatchItem::Unmapped(s, Span(lo, hi))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action96<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, from, _): (usize, TerminalLiteral, usize),
(_, start, _): (usize, usize, usize),
(_, p, _): (usize, &'input str, usize),
(_, hi, _): (usize, usize, usize),
) -> Result<MatchItem,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
{
        let to = super::parse_match_mapping(p, start + 2)?;
        Ok(MatchItem::Mapped(from, to, Span(lo, hi)))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action97<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalLiteral, usize),
) -> TerminalLiteral
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action98<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalString, usize),
) -> MatchMapping
{
MatchMapping::Terminal(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action99<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
(_, ___1, _): (usize, Tok<'input>, usize),
) -> MatchMapping
{
MatchMapping::Skip
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action100<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, lo, _): (usize, usize, usize),
(_, t, _): (usize, TypeRef, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, c, _): (usize, Vec<Conversion>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> EnumToken
{
{
        EnumToken {
            type_name: t,
            type_span: Span(lo, hi),
            conversions: c,
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action101<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, lo, _): (usize, usize, usize),
(_, n, _): (usize, Atom, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, t, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> AssociatedType
{
{
        AssociatedType { type_span: Span(lo, hi),
                         type_name: n,
                         type_ref: t }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action102<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, attributes, _): (usize, alloc::vec::Vec<Attribute>, usize),
(_, from, _): (usize, TerminalString, usize),
(_, start, _): (usize, usize, usize),
(_, p, _): (usize, &'input str, usize),
(_, hi, _): (usize, usize, usize),
) -> Result<Conversion,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
{
        let pattern = super::parse_pattern(p, start + 2)?;
        Ok(Conversion { span: Span(lo, hi),
                        attributes,
                        from,
                        to: pattern })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action103<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, k, _): (usize, PatternKind<TypeRef>, usize),
(_, hi, _): (usize, usize, usize),
) -> Pattern<TypeRef>
{
Pattern { span: Span(lo, hi), kind: k }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action104<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, ___1, _): (usize, Vec<Pattern<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Enum(___0, ___1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action105<
    'input,
>(
text: &'input str,
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a0, _): (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
(_, a1, _): (usize, Option<FieldPattern<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Struct(p, a0.into_iter().chain(a1).collect(), false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action106<
    'input,
>(
text: &'input str,
(_, p, _): (usize, Path, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, a0, _): (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Struct(p, a0, true)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action107<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Underscore
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action108<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::DotDot
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action109<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Choose(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action110<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<Pattern<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Tuple(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action111<
    'input,
>(
text: &'input str,
(_, c, _): (usize, &'input str, usize),
) -> PatternKind<TypeRef>
{
PatternKind::CharLiteral(Atom::from(c))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action112<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Path, usize),
) -> PatternKind<TypeRef>
{
PatternKind::Path(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action113<
    'input,
>(
text: &'input str,
(_, s, _): (usize, String, usize),
) -> PatternKind<TypeRef>
{
PatternKind::String(s)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action114<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, id, _): (usize, Atom, usize),
(_, hi, _): (usize, usize, usize),
(_, _, _): (usize, Tok<'input>, usize),
(_, pat, _): (usize, Pattern<TypeRef>, usize),
) -> FieldPattern<TypeRef>
{
{
        FieldPattern { field_span: Span(lo, hi),
                       field_name: id,
                       pattern: pat }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action115<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> NonterminalString
{
NonterminalString(Atom::from(i))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action116<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> NonterminalString
{
NonterminalString(Atom::from(i))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action117<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> Atom
{
Atom::from(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action118<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> Atom
{
Atom::from(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action119<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> Atom
{
Atom::from(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action120<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> Lifetime
{
Lifetime(Atom::from(i))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action121<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalString, usize),
) -> TerminalString
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action122<
    'input,
>(
text: &'input str,
(_, i, _): (usize, &'input str, usize),
) -> TerminalString
{
TerminalString::Bare(Atom::from(i))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action123<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TerminalLiteral, usize),
) -> TerminalString
{
TerminalString::Literal(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action124<
    'input,
>(
text: &'input str,
(_, s, _): (usize, Atom, usize),
) -> TerminalLiteral
{
TerminalLiteral::Quoted(s)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action125<
    'input,
>(
text: &'input str,
(_, s, _): (usize, Atom, usize),
) -> TerminalLiteral
{
TerminalLiteral::Regex(s)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action126<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, s, _): (usize, &'input str, usize),
) -> Result<Atom,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
{
        let text = tok::apply_string_escapes(s, lo + 1)
            .map_err(|e| ParseError::User { error: e })?;
        Ok(Atom::from(text))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action127<
    'input,
>(
text: &'input str,
(_, lo, _): (usize, usize, usize),
(_, s, _): (usize, &'input str, usize),
) -> Result<String,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
{
        let text = tok::apply_string_escapes(s, lo + 1)
            .map_err(|e| ParseError::User { error: e })?;
        Ok(text.into_owned())
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action128<
    'input,
>(
text: &'input str,
(_, s, _): (usize, &'input str, usize),
) -> Atom
{
Atom::from(s)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action129<
    'input,
>(
text: &'input str,
(_, s, _): (usize, &'input str, usize),
) -> String
{
s.to_string()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action130<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, FieldPattern<TypeRef>, usize),
) -> Option<FieldPattern<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action131<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<FieldPattern<TypeRef>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action132<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action133<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action134<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, FieldPattern<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> FieldPattern<TypeRef>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action135<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
(_, e1, _): (usize, Option<Pattern<TypeRef>>, usize),
) -> Vec<Pattern<TypeRef>>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action136<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Conversion>, usize),
(_, e1, _): (usize, Option<Conversion>, usize),
) -> Vec<Conversion>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action137<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<MatchItem>, usize),
(_, e1, _): (usize, Option<MatchItem>, usize),
) -> Vec<MatchItem>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action138<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<AssociatedType>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action139<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
) -> alloc::vec::Vec<AssociatedType>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action140<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Atom>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action141<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Atom>, usize),
) -> alloc::vec::Vec<Atom>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action142<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Atom, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Atom
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action143<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> Option<Tok<'input>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action144<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Tok<'input>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action145<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<TypeRef>, usize),
(_, e1, _): (usize, Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action146<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Lifetime, usize),
) -> Option<Lifetime>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action147<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Lifetime>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action148<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TupleItem, usize),
) -> alloc::vec::Vec<TupleItem>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action149<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TupleItem>, usize),
(_, e, _): (usize, TupleItem, usize),
) -> alloc::vec::Vec<TupleItem>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action150<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TupleItem, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TupleItem
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action151<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Symbol>, usize),
(_, e1, _): (usize, Option<Symbol>, usize),
) -> Vec<Symbol>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action152<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> Option<Tok<'input>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action153<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Tok<'input>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action154<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Symbol>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action155<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Symbol>, usize),
) -> alloc::vec::Vec<Symbol>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action156<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, ActionKind, usize),
) -> Option<ActionKind>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action157<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<ActionKind>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action158<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Condition, usize),
) -> Option<Condition>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action159<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Condition>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action160<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Condition, usize),
) -> Condition
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action161<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> alloc::vec::Vec<Symbol>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action162<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Symbol>, usize),
(_, e, _): (usize, Symbol, usize),
) -> alloc::vec::Vec<Symbol>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action163<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Tok<'input>, usize),
) -> Option<Tok<'input>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action164<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Tok<'input>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action165<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Alternative>, usize),
(_, e1, _): (usize, Option<Alternative>, usize),
) -> Vec<Alternative>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action166<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<NonterminalString>, usize),
(_, e1, _): (usize, Option<NonterminalString>, usize),
) -> Vec<NonterminalString>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action167<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Attribute>, usize),
(_, e1, _): (usize, Option<Attribute>, usize),
) -> Vec<Attribute>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action168<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, (AttributeArg), usize),
) -> Option<(AttributeArg)>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action169<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<(AttributeArg)>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action170<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> Option<TypeRef>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action171<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<TypeRef>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action172<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action173<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<Parameter>, usize),
(_, e1, _): (usize, Option<Parameter>, usize),
) -> Vec<Parameter>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action174<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
) -> Option<Vec<TypeBoundParameter<TypeRef>>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action175<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Vec<TypeBoundParameter<TypeRef>>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action176<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action177<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
(_, e1, _): (usize, Option<TypeBoundParameter<TypeRef>>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action178<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> Option<TypeRef>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action179<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<TypeRef>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action180<
    'input,
>(
text: &'input str,
(_, _, _): (usize, Tok<'input>, usize),
(_, ___0, _): (usize, TypeRef, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action181<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<TypeRef>, usize),
(_, e1, _): (usize, Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action182<
    'input,
>(
text: &'input str,
(_, mut v, _): (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
(_, e, _): (usize, Option<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action183<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
)
{
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action184<
    'input,
>(
text: &'input str,
(_, mut v, _): (usize, alloc::vec::Vec<Lifetime>, usize),
(_, e, _): (usize, Option<Lifetime>, usize),
) -> Vec<Lifetime>
{
match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action185<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
(_, e1, _): (usize, Option<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action186<
    'input,
>(
text: &'input str,
(_, v0, _): (usize, alloc::vec::Vec<TypeParameter>, usize),
(_, e1, _): (usize, Option<TypeParameter>, usize),
) -> Vec<TypeParameter>
{
v0.into_iter().chain(e1).collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action187<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<GrammarItem>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action188<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> alloc::vec::Vec<GrammarItem>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action189<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<WhereClause<TypeRef>>, usize),
) -> Option<Vec<WhereClause<TypeRef>>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action190<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Vec<WhereClause<TypeRef>>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action191<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<Parameter>, usize),
) -> Option<Vec<Parameter>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action192<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Vec<Parameter>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action193<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Vec<TypeParameter>, usize),
) -> Option<Vec<TypeParameter>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action194<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Vec<TypeParameter>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::needless_lifetimes)]
fn ___action195<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> usize
{
*___lookbehind
}

#[allow(unused_variables)]
#[allow(clippy::needless_lifetimes)]
fn ___action196<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> usize
{
*___lookahead
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action197<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Attribute>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action198<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Attribute>, usize),
) -> alloc::vec::Vec<Attribute>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action199<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<GrammarItem>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action200<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> alloc::vec::Vec<GrammarItem>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action201<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<String>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action202<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<String>, usize),
) -> alloc::vec::Vec<String>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action203<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, String, usize),
) -> alloc::vec::Vec<String>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action204<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<String>, usize),
(_, e, _): (usize, String, usize),
) -> alloc::vec::Vec<String>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action205<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> alloc::vec::Vec<GrammarItem>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action206<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
(_, e, _): (usize, GrammarItem, usize),
) -> alloc::vec::Vec<GrammarItem>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action207<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Attribute, usize),
) -> alloc::vec::Vec<Attribute>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action208<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Attribute>, usize),
(_, e, _): (usize, Attribute, usize),
) -> alloc::vec::Vec<Attribute>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action209<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, GrammarItem, usize),
) -> alloc::vec::Vec<GrammarItem>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action210<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<GrammarItem>, usize),
(_, e, _): (usize, GrammarItem, usize),
) -> alloc::vec::Vec<GrammarItem>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action211<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeParameter, usize),
) -> Option<TypeParameter>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action212<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<TypeParameter>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action213<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeParameter>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action214<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeParameter>, usize),
) -> alloc::vec::Vec<TypeParameter>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action215<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeParameter, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeParameter
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action216<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, WhereClause<TypeRef>, usize),
) -> Option<WhereClause<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action217<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<WhereClause<TypeRef>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action218<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action219<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action220<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, WhereClause<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> WhereClause<TypeRef>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action221<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Lifetime>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action222<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Lifetime>, usize),
) -> alloc::vec::Vec<Lifetime>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action223<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Lifetime, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Lifetime
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action224<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBound<TypeRef>, usize),
) -> Option<TypeBound<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action225<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<TypeBound<TypeRef>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action226<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action227<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action228<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBound<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action229<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> Option<TypeRef>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action230<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<TypeRef>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action231<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeRef>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action232<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeRef>, usize),
) -> alloc::vec::Vec<TypeRef>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action233<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action234<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBoundParameter<TypeRef>, usize),
) -> Option<TypeBoundParameter<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action235<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<TypeBoundParameter<TypeRef>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action236<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action237<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action238<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBoundParameter<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeBoundParameter<TypeRef>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action239<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Parameter, usize),
) -> Option<Parameter>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action240<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Parameter>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action241<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Parameter>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action242<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Parameter>, usize),
) -> alloc::vec::Vec<Parameter>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action243<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Parameter, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Parameter
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action244<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Attribute, usize),
) -> Option<Attribute>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action245<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Attribute>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action246<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Attribute>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action247<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Attribute>, usize),
) -> alloc::vec::Vec<Attribute>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action248<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Attribute, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Attribute
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action249<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, NonterminalString, usize),
) -> Option<NonterminalString>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action250<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<NonterminalString>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action251<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<NonterminalString>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action252<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<NonterminalString>, usize),
) -> alloc::vec::Vec<NonterminalString>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action253<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, NonterminalString, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> NonterminalString
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action254<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Alternative, usize),
) -> Option<Alternative>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action255<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Alternative>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action256<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Alternative>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action257<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Alternative>, usize),
) -> alloc::vec::Vec<Alternative>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action258<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Alternative, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Alternative
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action259<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> Option<Symbol>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action260<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Symbol>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action261<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Symbol>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action262<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Symbol>, usize),
) -> alloc::vec::Vec<Symbol>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action263<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Symbol
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action264<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> Option<TypeRef>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action265<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<TypeRef>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action266<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<TypeRef>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action267<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeRef>, usize),
) -> alloc::vec::Vec<TypeRef>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action268<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> TypeRef
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action269<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Atom, usize),
) -> alloc::vec::Vec<Atom>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action270<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Atom>, usize),
(_, e, _): (usize, Atom, usize),
) -> alloc::vec::Vec<Atom>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action271<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, AssociatedType, usize),
) -> alloc::vec::Vec<AssociatedType>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action272<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<AssociatedType>, usize),
(_, e, _): (usize, AssociatedType, usize),
) -> alloc::vec::Vec<AssociatedType>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action273<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, MatchItem, usize),
) -> Option<MatchItem>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action274<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<MatchItem>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action275<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<MatchItem>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action276<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<MatchItem>, usize),
) -> alloc::vec::Vec<MatchItem>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action277<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, MatchItem, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> MatchItem
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action278<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Conversion, usize),
) -> Option<Conversion>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action279<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Conversion>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action280<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Conversion>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action281<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Conversion>, usize),
) -> alloc::vec::Vec<Conversion>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action282<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Conversion, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Conversion
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action283<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Pattern<TypeRef>, usize),
) -> Option<Pattern<TypeRef>>
{
Some(___0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action284<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Option<Pattern<TypeRef>>
{
None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action285<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action286<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action287<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Pattern<TypeRef>, usize),
(_, _, _): (usize, Tok<'input>, usize),
) -> Pattern<TypeRef>
{
___0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action288<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, FieldPattern<TypeRef>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action289<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
(_, e, _): (usize, FieldPattern<TypeRef>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action290<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Pattern<TypeRef>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action291<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
(_, e, _): (usize, Pattern<TypeRef>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action292<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Conversion, usize),
) -> alloc::vec::Vec<Conversion>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action293<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Conversion>, usize),
(_, e, _): (usize, Conversion, usize),
) -> alloc::vec::Vec<Conversion>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action294<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, MatchItem, usize),
) -> alloc::vec::Vec<MatchItem>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action295<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<MatchItem>, usize),
(_, e, _): (usize, MatchItem, usize),
) -> alloc::vec::Vec<MatchItem>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action296<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> alloc::vec::Vec<TypeRef>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action297<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeRef>, usize),
(_, e, _): (usize, TypeRef, usize),
) -> alloc::vec::Vec<TypeRef>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action298<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Symbol, usize),
) -> alloc::vec::Vec<Symbol>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action299<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Symbol>, usize),
(_, e, _): (usize, Symbol, usize),
) -> alloc::vec::Vec<Symbol>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action300<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Alternative, usize),
) -> alloc::vec::Vec<Alternative>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action301<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Alternative>, usize),
(_, e, _): (usize, Alternative, usize),
) -> alloc::vec::Vec<Alternative>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action302<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, NonterminalString, usize),
) -> alloc::vec::Vec<NonterminalString>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action303<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<NonterminalString>, usize),
(_, e, _): (usize, NonterminalString, usize),
) -> alloc::vec::Vec<NonterminalString>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action304<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Attribute, usize),
) -> alloc::vec::Vec<Attribute>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action305<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Attribute>, usize),
(_, e, _): (usize, Attribute, usize),
) -> alloc::vec::Vec<Attribute>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action306<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Parameter, usize),
) -> alloc::vec::Vec<Parameter>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action307<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Parameter>, usize),
(_, e, _): (usize, Parameter, usize),
) -> alloc::vec::Vec<Parameter>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action308<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBoundParameter<TypeRef>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action309<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
(_, e, _): (usize, TypeBoundParameter<TypeRef>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action310<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeRef, usize),
) -> alloc::vec::Vec<TypeRef>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action311<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeRef>, usize),
(_, e, _): (usize, TypeRef, usize),
) -> alloc::vec::Vec<TypeRef>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action312<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeBound<TypeRef>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action313<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
(_, e, _): (usize, TypeBound<TypeRef>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action314<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, Lifetime, usize),
) -> alloc::vec::Vec<Lifetime>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action315<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<Lifetime>, usize),
(_, e, _): (usize, Lifetime, usize),
) -> alloc::vec::Vec<Lifetime>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action316<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, WhereClause<TypeRef>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action317<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
(_, e, _): (usize, WhereClause<TypeRef>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action318<
    'input,
>(
text: &'input str,
(_, ___0, _): (usize, TypeParameter, usize),
) -> alloc::vec::Vec<TypeParameter>
{
alloc::vec![___0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn ___action319<
    'input,
>(
text: &'input str,
(_, v, _): (usize, alloc::vec::Vec<TypeParameter>, usize),
(_, e, _): (usize, TypeParameter, usize),
) -> alloc::vec::Vec<TypeParameter>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action320<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, alloc::vec::Vec<Atom>, usize),
___2: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action143(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action87(
text,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action321<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Atom>, usize),
___1: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action144(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action87(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action322<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Alternative>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___3.0;
let ___end0 = ___3.2;
let ___temp0 = ___action163(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action42(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action323<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Alternative>, usize),
___2: (usize, Tok<'input>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___2.2;
let ___end0 = ___2.2;
let ___temp0 = ___action164(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action42(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action324<
    'input,
>(
text: &'input str,
___0: (usize, usize, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, usize, usize),
___4: (usize, Atom, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Symbol, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___temp0 = ___action152(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action55(
text,
___0,
___1,
___temp0,
___3,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action325<
    'input,
>(
text: &'input str,
___0: (usize, usize, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, usize, usize),
___3: (usize, Atom, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Symbol, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action153(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action55(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action326<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
) -> TupleItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action152(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action74(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action327<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
) -> TupleItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action153(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action74(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action328<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Option<Lifetime>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___temp0 = ___action152(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action79(
text,
___0,
___1,
___temp0,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action329<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Option<Lifetime>, usize),
___2: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action153(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action79(
text,
___0,
___1,
___temp0,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action330<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
) -> Option<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action180(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action178(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action331<
    'input,
>(
text: &'input str,
___0: (usize, Vec<TypeParameter>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, TypeRef, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___5.0;
let ___end0 = ___6.2;
let ___temp0 = ___action330(
text,
___5,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action17(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action332<
    'input,
>(
text: &'input str,
___0: (usize, Vec<TypeParameter>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___4.2;
let ___end0 = ___4.2;
let ___temp0 = ___action179(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action17(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action333<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Path, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeRef>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___6.0;
let ___end0 = ___7.2;
let ___temp0 = ___action330(
text,
___6,
___7,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action84(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action334<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Path, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeRef>, usize),
___5: (usize, Tok<'input>, usize),
) -> TypeRef
{
let ___start0 = ___5.2;
let ___end0 = ___5.2;
let ___temp0 = ___action179(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action84(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action335<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
) -> Option<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action172(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action170(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action336<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Visibility, usize),
___2: (usize, usize, usize),
___3: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___4: (usize, usize, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, TypeRef, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___5.0;
let ___end0 = ___6.2;
let ___temp0 = ___action335(
text,
___5,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action33(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action337<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Visibility, usize),
___2: (usize, usize, usize),
___3: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___4: (usize, usize, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action171(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action33(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action338<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
___2: (usize, Tok<'input>, usize),
) -> Option<Vec<TypeBoundParameter<TypeRef>>>
{
let ___start0 = ___0.0;
let ___end0 = ___2.2;
let ___temp0 = ___action176(
text,
___0,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action174(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action339<
    'input,
>(
text: &'input str,
___0: (usize, Vec<TypeParameter>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___2.0;
let ___end0 = ___4.2;
let ___temp0 = ___action338(
text,
___2,
___3,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action18(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action340<
    'input,
>(
text: &'input str,
___0: (usize, Vec<TypeParameter>, usize),
___1: (usize, Path, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___1.2;
let ___end0 = ___1.2;
let ___temp0 = ___action175(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action18(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action341<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Condition, usize),
) -> Option<Condition>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action160(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action158(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action342<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, usize, usize),
___2: (usize, alloc::vec::Vec<Symbol>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Condition, usize),
___5: (usize, Option<ActionKind>, usize),
___6: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___3.0;
let ___end0 = ___4.2;
let ___temp0 = ___action341(
text,
___3,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action43(
text,
___0,
___1,
___2,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action343<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, usize, usize),
___2: (usize, alloc::vec::Vec<Symbol>, usize),
___3: (usize, Option<ActionKind>, usize),
___4: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action159(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action43(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action344<
    'input,
>(
text: &'input str,
___0: (usize, usize, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Condition, usize),
___3: (usize, ActionKind, usize),
___4: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action341(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action44(
text,
___0,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action345<
    'input,
>(
text: &'input str,
___0: (usize, usize, usize),
___1: (usize, ActionKind, usize),
___2: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action159(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action44(
text,
___0,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action346<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeParameter>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action183(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action14(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action347<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Visibility
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action183(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action32(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action348<
    'input,
>(
text: &'input str,
___0: (usize, Alternative, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Alternative>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action258(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action300(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action349<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Alternative>, usize),
___1: (usize, Alternative, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Alternative>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action258(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action301(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action350<
    'input,
>(
text: &'input str,
___0: (usize, Option<Alternative>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action256(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action165(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action351<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Alternative>, usize),
___1: (usize, Option<Alternative>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action257(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action165(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action352<
    'input,
>(
text: &'input str,
___0: (usize, Attribute, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Attribute>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action248(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action304(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action353<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Attribute, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Attribute>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action248(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action305(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action354<
    'input,
>(
text: &'input str,
___0: (usize, Option<Attribute>, usize),
) -> Vec<Attribute>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action246(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action167(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action355<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Option<Attribute>, usize),
) -> Vec<Attribute>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action247(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action167(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action356<
    'input,
>(
text: &'input str,
___0: (usize, Conversion, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Conversion>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action282(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action292(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action357<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Conversion>, usize),
___1: (usize, Conversion, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Conversion>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action282(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action293(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action358<
    'input,
>(
text: &'input str,
___0: (usize, Option<Conversion>, usize),
) -> Vec<Conversion>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action280(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action136(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action359<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Conversion>, usize),
___1: (usize, Option<Conversion>, usize),
) -> Vec<Conversion>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action281(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action136(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action360<
    'input,
>(
text: &'input str,
___0: (usize, FieldPattern<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action134(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action288(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action361<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___1: (usize, FieldPattern<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<FieldPattern<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action134(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action289(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action362<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Option<FieldPattern<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action132(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action105(
text,
___0,
___1,
___temp0,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action363<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___3: (usize, Option<FieldPattern<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___temp0 = ___action133(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action105(
text,
___0,
___1,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action364<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action132(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action106(
text,
___0,
___1,
___temp0,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action365<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___temp0 = ___action133(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action106(
text,
___0,
___1,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action366<
    'input,
>(
text: &'input str,
___0: (usize, Parameter, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Parameter>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action243(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action306(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action367<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Parameter>, usize),
___1: (usize, Parameter, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Parameter>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action243(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action307(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action368<
    'input,
>(
text: &'input str,
___0: (usize, Option<Parameter>, usize),
) -> Vec<Parameter>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action241(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action173(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action369<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Parameter>, usize),
___1: (usize, Option<Parameter>, usize),
) -> Vec<Parameter>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action242(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action173(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action370<
    'input,
>(
text: &'input str,
___0: (usize, WhereClause<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action220(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action316(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action371<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
___1: (usize, WhereClause<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<WhereClause<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action220(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action317(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action372<
    'input,
>(
text: &'input str,
___0: (usize, Option<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action218(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action185(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action373<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
___1: (usize, Option<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action219(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action185(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action374<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Atom>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action142(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action269(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action375<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Atom>, usize),
___1: (usize, Atom, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Atom>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action142(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action270(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action376<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action140(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action320(
text,
___0,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action377<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, alloc::vec::Vec<Atom>, usize),
___2: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action141(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action320(
text,
___0,
___temp0,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action378<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action140(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action321(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action379<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Atom>, usize),
___1: (usize, Atom, usize),
) -> Path
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action141(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action321(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action380<
    'input,
>(
text: &'input str,
___0: (usize, Lifetime, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Lifetime>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action223(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action314(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action381<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Lifetime>, usize),
___1: (usize, Lifetime, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Lifetime>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action223(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action315(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action382<
    'input,
>(
text: &'input str,
___0: (usize, Option<Lifetime>, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action221(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action184(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action383<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Lifetime>, usize),
___1: (usize, Option<Lifetime>, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action222(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action184(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action384<
    'input,
>(
text: &'input str,
___0: (usize, MatchItem, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<MatchItem>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action277(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action294(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action385<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<MatchItem>, usize),
___1: (usize, MatchItem, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<MatchItem>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action277(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action295(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action386<
    'input,
>(
text: &'input str,
___0: (usize, Option<MatchItem>, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action275(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action137(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action387<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<MatchItem>, usize),
___1: (usize, Option<MatchItem>, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action276(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action137(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action388<
    'input,
>(
text: &'input str,
___0: (usize, NonterminalString, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<NonterminalString>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action253(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action302(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action389<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<NonterminalString>, usize),
___1: (usize, NonterminalString, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<NonterminalString>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action253(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action303(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action390<
    'input,
>(
text: &'input str,
___0: (usize, Option<NonterminalString>, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action251(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action166(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action391<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<NonterminalString>, usize),
___1: (usize, Option<NonterminalString>, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action252(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action166(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action392<
    'input,
>(
text: &'input str,
___0: (usize, Pattern<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action287(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action290(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action393<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
___1: (usize, Pattern<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Pattern<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action287(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action291(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action394<
    'input,
>(
text: &'input str,
___0: (usize, Option<Pattern<TypeRef>>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action285(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action135(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action395<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
___1: (usize, Option<Pattern<TypeRef>>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action286(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action135(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action396<
    'input,
>(
text: &'input str,
___0: (usize, Symbol, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Symbol>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action263(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action298(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action397<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Symbol, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<Symbol>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action263(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action299(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action398<
    'input,
>(
text: &'input str,
___0: (usize, Option<Symbol>, usize),
) -> Vec<Symbol>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action261(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action151(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action399<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Option<Symbol>, usize),
) -> Vec<Symbol>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action262(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action151(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action400<
    'input,
>(
text: &'input str,
___0: (usize, TupleItem, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TupleItem>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action150(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action148(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action401<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TupleItem>, usize),
___1: (usize, TupleItem, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TupleItem>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action150(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action149(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action402<
    'input,
>(
text: &'input str,
___0: (usize, TypeBound<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action228(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action312(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action403<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
___1: (usize, TypeBound<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeBound<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action228(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action313(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action404<
    'input,
>(
text: &'input str,
___0: (usize, Option<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action226(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action182(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action405<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
___1: (usize, Option<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action227(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action182(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action406<
    'input,
>(
text: &'input str,
___0: (usize, TypeBoundParameter<TypeRef>, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action238(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action308(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action407<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
___1: (usize, TypeBoundParameter<TypeRef>, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action238(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action309(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action408<
    'input,
>(
text: &'input str,
___0: (usize, Option<TypeBoundParameter<TypeRef>>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action236(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action177(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action409<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
___1: (usize, Option<TypeBoundParameter<TypeRef>>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action237(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action177(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action410<
    'input,
>(
text: &'input str,
___0: (usize, TypeParameter, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeParameter>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action215(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action318(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action411<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeParameter>, usize),
___1: (usize, TypeParameter, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeParameter>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action215(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action319(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action412<
    'input,
>(
text: &'input str,
___0: (usize, Option<TypeParameter>, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action213(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action186(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action413<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeParameter>, usize),
___1: (usize, Option<TypeParameter>, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action214(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action186(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action414<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action233(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action310(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action415<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, TypeRef, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeRef>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action233(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action311(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action416<
    'input,
>(
text: &'input str,
___0: (usize, Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action231(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action181(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action417<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action232(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action181(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action418<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
___1: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___1.2;
let ___temp0 = ___action268(
text,
___0,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action296(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action419<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, TypeRef, usize),
___2: (usize, Tok<'input>, usize),
) -> alloc::vec::Vec<TypeRef>
{
let ___start0 = ___1.0;
let ___end0 = ___2.2;
let ___temp0 = ___action268(
text,
___1,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action297(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action420<
    'input,
>(
text: &'input str,
___0: (usize, Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action266(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action145(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action421<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, Option<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action267(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action145(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action422<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
___4: (usize, Option<ActionKind>, usize),
___5: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action342(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action423<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Option<ActionKind>, usize),
___3: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action343(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action424<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Condition, usize),
___2: (usize, ActionKind, usize),
___3: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action344(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action425<
    'input,
>(
text: &'input str,
___0: (usize, ActionKind, usize),
___1: (usize, usize, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action345(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action426<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
___2: (usize, usize, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, TypeRef, usize),
___5: (usize, Tok<'input>, usize),
) -> AssociatedType
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action101(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action427<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, Option<(AttributeArg)>, usize),
___2: (usize, usize, usize),
) -> Attribute
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action35(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action428<
    'input,
>(
text: &'input str,
___0: (usize, NonterminalString, usize),
___1: (usize, ConditionOp, usize),
___2: (usize, Atom, usize),
___3: (usize, usize, usize),
) -> Condition
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action49(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action429<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, TerminalString, usize),
___2: (usize, &'input str, usize),
___3: (usize, usize, usize),
) -> Result<Conversion,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___start1 = ___1.2;
let ___end1 = ___2.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action196(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action102(
text,
___temp0,
___0,
___1,
___temp1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action430<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
___2: (usize, usize, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Conversion>, usize),
___5: (usize, Tok<'input>, usize),
) -> EnumToken
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action100(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action431<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, usize, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<AssociatedType>, usize),
___4: (usize, EnumToken, usize),
___5: (usize, alloc::vec::Vec<AssociatedType>, usize),
___6: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action88(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action432<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, usize, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<AssociatedType>, usize),
___4: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action89(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action433<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, usize, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Pattern<TypeRef>, usize),
) -> FieldPattern<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action114(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action434<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, usize, usize),
___5: (usize, Option<Vec<TypeParameter>>, usize),
___6: (usize, Option<Vec<Parameter>>, usize),
___7: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___8: (usize, Tok<'input>, usize),
___9: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action6(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
___6,
___7,
___8,
___9,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action435<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, usize, usize),
) -> MatchItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action94(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action436<
    'input,
>(
text: &'input str,
___0: (usize, TerminalLiteral, usize),
___1: (usize, usize, usize),
) -> MatchItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action95(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action437<
    'input,
>(
text: &'input str,
___0: (usize, TerminalLiteral, usize),
___1: (usize, &'input str, usize),
___2: (usize, usize, usize),
) -> Result<MatchItem,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___start1 = ___0.2;
let ___end1 = ___1.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action196(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action96(
text,
___temp0,
___0,
___temp1,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action438<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, usize, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, MatchContents, usize),
___4: (usize, Tok<'input>, usize),
) -> MatchToken
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action92(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action439<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, usize, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, TypeRef, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action336(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action440<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, usize, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action337(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action441<
    'input,
>(
text: &'input str,
___0: (usize, PatternKind<TypeRef>, usize),
___1: (usize, usize, usize),
) -> Pattern<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action103(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action442<
    'input,
>(
text: &'input str,
___0: (usize, &'input str, usize),
) -> Result<String,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action127(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action443<
    'input,
>(
text: &'input str,
___0: (usize, &'input str, usize),
) -> Result<Atom,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action126(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action444<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Atom, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Symbol, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___start1 = ___1.2;
let ___end1 = ___2.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action196(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action324(
text,
___temp0,
___0,
___1,
___temp1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action445<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Symbol, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___start1 = ___0.2;
let ___end1 = ___1.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action196(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action325(
text,
___temp0,
___0,
___temp1,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action446<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Symbol, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action56(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action447<
    'input,
>(
text: &'input str,
___0: (usize, SymbolKind, usize),
___1: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action63(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action448<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tuple, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Symbol, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, usize, usize),
) -> Symbol
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action64(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action449<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, alloc::vec::Vec<TupleItem>, usize),
___2: (usize, TupleItem, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, usize, usize),
) -> Tuple
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action196(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action73(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action450<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
___4: (usize, Option<ActionKind>, usize),
) -> Alternative
{
let ___start0 = ___4.2;
let ___end0 = ___4.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action422(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action451<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Option<ActionKind>, usize),
) -> Alternative
{
let ___start0 = ___2.2;
let ___end0 = ___2.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action423(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action452<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Condition, usize),
___2: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___2.2;
let ___end0 = ___2.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action424(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action453<
    'input,
>(
text: &'input str,
___0: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action425(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action454<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, TypeRef, usize),
___4: (usize, Tok<'input>, usize),
) -> AssociatedType
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action426(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action455<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, Option<(AttributeArg)>, usize),
) -> Attribute
{
let ___start0 = ___1.2;
let ___end0 = ___1.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action427(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action456<
    'input,
>(
text: &'input str,
___0: (usize, NonterminalString, usize),
___1: (usize, ConditionOp, usize),
___2: (usize, Atom, usize),
) -> Condition
{
let ___start0 = ___2.2;
let ___end0 = ___2.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action428(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action457<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, TerminalString, usize),
___2: (usize, &'input str, usize),
) -> Result<Conversion,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___2.2;
let ___end0 = ___2.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action429(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action458<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Conversion>, usize),
___4: (usize, Tok<'input>, usize),
) -> EnumToken
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action430(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action459<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, EnumToken, usize),
___4: (usize, alloc::vec::Vec<AssociatedType>, usize),
___5: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action431(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action460<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action432(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action461<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Pattern<TypeRef>, usize),
) -> FieldPattern<TypeRef>
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action433(
text,
___0,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action462<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<TypeParameter>>, usize),
___5: (usize, Option<Vec<Parameter>>, usize),
___6: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action434(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action463<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
) -> MatchItem
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action435(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action464<
    'input,
>(
text: &'input str,
___0: (usize, TerminalLiteral, usize),
) -> MatchItem
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action436(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action465<
    'input,
>(
text: &'input str,
___0: (usize, TerminalLiteral, usize),
___1: (usize, &'input str, usize),
) -> Result<MatchItem,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___1.2;
let ___end0 = ___1.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action437(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action466<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, MatchContents, usize),
___3: (usize, Tok<'input>, usize),
) -> MatchToken
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action438(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action467<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, TypeRef, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action439(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action468<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action440(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action469<
    'input,
>(
text: &'input str,
___0: (usize, PatternKind<TypeRef>, usize),
) -> Pattern<TypeRef>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action441(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action470<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Atom, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Symbol, usize),
___5: (usize, Tok<'input>, usize),
) -> Symbol
{
let ___start0 = ___5.2;
let ___end0 = ___5.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action444(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action471<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Atom, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Symbol, usize),
___4: (usize, Tok<'input>, usize),
) -> Symbol
{
let ___start0 = ___4.2;
let ___end0 = ___4.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action445(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action472<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Symbol, usize),
___2: (usize, Tok<'input>, usize),
) -> Symbol
{
let ___start0 = ___2.2;
let ___end0 = ___2.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action446(
text,
___0,
___1,
___2,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action473<
    'input,
>(
text: &'input str,
___0: (usize, Symbol, usize),
___1: (usize, RepeatOp, usize),
) -> Symbol
{
let ___start0 = ___1.2;
let ___end0 = ___1.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action59(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action474<
    'input,
>(
text: &'input str,
___0: (usize, SymbolKind, usize),
) -> Symbol
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action447(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action475<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tuple, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Symbol, usize),
___4: (usize, Tok<'input>, usize),
) -> Symbol
{
let ___start0 = ___4.2;
let ___end0 = ___4.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action448(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action476<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, alloc::vec::Vec<TupleItem>, usize),
___2: (usize, TupleItem, usize),
___3: (usize, Tok<'input>, usize),
) -> Tuple
{
let ___start0 = ___3.2;
let ___end0 = ___3.2;
let ___temp0 = ___action195(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action449(
text,
___0,
___1,
___2,
___3,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action477<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
___4: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action156(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action450(
text,
___0,
___1,
___2,
___3,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action478<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
) -> Alternative
{
let ___start0 = ___3.2;
let ___end0 = ___3.2;
let ___temp0 = ___action157(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action450(
text,
___0,
___1,
___2,
___3,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action479<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___temp0 = ___action156(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action451(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action480<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
) -> Alternative
{
let ___start0 = ___1.2;
let ___end0 = ___1.2;
let ___temp0 = ___action157(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action451(
text,
___0,
___1,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action481<
    'input,
>(
text: &'input str,
___0: (usize, Alternative, usize),
) -> Vec<Alternative>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action254(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action350(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action482<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Alternative>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action255(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action350(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action483<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Alternative>, usize),
___1: (usize, Alternative, usize),
) -> Vec<Alternative>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action254(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action351(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action484<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Alternative>, usize),
) -> Vec<Alternative>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action255(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action351(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action485<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, EnumToken, usize),
___3: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___start1 = ___2.2;
let ___end1 = ___3.0;
let ___temp0 = ___action138(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action138(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action459(
text,
___0,
___1,
___temp0,
___2,
___temp1,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action486<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, EnumToken, usize),
___3: (usize, alloc::vec::Vec<AssociatedType>, usize),
___4: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___start1 = ___3.0;
let ___end1 = ___3.2;
let ___temp0 = ___action138(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action139(
text,
___3,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action459(
text,
___0,
___1,
___temp0,
___2,
___temp1,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action487<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, EnumToken, usize),
___4: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___start1 = ___3.2;
let ___end1 = ___4.0;
let ___temp0 = ___action139(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action138(
text,
&___start1,
&___end1,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action459(
text,
___0,
___1,
___temp0,
___3,
___temp1,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action488<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, EnumToken, usize),
___4: (usize, alloc::vec::Vec<AssociatedType>, usize),
___5: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___start1 = ___4.0;
let ___end1 = ___4.2;
let ___temp0 = ___action139(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
let ___temp1 = ___action139(
text,
___4,
);
let ___temp1 = (___start1, ___temp1, ___end1);
___action459(
text,
___0,
___1,
___temp0,
___3,
___temp1,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action489<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action138(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action460(
text,
___0,
___1,
___temp0,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action490<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<AssociatedType>, usize),
___3: (usize, Tok<'input>, usize),
) -> GrammarItem
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___temp0 = ___action139(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action460(
text,
___0,
___1,
___temp0,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action491<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Condition, usize),
___3: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action197(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action477(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action492<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
___4: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action198(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action477(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action493<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Condition, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action197(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action478(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action494<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Condition, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action198(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action478(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action495<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action197(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action479(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action496<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
___2: (usize, ActionKind, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action198(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action479(
text,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action497<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action197(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action480(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action498<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, alloc::vec::Vec<Symbol>, usize),
) -> Alternative
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action198(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action480(
text,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action499<
    'input,
>(
text: &'input str,
___0: (usize, TerminalString, usize),
___1: (usize, &'input str, usize),
) -> Result<Conversion,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action197(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action457(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action500<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, TerminalString, usize),
___2: (usize, &'input str, usize),
) -> Result<Conversion,___lalrpop_util::ParseError<usize,Tok<'input>,tok::Error>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action198(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action457(
text,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action501<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<TypeParameter>>, usize),
___4: (usize, Option<Vec<Parameter>>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action197(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action462(
text,
___0,
___1,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action502<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<TypeParameter>>, usize),
___5: (usize, Option<Vec<Parameter>>, usize),
___6: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___temp0 = ___action198(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action462(
text,
___0,
___1,
___temp0,
___3,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action503<
    'input,
>(
text: &'input str,
___0: (usize, Visibility, usize),
___1: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, TypeRef, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action197(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action467(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action504<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, TypeRef, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action198(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action467(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action505<
    'input,
>(
text: &'input str,
___0: (usize, Visibility, usize),
___1: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action197(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action468(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action506<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Visibility, usize),
___2: (usize, (NonterminalString, Vec<NonterminalString>), usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Alternative>, usize),
) -> GrammarItem
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action198(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action468(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action507<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
___1: (usize, (AttributeArg), usize),
) -> Attribute
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action168(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action455(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action508<
    'input,
>(
text: &'input str,
___0: (usize, Atom, usize),
) -> Attribute
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action169(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action455(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action509<
    'input,
>(
text: &'input str,
___0: (usize, Attribute, usize),
) -> Vec<Attribute>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action244(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action354(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action510<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Attribute>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action245(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action354(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action511<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Attribute, usize),
) -> Vec<Attribute>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action244(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action355(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action512<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
) -> Vec<Attribute>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action245(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action355(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action513<
    'input,
>(
text: &'input str,
___0: (usize, Conversion, usize),
) -> Vec<Conversion>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action278(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action358(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action514<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Conversion>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action279(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action358(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action515<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Conversion>, usize),
___1: (usize, Conversion, usize),
) -> Vec<Conversion>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action278(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action359(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action516<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Conversion>, usize),
) -> Vec<Conversion>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action279(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action359(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action517<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, FieldPattern<TypeRef>, usize),
___3: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___2.0;
let ___end0 = ___2.2;
let ___temp0 = ___action130(
text,
___2,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action362(
text,
___0,
___1,
___temp0,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action518<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___1.2;
let ___end0 = ___2.0;
let ___temp0 = ___action131(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action362(
text,
___0,
___1,
___temp0,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action519<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___3: (usize, FieldPattern<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___3.0;
let ___end0 = ___3.2;
let ___temp0 = ___action130(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action363(
text,
___0,
___1,
___2,
___temp0,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action520<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<FieldPattern<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> PatternKind<TypeRef>
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action131(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action363(
text,
___0,
___1,
___2,
___temp0,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action521<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, TypeRef, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<TypeBound<TypeRef>>, usize),
) -> WhereClause<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___3.2;
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action12(
text,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action522<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeBound<TypeRef>>, usize),
) -> WhereClause<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action346(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action12(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action523<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Path, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<TypeRef>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, Tok<'input>, usize),
___9: (usize, TypeRef, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___3.2;
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action331(
text,
___temp0,
___4,
___5,
___6,
___7,
___8,
___9,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action524<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeRef>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, TypeRef, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action346(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action331(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action525<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Path, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<TypeRef>, usize),
___7: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___3.2;
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action332(
text,
___temp0,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action526<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeRef>, usize),
___3: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action346(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action332(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action527<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Path, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___3.2;
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action339(
text,
___temp0,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action528<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeBoundParameter<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action346(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action339(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action529<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Path, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___3.2;
let ___temp0 = ___action13(
text,
___0,
___1,
___2,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action340(
text,
___temp0,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action530<
    'input,
>(
text: &'input str,
___0: (usize, Path, usize),
) -> TypeBound<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action346(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action340(
text,
___temp0,
___0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action531<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Path, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, Vec<TypeRef>, usize),
___8: (usize, Tok<'input>, usize),
___9: (usize, Tok<'input>, usize),
___10: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___1.0;
let ___end0 = ___4.2;
let ___temp0 = ___action13(
text,
___1,
___2,
___3,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action333(
text,
___0,
___temp0,
___5,
___6,
___7,
___8,
___9,
___10,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action532<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action346(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action333(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action533<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, Path, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, Vec<TypeRef>, usize),
___8: (usize, Tok<'input>, usize),
) -> TypeRef
{
let ___start0 = ___1.0;
let ___end0 = ___4.2;
let ___temp0 = ___action13(
text,
___1,
___2,
___3,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action334(
text,
___0,
___temp0,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action534<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Path, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeRef>, usize),
___4: (usize, Tok<'input>, usize),
) -> TypeRef
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action346(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action334(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action535<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<TypeParameter>>, usize),
___4: (usize, Option<Vec<Parameter>>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___6.2;
let ___end0 = ___6.2;
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action501(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action536<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<TypeParameter>>, usize),
___4: (usize, Option<Vec<Parameter>>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___7.0;
let ___end0 = ___7.2;
let ___temp0 = ___action188(
text,
___7,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action501(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action537<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<TypeParameter>>, usize),
___5: (usize, Option<Vec<Parameter>>, usize),
___6: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___7.2;
let ___end0 = ___7.2;
let ___temp0 = ___action187(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action502(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action538<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<TypeParameter>>, usize),
___5: (usize, Option<Vec<Parameter>>, usize),
___6: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___8.0;
let ___end0 = ___8.2;
let ___temp0 = ___action188(
text,
___8,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action502(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action539<
    'input,
>(
text: &'input str,
___0: (usize, Parameter, usize),
) -> Vec<Parameter>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action239(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action368(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action540<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Parameter>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action240(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action368(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action541<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Parameter>, usize),
___1: (usize, Parameter, usize),
) -> Vec<Parameter>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action239(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action369(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action542<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Parameter>, usize),
) -> Vec<Parameter>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action240(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action369(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action543<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<TypeParameter>>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action191(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action535(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action544<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<TypeParameter>>, usize),
___4: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action192(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action535(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action545<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<TypeParameter>>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action191(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action536(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action546<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<TypeParameter>>, usize),
___4: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action192(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action536(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action547<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<TypeParameter>>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.0;
let ___end0 = ___5.2;
let ___temp0 = ___action191(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action537(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action548<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<TypeParameter>>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action192(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action537(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action549<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<TypeParameter>>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.0;
let ___end0 = ___5.2;
let ___temp0 = ___action191(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action538(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action550<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<TypeParameter>>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action192(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action538(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action551<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.0;
let ___end0 = ___3.2;
let ___temp0 = ___action193(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action543(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action552<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action194(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action543(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action553<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.0;
let ___end0 = ___3.2;
let ___temp0 = ___action193(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action544(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action554<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action194(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action544(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action555<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.0;
let ___end0 = ___3.2;
let ___temp0 = ___action193(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action545(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action556<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action194(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action545(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action557<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.0;
let ___end0 = ___3.2;
let ___temp0 = ___action193(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action546(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action558<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action194(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action546(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action559<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action193(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action547(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action560<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action194(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action547(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action561<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action193(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action548(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action562<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action194(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action548(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action563<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action193(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action549(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action564<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action194(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action549(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action565<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action193(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action550(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action566<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Option<Vec<WhereClause<TypeRef>>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action194(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action550(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action567<
    'input,
>(
text: &'input str,
___0: (usize, WhereClause<TypeRef>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action216(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action372(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action568<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action217(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action372(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action569<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
___1: (usize, WhereClause<TypeRef>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action216(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action373(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action570<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<WhereClause<TypeRef>>, usize),
) -> Vec<WhereClause<TypeRef>>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action217(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action373(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action571<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.0;
let ___end0 = ___5.2;
let ___temp0 = ___action189(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action551(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action572<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action551(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action573<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action189(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action552(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action574<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action552(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action575<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action189(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action553(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action576<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action553(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action577<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.0;
let ___end0 = ___3.2;
let ___temp0 = ___action189(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action554(
text,
___0,
___1,
___2,
___temp0,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action578<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action554(
text,
___0,
___1,
___2,
___temp0,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action579<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.0;
let ___end0 = ___5.2;
let ___temp0 = ___action189(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action555(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action580<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action555(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action581<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action189(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action556(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action582<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action556(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action583<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action189(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action557(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action584<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action557(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action585<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.0;
let ___end0 = ___3.2;
let ___temp0 = ___action189(
text,
___3,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action558(
text,
___0,
___1,
___2,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action586<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___2.2;
let ___end0 = ___3.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action558(
text,
___0,
___1,
___2,
___temp0,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action587<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___6.0;
let ___end0 = ___6.2;
let ___temp0 = ___action189(
text,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action559(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action588<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.2;
let ___end0 = ___6.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action559(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action589<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.0;
let ___end0 = ___5.2;
let ___temp0 = ___action189(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action560(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action590<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action560(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action591<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___5.0;
let ___end0 = ___5.2;
let ___temp0 = ___action189(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action561(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action592<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action561(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action593<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action189(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action562(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action594<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action562(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action595<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___6.0;
let ___end0 = ___6.2;
let ___temp0 = ___action189(
text,
___6,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action563(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action596<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.2;
let ___end0 = ___6.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action563(
text,
___0,
___1,
___2,
___3,
___4,
___5,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action597<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.0;
let ___end0 = ___5.2;
let ___temp0 = ___action189(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action564(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action598<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action564(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action599<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___5.0;
let ___end0 = ___5.2;
let ___temp0 = ___action189(
text,
___5,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action565(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action600<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.2;
let ___end0 = ___5.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action565(
text,
___0,
___1,
___2,
___3,
___4,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action601<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___4.0;
let ___end0 = ___4.2;
let ___temp0 = ___action189(
text,
___4,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action566(
text,
___0,
___1,
___2,
___3,
___temp0,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action602<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___3.2;
let ___end0 = ___4.0;
let ___temp0 = ___action190(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action566(
text,
___0,
___1,
___2,
___3,
___temp0,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action603<
    'input,
>(
text: &'input str,
___0: (usize, Lifetime, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action146(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action382(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action604<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Lifetime>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action147(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action382(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action605<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Lifetime>, usize),
___1: (usize, Lifetime, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action146(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action383(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action606<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Lifetime>, usize),
) -> Vec<Lifetime>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action147(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action383(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action607<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Lifetime, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action146(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action328(
text,
___0,
___temp0,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action608<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action147(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action328(
text,
___0,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action609<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Lifetime, usize),
___2: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action146(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action329(
text,
___0,
___temp0,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action610<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, TypeRef, usize),
) -> TypeRef
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action147(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action329(
text,
___0,
___temp0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action611<
    'input,
>(
text: &'input str,
___0: (usize, MatchItem, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action273(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action386(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action612<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<MatchItem>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action274(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action386(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action613<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<MatchItem>, usize),
___1: (usize, MatchItem, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action273(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action387(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action614<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<MatchItem>, usize),
) -> Vec<MatchItem>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action274(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action387(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action615<
    'input,
>(
text: &'input str,
___0: (usize, NonterminalString, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action249(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action390(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action616<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<NonterminalString>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action250(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action390(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action617<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<NonterminalString>, usize),
___1: (usize, NonterminalString, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action249(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action391(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action618<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<NonterminalString>, usize),
) -> Vec<NonterminalString>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action250(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action391(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action619<
    'input,
>(
text: &'input str,
___0: (usize, Pattern<TypeRef>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action283(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action394(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action620<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action284(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action394(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action621<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
___1: (usize, Pattern<TypeRef>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action283(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action395(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action622<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Pattern<TypeRef>>, usize),
) -> Vec<Pattern<TypeRef>>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action284(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action395(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action623<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action571(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action624<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action571(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action625<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action572(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action626<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action572(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action627<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action573(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action628<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action573(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action629<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action574(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action630<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action574(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action631<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action575(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action632<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action575(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action633<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action576(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action634<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action576(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action635<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action577(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action636<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action577(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action637<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action578(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action638<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action578(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action639<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action579(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action640<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action579(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action641<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action580(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action642<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action580(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action643<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action581(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action644<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action581(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action645<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action582(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action646<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action582(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action647<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action583(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action648<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action583(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action649<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action584(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action650<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action584(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action651<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action585(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action652<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action585(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action653<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action586(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action654<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action586(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action655<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action587(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action656<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action587(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action657<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action588(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action658<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action588(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action659<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action589(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action660<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action589(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action661<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action590(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action662<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action590(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action663<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action591(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action664<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action591(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action665<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action592(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action666<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action592(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action667<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action593(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action668<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action593(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action669<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action594(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action670<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action594(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action671<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action595(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action672<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action595(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action673<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action596(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action674<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action596(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action675<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action597(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action676<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action597(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action677<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action598(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action678<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action598(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action679<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action599(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action680<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action599(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action681<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action600(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action682<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action600(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action683<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action601(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action684<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action601(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action685<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action201(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action602(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action686<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action202(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action602(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action687<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> ExprSymbol
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action154(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action54(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action688<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
) -> ExprSymbol
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action155(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action54(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action689<
    'input,
>(
text: &'input str,
___0: (usize, Symbol, usize),
) -> Vec<Symbol>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action259(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action398(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action690<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<Symbol>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action260(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action398(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action691<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
___1: (usize, Symbol, usize),
) -> Vec<Symbol>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action259(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action399(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action692<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Symbol>, usize),
) -> Vec<Symbol>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action260(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action399(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action693<
    'input,
>(
text: &'input str,
___0: (usize, TypeBound<TypeRef>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action224(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action404(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action694<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action225(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action404(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action695<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
___1: (usize, TypeBound<TypeRef>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action224(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action405(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action696<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBound<TypeRef>>, usize),
) -> Vec<TypeBound<TypeRef>>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action225(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action405(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action697<
    'input,
>(
text: &'input str,
___0: (usize, TypeBoundParameter<TypeRef>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action234(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action408(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action698<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action235(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action408(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action699<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
___1: (usize, TypeBoundParameter<TypeRef>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action234(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action409(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action700<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeBoundParameter<TypeRef>>, usize),
) -> Vec<TypeBoundParameter<TypeRef>>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action235(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action409(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action701<
    'input,
>(
text: &'input str,
___0: (usize, TypeParameter, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action211(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action412(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action702<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeParameter>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action212(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action412(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action703<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeParameter>, usize),
___1: (usize, TypeParameter, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action211(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action413(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action704<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeParameter>, usize),
) -> Vec<TypeParameter>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action212(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action413(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action705<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action229(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action416(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action706<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeRef>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action230(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action416(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action707<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, TypeRef, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action229(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action417(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action708<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action230(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action417(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action709<
    'input,
>(
text: &'input str,
___0: (usize, TypeRef, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action264(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action420(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action710<
    'input,
>(
text: &'input str,
___lookbehind: &usize,
___lookahead: &usize,
) -> Vec<TypeRef>
{
let ___start0 = *___lookbehind;
let ___end0 = *___lookahead;
let ___temp0 = ___action265(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action420(
text,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action711<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
___1: (usize, TypeRef, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action264(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action421(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action712<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<TypeRef>, usize),
) -> Vec<TypeRef>
{
let ___start0 = ___0.2;
let ___end0 = ___0.2;
let ___temp0 = ___action265(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action421(
text,
___0,
___temp0,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action713<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action623(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action714<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action623(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action715<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action624(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action716<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action624(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action717<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action625(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action718<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action625(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action719<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action626(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action720<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action626(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action721<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Parameter>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action627(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action722<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action627(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action723<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action628(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action724<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action628(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action725<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Parameter>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action629(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action726<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action629(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action727<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action630(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action728<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action630(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action729<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action631(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action730<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action631(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action731<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action632(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action732<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action632(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action733<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action633(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action734<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action633(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action735<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action634(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action736<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action634(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action737<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<WhereClause<TypeRef>>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action635(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action738<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action635(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action739<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action636(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action740<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action636(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action741<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action637(
text,
___temp0,
___0,
___1,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action742<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action637(
text,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action743<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action638(
text,
___0,
___temp0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action744<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action638(
text,
___0,
___temp0,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action745<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action639(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action746<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action639(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action747<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action640(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action748<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action640(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action749<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action641(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action750<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action641(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action751<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action642(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action752<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action642(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action753<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Parameter>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action643(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action754<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action643(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action755<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action644(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action756<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action644(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action757<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<Parameter>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action645(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action758<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action645(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action759<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action646(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action760<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action646(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action761<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action647(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action762<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action647(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action763<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action648(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action764<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action648(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action765<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<TypeParameter>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action649(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action766<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action649(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action767<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action650(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action768<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action650(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action769<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Vec<WhereClause<TypeRef>>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action651(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action770<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action651(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action771<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action652(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action772<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action652(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action773<
    'input,
>(
text: &'input str,
___0: (usize, Tok<'input>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action653(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action774<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action653(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action775<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action654(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action776<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action654(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action777<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action655(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action778<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action655(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action779<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action656(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action780<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action656(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action781<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action657(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action782<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action657(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action783<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action658(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action784<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action658(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action785<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action659(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action786<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action659(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action787<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action660(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action788<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action660(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action789<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action661(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action790<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action661(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action791<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action662(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action792<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action662(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action793<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action663(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action794<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action663(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action795<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action664(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action796<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action664(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action797<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action665(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action798<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action665(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action799<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action666(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action800<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action666(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action801<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action667(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action802<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action667(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action803<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action668(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action804<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action668(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action805<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action669(
text,
___temp0,
___0,
___1,
___2,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action806<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action669(
text,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action807<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action670(
text,
___0,
___temp0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action808<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action670(
text,
___0,
___temp0,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action809<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action671(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action810<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action671(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action811<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action672(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action812<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Vec<WhereClause<TypeRef>>, usize),
___7: (usize, Tok<'input>, usize),
___8: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action672(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
___8,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action813<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action673(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action814<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action673(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action815<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action674(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action816<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<Parameter>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action674(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action817<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action675(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action818<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action675(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action819<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action676(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action820<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action676(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action821<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<Parameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action677(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action822<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action677(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action823<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<Parameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action678(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action824<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<Parameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action678(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action825<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action679(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action826<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action679(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action827<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action680(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action828<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Vec<WhereClause<TypeRef>>, usize),
___6: (usize, Tok<'input>, usize),
___7: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action680(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
___7,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action829<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<TypeParameter>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action681(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action830<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action681(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action831<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<TypeParameter>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action682(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action832<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<TypeParameter>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action682(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action833<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Vec<WhereClause<TypeRef>>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action683(
text,
___temp0,
___0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action834<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action683(
text,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action835<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Vec<WhereClause<TypeRef>>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action684(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
___5,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action836<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Vec<WhereClause<TypeRef>>, usize),
___5: (usize, Tok<'input>, usize),
___6: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action684(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
___6,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action837<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<Attribute>, usize),
___1: (usize, Tok<'input>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action685(
text,
___temp0,
___0,
___1,
___2,
___3,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action838<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<GrammarItem>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.0;
let ___end0 = ___0.2;
let ___temp0 = ___action200(
text,
___0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action685(
text,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action839<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<Attribute>, usize),
___2: (usize, Tok<'input>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___0.2;
let ___end0 = ___1.0;
let ___temp0 = ___action199(
text,
&___start0,
&___end0,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action686(
text,
___0,
___temp0,
___1,
___2,
___3,
___4,
)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn ___action840<
    'input,
>(
text: &'input str,
___0: (usize, alloc::vec::Vec<String>, usize),
___1: (usize, alloc::vec::Vec<GrammarItem>, usize),
___2: (usize, alloc::vec::Vec<Attribute>, usize),
___3: (usize, Tok<'input>, usize),
___4: (usize, Tok<'input>, usize),
___5: (usize, alloc::vec::Vec<GrammarItem>, usize),
) -> Grammar
{
let ___start0 = ___1.0;
let ___end0 = ___1.2;
let ___temp0 = ___action200(
text,
___1,
);
let ___temp0 = (___start0, ___temp0, ___end0);
___action686(
text,
___0,
___temp0,
___2,
___3,
___4,
___5,
)
}

#[allow(clippy::type_complexity, dead_code)]
pub trait ___ToTriple<'input, >
{
fn to_triple(self) -> Result<(usize,Tok<'input>,usize), ___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>>;
}

impl<'input, > ___ToTriple<'input, > for (usize, Tok<'input>, usize)
{
fn to_triple(self) -> Result<(usize,Tok<'input>,usize), ___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>> {
Ok(self)
}
}
impl<'input, > ___ToTriple<'input, > for Result<(usize, Tok<'input>, usize), tok::Error>
{
fn to_triple(self) -> Result<(usize,Tok<'input>,usize), ___lalrpop_util::ParseError<usize, Tok<'input>, tok::Error>> {
self.map_err(|error| ___lalrpop_util::ParseError::User { error })
}
}
